### YamlMime:ManagedReference
items:
- uid: Serious.Abbot.Scripting.IBrain
  commentId: T:Serious.Abbot.Scripting.IBrain
  id: IBrain
  parent: Serious.Abbot.Scripting
  children:
  - Serious.Abbot.Scripting.IBrain.DeleteAsync(System.String)
  - Serious.Abbot.Scripting.IBrain.GetAllAsync(System.Nullable{System.String})
  - Serious.Abbot.Scripting.IBrain.GetAsAsync``1(System.String)
  - Serious.Abbot.Scripting.IBrain.GetAsAsync``1(System.String,``0)
  - Serious.Abbot.Scripting.IBrain.GetAsync(System.String)
  - Serious.Abbot.Scripting.IBrain.GetKeysAsync(System.Nullable{System.String})
  - Serious.Abbot.Scripting.IBrain.WriteAsync(System.String,System.Object)
  langs:
  - csharp
  - vb
  name: IBrain
  nameWithType: IBrain
  fullName: Serious.Abbot.Scripting.IBrain
  type: Interface
  source:
    remote:
      path: src/Abbot.Scripting.Interfaces/IBrain.cs
      branch: docs
      repo: https://github.com/aseriousbiz/abbot.git
    id: IBrain
    path: ../../src/Abbot.Scripting.Interfaces/IBrain.cs
    startLine: 8
  assemblies:
  - Abbot.Scripting.Interfaces
  namespace: Serious.Abbot.Scripting
  summary: "\nUsed to store information specific to your bot skill.\n"
  example: []
  syntax:
    content: public interface IBrain
    content.vb: Public Interface IBrain
  extensionMethods:
  - Serious.Abbot.Scripting.IBrain.Serious.Abbot.Scripting.BrainExtensions.AddToListAsync``1(System.String,{T})
  - Serious.Abbot.Scripting.IBrain.Serious.Abbot.Scripting.BrainExtensions.AddToHashSetAsync``1(System.String,{T})
  - Serious.Abbot.Scripting.IBrain.Serious.Abbot.Scripting.BrainExtensions.RemoveFromListAsync``1(System.String,{T})
  - Serious.Abbot.Scripting.IBrain.Serious.Abbot.Scripting.BrainExtensions.RemoveAtFromListAsync``1(System.String,System.Int32)
  - Serious.Abbot.Scripting.IBrain.Serious.Abbot.Scripting.BrainExtensions.RemoveFromHashSetAsync``1(System.String,{T})
  - Serious.Abbot.Scripting.IBrain.Serious.Abbot.Scripting.BrainExtensions.GetListAsync``1(System.String)
  - Serious.Abbot.Scripting.IBrain.Serious.Abbot.Scripting.BrainExtensions.GetHashSetAsync``1(System.String)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Serious.Abbot.Scripting.IBrain.GetAsync(System.String)
  commentId: M:Serious.Abbot.Scripting.IBrain.GetAsync(System.String)
  id: GetAsync(System.String)
  parent: Serious.Abbot.Scripting.IBrain
  langs:
  - csharp
  - vb
  name: GetAsync(String)
  nameWithType: IBrain.GetAsync(String)
  fullName: Serious.Abbot.Scripting.IBrain.GetAsync(System.String)
  type: Method
  source:
    remote:
      path: src/Abbot.Scripting.Interfaces/IBrain.cs
      branch: docs
      repo: https://github.com/aseriousbiz/abbot.git
    id: GetAsync
    path: ../../src/Abbot.Scripting.Interfaces/IBrain.cs
    startLine: 15
  assemblies:
  - Abbot.Scripting.Interfaces
  namespace: Serious.Abbot.Scripting
  summary: "\nReads a storage item from the brain.\n"
  example: []
  syntax:
    content: Task<dynamic> GetAsync(string key)
    parameters:
    - id: key
      type: System.String
      description: key of the item to read.
    return:
      type: Task{System.Object}
      description: The stored value associated with the key.
    content.vb: Function GetAsync(key As String) As Task(Of Object)
  overload: Serious.Abbot.Scripting.IBrain.GetAsync*
- uid: Serious.Abbot.Scripting.IBrain.GetAsAsync``1(System.String)
  commentId: M:Serious.Abbot.Scripting.IBrain.GetAsAsync``1(System.String)
  id: GetAsAsync``1(System.String)
  parent: Serious.Abbot.Scripting.IBrain
  langs:
  - csharp
  - vb
  name: GetAsAsync<T>(String)
  nameWithType: IBrain.GetAsAsync<T>(String)
  fullName: Serious.Abbot.Scripting.IBrain.GetAsAsync<T>(System.String)
  type: Method
  source:
    remote:
      path: src/Abbot.Scripting.Interfaces/IBrain.cs
      branch: docs
      repo: https://github.com/aseriousbiz/abbot.git
    id: GetAsAsync
    path: ../../src/Abbot.Scripting.Interfaces/IBrain.cs
    startLine: 22
  assemblies:
  - Abbot.Scripting.Interfaces
  namespace: Serious.Abbot.Scripting
  summary: "\nGets an item from the brain and casts it to <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T</code>. Returns null if it does not exist.\n"
  example: []
  syntax:
    content: Task<T> GetAsAsync<T>(string key)
    parameters:
    - id: key
      type: System.String
      description: key of the item to read.
    typeParameters:
    - id: T
    return:
      type: Task{{T}}
      description: The stored value associated with the key.
    content.vb: Function GetAsAsync(Of T)(key As String) As Task(Of T)
  overload: Serious.Abbot.Scripting.IBrain.GetAsAsync*
  nameWithType.vb: IBrain.GetAsAsync(Of T)(String)
  fullName.vb: Serious.Abbot.Scripting.IBrain.GetAsAsync(Of T)(System.String)
  name.vb: GetAsAsync(Of T)(String)
- uid: Serious.Abbot.Scripting.IBrain.GetAsAsync``1(System.String,``0)
  commentId: M:Serious.Abbot.Scripting.IBrain.GetAsAsync``1(System.String,``0)
  id: GetAsAsync``1(System.String,``0)
  parent: Serious.Abbot.Scripting.IBrain
  langs:
  - csharp
  - vb
  name: GetAsAsync<T>(String, T)
  nameWithType: IBrain.GetAsAsync<T>(String, T)
  fullName: Serious.Abbot.Scripting.IBrain.GetAsAsync<T>(System.String, T)
  type: Method
  source:
    remote:
      path: src/Abbot.Scripting.Interfaces/IBrain.cs
      branch: docs
      repo: https://github.com/aseriousbiz/abbot.git
    id: GetAsAsync
    path: ../../src/Abbot.Scripting.Interfaces/IBrain.cs
    startLine: 30
  assemblies:
  - Abbot.Scripting.Interfaces
  namespace: Serious.Abbot.Scripting
  summary: "\nGets an item from the brain and casts it to <code data-dev-comment-type=\"typeparamref\" class=\"typeparamref\">T</code>. Returns defaultValue if it does not exist.\n"
  example: []
  syntax:
    content: Task<T> GetAsAsync<T>(string key, T defaultValue)
    parameters:
    - id: key
      type: System.String
      description: key of the item to read.
    - id: defaultValue
      type: '{T}'
      description: The value to return if the key is missing from storage.
    typeParameters:
    - id: T
    return:
      type: Task{{T}}
      description: The stored value associated with the key.
    content.vb: Function GetAsAsync(Of T)(key As String, defaultValue As T) As Task(Of T)
  overload: Serious.Abbot.Scripting.IBrain.GetAsAsync*
  nameWithType.vb: IBrain.GetAsAsync(Of T)(String, T)
  fullName.vb: Serious.Abbot.Scripting.IBrain.GetAsAsync(Of T)(System.String, T)
  name.vb: GetAsAsync(Of T)(String, T)
- uid: Serious.Abbot.Scripting.IBrain.WriteAsync(System.String,System.Object)
  commentId: M:Serious.Abbot.Scripting.IBrain.WriteAsync(System.String,System.Object)
  id: WriteAsync(System.String,System.Object)
  parent: Serious.Abbot.Scripting.IBrain
  langs:
  - csharp
  - vb
  name: WriteAsync(String, Object)
  nameWithType: IBrain.WriteAsync(String, Object)
  fullName: Serious.Abbot.Scripting.IBrain.WriteAsync(System.String, System.Object)
  type: Method
  source:
    remote:
      path: src/Abbot.Scripting.Interfaces/IBrain.cs
      branch: docs
      repo: https://github.com/aseriousbiz/abbot.git
    id: WriteAsync
    path: ../../src/Abbot.Scripting.Interfaces/IBrain.cs
    startLine: 38
  assemblies:
  - Abbot.Scripting.Interfaces
  namespace: Serious.Abbot.Scripting
  summary: "\nWrites the specified value to the brain. It overwrites an existing item.\n"
  example: []
  syntax:
    content: Task WriteAsync(string key, object value)
    parameters:
    - id: key
      type: System.String
      description: key of the item to store.
    - id: value
      type: System.Object
      description: The item to store.
    return:
      type: Task
      description: A task that represents the work queued to execute.
    content.vb: Function WriteAsync(key As String, value As Object) As Task
  overload: Serious.Abbot.Scripting.IBrain.WriteAsync*
- uid: Serious.Abbot.Scripting.IBrain.DeleteAsync(System.String)
  commentId: M:Serious.Abbot.Scripting.IBrain.DeleteAsync(System.String)
  id: DeleteAsync(System.String)
  parent: Serious.Abbot.Scripting.IBrain
  langs:
  - csharp
  - vb
  name: DeleteAsync(String)
  nameWithType: IBrain.DeleteAsync(String)
  fullName: Serious.Abbot.Scripting.IBrain.DeleteAsync(System.String)
  type: Method
  source:
    remote:
      path: src/Abbot.Scripting.Interfaces/IBrain.cs
      branch: docs
      repo: https://github.com/aseriousbiz/abbot.git
    id: DeleteAsync
    path: ../../src/Abbot.Scripting.Interfaces/IBrain.cs
    startLine: 45
  assemblies:
  - Abbot.Scripting.Interfaces
  namespace: Serious.Abbot.Scripting
  summary: "\nDeletes the stored item associated with the key.\n"
  example: []
  syntax:
    content: Task DeleteAsync(string key)
    parameters:
    - id: key
      type: System.String
      description: key of the stored item to delete.
    return:
      type: Task
      description: A task that represents the work queued to execute.
    content.vb: Function DeleteAsync(key As String) As Task
  overload: Serious.Abbot.Scripting.IBrain.DeleteAsync*
- uid: Serious.Abbot.Scripting.IBrain.GetKeysAsync(System.Nullable{System.String})
  commentId: M:Serious.Abbot.Scripting.IBrain.GetKeysAsync(System.Nullable{System.String})
  id: GetKeysAsync(System.Nullable{System.String})
  parent: Serious.Abbot.Scripting.IBrain
  langs:
  - csharp
  - vb
  name: GetKeysAsync(Nullable<String>)
  nameWithType: IBrain.GetKeysAsync(Nullable<String>)
  fullName: Serious.Abbot.Scripting.IBrain.GetKeysAsync(System.Nullable<System.String>)
  type: Method
  source:
    remote:
      path: src/Abbot.Scripting.Interfaces/IBrain.cs
      branch: docs
      repo: https://github.com/aseriousbiz/abbot.git
    id: GetKeysAsync
    path: ../../src/Abbot.Scripting.Interfaces/IBrain.cs
    startLine: 51
  assemblies:
  - Abbot.Scripting.Interfaces
  namespace: Serious.Abbot.Scripting
  summary: "\nRetrieves all of the stored keys.\n"
  example: []
  syntax:
    content: Task<IReadOnlyList<string>> GetKeysAsync(string? fuzzyKeyFilter = null)
    parameters:
    - id: fuzzyKeyFilter
      type: System.Nullable{System.String}
    return:
      type: Task{IReadOnlyList{System.String}}
      description: The stored keys.
    content.vb: Function GetKeysAsync(fuzzyKeyFilter As String? = Nothing) As Task(Of IReadOnlyList(Of String))
  overload: Serious.Abbot.Scripting.IBrain.GetKeysAsync*
  nameWithType.vb: IBrain.GetKeysAsync(Nullable(Of String))
  fullName.vb: Serious.Abbot.Scripting.IBrain.GetKeysAsync(System.Nullable(Of System.String))
  name.vb: GetKeysAsync(Nullable(Of String))
- uid: Serious.Abbot.Scripting.IBrain.GetAllAsync(System.Nullable{System.String})
  commentId: M:Serious.Abbot.Scripting.IBrain.GetAllAsync(System.Nullable{System.String})
  id: GetAllAsync(System.Nullable{System.String})
  parent: Serious.Abbot.Scripting.IBrain
  langs:
  - csharp
  - vb
  name: GetAllAsync(Nullable<String>)
  nameWithType: IBrain.GetAllAsync(Nullable<String>)
  fullName: Serious.Abbot.Scripting.IBrain.GetAllAsync(System.Nullable<System.String>)
  type: Method
  source:
    remote:
      path: src/Abbot.Scripting.Interfaces/IBrain.cs
      branch: docs
      repo: https://github.com/aseriousbiz/abbot.git
    id: GetAllAsync
    path: ../../src/Abbot.Scripting.Interfaces/IBrain.cs
    startLine: 58
  assemblies:
  - Abbot.Scripting.Interfaces
  namespace: Serious.Abbot.Scripting
  summary: "\nRetrieves all the values\n"
  example: []
  syntax:
    content: Task<IReadOnlyList<ISkillDataItem>> GetAllAsync(string? fuzzyKeyFilter = null)
    parameters:
    - id: fuzzyKeyFilter
      type: System.Nullable{System.String}
      description: An optional fuzzy filter used to filter values
    return:
      type: Task{IReadOnlyList{Serious.Abbot.Scripting.ISkillDataItem}}
      description: The stored data for this skill.
    content.vb: Function GetAllAsync(fuzzyKeyFilter As String? = Nothing) As Task(Of IReadOnlyList(Of ISkillDataItem))
  overload: Serious.Abbot.Scripting.IBrain.GetAllAsync*
  nameWithType.vb: IBrain.GetAllAsync(Nullable(Of String))
  fullName.vb: Serious.Abbot.Scripting.IBrain.GetAllAsync(System.Nullable(Of System.String))
  name.vb: GetAllAsync(Nullable(Of String))
references:
- uid: Serious.Abbot.Scripting
  commentId: N:Serious.Abbot.Scripting
  name: Serious.Abbot.Scripting
  nameWithType: Serious.Abbot.Scripting
  fullName: Serious.Abbot.Scripting
- uid: Serious.Abbot.Scripting.IBrain.Serious.Abbot.Scripting.BrainExtensions.AddToListAsync``1(System.String,{T})
  commentId: M:Serious.Abbot.Scripting.BrainExtensions.AddToListAsync``1(Serious.Abbot.Scripting.IBrain,System.String,``0)
  parent: Serious.Abbot.Scripting.BrainExtensions
  definition: Serious.Abbot.Scripting.BrainExtensions.AddToListAsync``1(Serious.Abbot.Scripting.IBrain,System.String,``0)
  name: AddToListAsync<T>(String, T)
  nameWithType: BrainExtensions.AddToListAsync<T>(String, T)
  fullName: Serious.Abbot.Scripting.BrainExtensions.AddToListAsync<T>(System.String, T)
  nameWithType.vb: BrainExtensions.AddToListAsync(Of T)(String, T)
  fullName.vb: Serious.Abbot.Scripting.BrainExtensions.AddToListAsync(Of T)(System.String, T)
  name.vb: AddToListAsync(Of T)(String, T)
  spec.csharp:
  - uid: Serious.Abbot.Scripting.BrainExtensions.AddToListAsync``1(System.String,``0)
    name: AddToListAsync<T>
    nameWithType: BrainExtensions.AddToListAsync<T>
    fullName: Serious.Abbot.Scripting.BrainExtensions.AddToListAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Serious.Abbot.Scripting.BrainExtensions.AddToListAsync``1(System.String,``0)
    name: AddToListAsync(Of T)
    nameWithType: BrainExtensions.AddToListAsync(Of T)
    fullName: Serious.Abbot.Scripting.BrainExtensions.AddToListAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Serious.Abbot.Scripting.IBrain.Serious.Abbot.Scripting.BrainExtensions.AddToHashSetAsync``1(System.String,{T})
  commentId: M:Serious.Abbot.Scripting.BrainExtensions.AddToHashSetAsync``1(Serious.Abbot.Scripting.IBrain,System.String,``0)
  parent: Serious.Abbot.Scripting.BrainExtensions
  definition: Serious.Abbot.Scripting.BrainExtensions.AddToHashSetAsync``1(Serious.Abbot.Scripting.IBrain,System.String,``0)
  name: AddToHashSetAsync<T>(String, T)
  nameWithType: BrainExtensions.AddToHashSetAsync<T>(String, T)
  fullName: Serious.Abbot.Scripting.BrainExtensions.AddToHashSetAsync<T>(System.String, T)
  nameWithType.vb: BrainExtensions.AddToHashSetAsync(Of T)(String, T)
  fullName.vb: Serious.Abbot.Scripting.BrainExtensions.AddToHashSetAsync(Of T)(System.String, T)
  name.vb: AddToHashSetAsync(Of T)(String, T)
  spec.csharp:
  - uid: Serious.Abbot.Scripting.BrainExtensions.AddToHashSetAsync``1(System.String,``0)
    name: AddToHashSetAsync<T>
    nameWithType: BrainExtensions.AddToHashSetAsync<T>
    fullName: Serious.Abbot.Scripting.BrainExtensions.AddToHashSetAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Serious.Abbot.Scripting.BrainExtensions.AddToHashSetAsync``1(System.String,``0)
    name: AddToHashSetAsync(Of T)
    nameWithType: BrainExtensions.AddToHashSetAsync(Of T)
    fullName: Serious.Abbot.Scripting.BrainExtensions.AddToHashSetAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Serious.Abbot.Scripting.IBrain.Serious.Abbot.Scripting.BrainExtensions.RemoveFromListAsync``1(System.String,{T})
  commentId: M:Serious.Abbot.Scripting.BrainExtensions.RemoveFromListAsync``1(Serious.Abbot.Scripting.IBrain,System.String,``0)
  parent: Serious.Abbot.Scripting.BrainExtensions
  definition: Serious.Abbot.Scripting.BrainExtensions.RemoveFromListAsync``1(Serious.Abbot.Scripting.IBrain,System.String,``0)
  name: RemoveFromListAsync<T>(String, T)
  nameWithType: BrainExtensions.RemoveFromListAsync<T>(String, T)
  fullName: Serious.Abbot.Scripting.BrainExtensions.RemoveFromListAsync<T>(System.String, T)
  nameWithType.vb: BrainExtensions.RemoveFromListAsync(Of T)(String, T)
  fullName.vb: Serious.Abbot.Scripting.BrainExtensions.RemoveFromListAsync(Of T)(System.String, T)
  name.vb: RemoveFromListAsync(Of T)(String, T)
  spec.csharp:
  - uid: Serious.Abbot.Scripting.BrainExtensions.RemoveFromListAsync``1(System.String,``0)
    name: RemoveFromListAsync<T>
    nameWithType: BrainExtensions.RemoveFromListAsync<T>
    fullName: Serious.Abbot.Scripting.BrainExtensions.RemoveFromListAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Serious.Abbot.Scripting.BrainExtensions.RemoveFromListAsync``1(System.String,``0)
    name: RemoveFromListAsync(Of T)
    nameWithType: BrainExtensions.RemoveFromListAsync(Of T)
    fullName: Serious.Abbot.Scripting.BrainExtensions.RemoveFromListAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Serious.Abbot.Scripting.IBrain.Serious.Abbot.Scripting.BrainExtensions.RemoveAtFromListAsync``1(System.String,System.Int32)
  commentId: M:Serious.Abbot.Scripting.BrainExtensions.RemoveAtFromListAsync``1(Serious.Abbot.Scripting.IBrain,System.String,System.Int32)
  parent: Serious.Abbot.Scripting.BrainExtensions
  definition: Serious.Abbot.Scripting.BrainExtensions.RemoveAtFromListAsync``1(Serious.Abbot.Scripting.IBrain,System.String,System.Int32)
  name: RemoveAtFromListAsync<T>(String, Int32)
  nameWithType: BrainExtensions.RemoveAtFromListAsync<T>(String, Int32)
  fullName: Serious.Abbot.Scripting.BrainExtensions.RemoveAtFromListAsync<T>(System.String, System.Int32)
  nameWithType.vb: BrainExtensions.RemoveAtFromListAsync(Of T)(String, Int32)
  fullName.vb: Serious.Abbot.Scripting.BrainExtensions.RemoveAtFromListAsync(Of T)(System.String, System.Int32)
  name.vb: RemoveAtFromListAsync(Of T)(String, Int32)
  spec.csharp:
  - uid: Serious.Abbot.Scripting.BrainExtensions.RemoveAtFromListAsync``1(System.String,System.Int32)
    name: RemoveAtFromListAsync<T>
    nameWithType: BrainExtensions.RemoveAtFromListAsync<T>
    fullName: Serious.Abbot.Scripting.BrainExtensions.RemoveAtFromListAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Serious.Abbot.Scripting.BrainExtensions.RemoveAtFromListAsync``1(System.String,System.Int32)
    name: RemoveAtFromListAsync(Of T)
    nameWithType: BrainExtensions.RemoveAtFromListAsync(Of T)
    fullName: Serious.Abbot.Scripting.BrainExtensions.RemoveAtFromListAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Serious.Abbot.Scripting.IBrain.Serious.Abbot.Scripting.BrainExtensions.RemoveFromHashSetAsync``1(System.String,{T})
  commentId: M:Serious.Abbot.Scripting.BrainExtensions.RemoveFromHashSetAsync``1(Serious.Abbot.Scripting.IBrain,System.String,``0)
  parent: Serious.Abbot.Scripting.BrainExtensions
  definition: Serious.Abbot.Scripting.BrainExtensions.RemoveFromHashSetAsync``1(Serious.Abbot.Scripting.IBrain,System.String,``0)
  name: RemoveFromHashSetAsync<T>(String, T)
  nameWithType: BrainExtensions.RemoveFromHashSetAsync<T>(String, T)
  fullName: Serious.Abbot.Scripting.BrainExtensions.RemoveFromHashSetAsync<T>(System.String, T)
  nameWithType.vb: BrainExtensions.RemoveFromHashSetAsync(Of T)(String, T)
  fullName.vb: Serious.Abbot.Scripting.BrainExtensions.RemoveFromHashSetAsync(Of T)(System.String, T)
  name.vb: RemoveFromHashSetAsync(Of T)(String, T)
  spec.csharp:
  - uid: Serious.Abbot.Scripting.BrainExtensions.RemoveFromHashSetAsync``1(System.String,``0)
    name: RemoveFromHashSetAsync<T>
    nameWithType: BrainExtensions.RemoveFromHashSetAsync<T>
    fullName: Serious.Abbot.Scripting.BrainExtensions.RemoveFromHashSetAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Serious.Abbot.Scripting.BrainExtensions.RemoveFromHashSetAsync``1(System.String,``0)
    name: RemoveFromHashSetAsync(Of T)
    nameWithType: BrainExtensions.RemoveFromHashSetAsync(Of T)
    fullName: Serious.Abbot.Scripting.BrainExtensions.RemoveFromHashSetAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Serious.Abbot.Scripting.IBrain.Serious.Abbot.Scripting.BrainExtensions.GetListAsync``1(System.String)
  commentId: M:Serious.Abbot.Scripting.BrainExtensions.GetListAsync``1(Serious.Abbot.Scripting.IBrain,System.String)
  parent: Serious.Abbot.Scripting.BrainExtensions
  definition: Serious.Abbot.Scripting.BrainExtensions.GetListAsync``1(Serious.Abbot.Scripting.IBrain,System.String)
  name: GetListAsync<T>(String)
  nameWithType: BrainExtensions.GetListAsync<T>(String)
  fullName: Serious.Abbot.Scripting.BrainExtensions.GetListAsync<T>(System.String)
  nameWithType.vb: BrainExtensions.GetListAsync(Of T)(String)
  fullName.vb: Serious.Abbot.Scripting.BrainExtensions.GetListAsync(Of T)(System.String)
  name.vb: GetListAsync(Of T)(String)
  spec.csharp:
  - uid: Serious.Abbot.Scripting.BrainExtensions.GetListAsync``1(System.String)
    name: GetListAsync<T>
    nameWithType: BrainExtensions.GetListAsync<T>
    fullName: Serious.Abbot.Scripting.BrainExtensions.GetListAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Serious.Abbot.Scripting.BrainExtensions.GetListAsync``1(System.String)
    name: GetListAsync(Of T)
    nameWithType: BrainExtensions.GetListAsync(Of T)
    fullName: Serious.Abbot.Scripting.BrainExtensions.GetListAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Serious.Abbot.Scripting.IBrain.Serious.Abbot.Scripting.BrainExtensions.GetHashSetAsync``1(System.String)
  commentId: M:Serious.Abbot.Scripting.BrainExtensions.GetHashSetAsync``1(Serious.Abbot.Scripting.IBrain,System.String)
  parent: Serious.Abbot.Scripting.BrainExtensions
  definition: Serious.Abbot.Scripting.BrainExtensions.GetHashSetAsync``1(Serious.Abbot.Scripting.IBrain,System.String)
  name: GetHashSetAsync<T>(String)
  nameWithType: BrainExtensions.GetHashSetAsync<T>(String)
  fullName: Serious.Abbot.Scripting.BrainExtensions.GetHashSetAsync<T>(System.String)
  nameWithType.vb: BrainExtensions.GetHashSetAsync(Of T)(String)
  fullName.vb: Serious.Abbot.Scripting.BrainExtensions.GetHashSetAsync(Of T)(System.String)
  name.vb: GetHashSetAsync(Of T)(String)
  spec.csharp:
  - uid: Serious.Abbot.Scripting.BrainExtensions.GetHashSetAsync``1(System.String)
    name: GetHashSetAsync<T>
    nameWithType: BrainExtensions.GetHashSetAsync<T>
    fullName: Serious.Abbot.Scripting.BrainExtensions.GetHashSetAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Serious.Abbot.Scripting.BrainExtensions.GetHashSetAsync``1(System.String)
    name: GetHashSetAsync(Of T)
    nameWithType: BrainExtensions.GetHashSetAsync(Of T)
    fullName: Serious.Abbot.Scripting.BrainExtensions.GetHashSetAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Serious.Abbot.Scripting.BrainExtensions.AddToListAsync``1(Serious.Abbot.Scripting.IBrain,System.String,``0)
  commentId: M:Serious.Abbot.Scripting.BrainExtensions.AddToListAsync``1(Serious.Abbot.Scripting.IBrain,System.String,``0)
  isExternal: true
  name: AddToListAsync<T>(IBrain, String, T)
  nameWithType: BrainExtensions.AddToListAsync<T>(IBrain, String, T)
  fullName: Serious.Abbot.Scripting.BrainExtensions.AddToListAsync<T>(Serious.Abbot.Scripting.IBrain, System.String, T)
  nameWithType.vb: BrainExtensions.AddToListAsync(Of T)(IBrain, String, T)
  fullName.vb: Serious.Abbot.Scripting.BrainExtensions.AddToListAsync(Of T)(Serious.Abbot.Scripting.IBrain, System.String, T)
  name.vb: AddToListAsync(Of T)(IBrain, String, T)
  spec.csharp:
  - uid: Serious.Abbot.Scripting.BrainExtensions.AddToListAsync``1(Serious.Abbot.Scripting.IBrain,System.String,``0)
    name: AddToListAsync<T>
    nameWithType: BrainExtensions.AddToListAsync<T>
    fullName: Serious.Abbot.Scripting.BrainExtensions.AddToListAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Serious.Abbot.Scripting.IBrain
    name: IBrain
    nameWithType: IBrain
    fullName: Serious.Abbot.Scripting.IBrain
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Serious.Abbot.Scripting.BrainExtensions.AddToListAsync``1(Serious.Abbot.Scripting.IBrain,System.String,``0)
    name: AddToListAsync(Of T)
    nameWithType: BrainExtensions.AddToListAsync(Of T)
    fullName: Serious.Abbot.Scripting.BrainExtensions.AddToListAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Serious.Abbot.Scripting.IBrain
    name: IBrain
    nameWithType: IBrain
    fullName: Serious.Abbot.Scripting.IBrain
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Serious.Abbot.Scripting.BrainExtensions
  commentId: T:Serious.Abbot.Scripting.BrainExtensions
  parent: Serious.Abbot.Scripting
  name: BrainExtensions
  nameWithType: BrainExtensions
  fullName: Serious.Abbot.Scripting.BrainExtensions
- uid: Serious.Abbot.Scripting.BrainExtensions.AddToHashSetAsync``1(Serious.Abbot.Scripting.IBrain,System.String,``0)
  commentId: M:Serious.Abbot.Scripting.BrainExtensions.AddToHashSetAsync``1(Serious.Abbot.Scripting.IBrain,System.String,``0)
  isExternal: true
  name: AddToHashSetAsync<T>(IBrain, String, T)
  nameWithType: BrainExtensions.AddToHashSetAsync<T>(IBrain, String, T)
  fullName: Serious.Abbot.Scripting.BrainExtensions.AddToHashSetAsync<T>(Serious.Abbot.Scripting.IBrain, System.String, T)
  nameWithType.vb: BrainExtensions.AddToHashSetAsync(Of T)(IBrain, String, T)
  fullName.vb: Serious.Abbot.Scripting.BrainExtensions.AddToHashSetAsync(Of T)(Serious.Abbot.Scripting.IBrain, System.String, T)
  name.vb: AddToHashSetAsync(Of T)(IBrain, String, T)
  spec.csharp:
  - uid: Serious.Abbot.Scripting.BrainExtensions.AddToHashSetAsync``1(Serious.Abbot.Scripting.IBrain,System.String,``0)
    name: AddToHashSetAsync<T>
    nameWithType: BrainExtensions.AddToHashSetAsync<T>
    fullName: Serious.Abbot.Scripting.BrainExtensions.AddToHashSetAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Serious.Abbot.Scripting.IBrain
    name: IBrain
    nameWithType: IBrain
    fullName: Serious.Abbot.Scripting.IBrain
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Serious.Abbot.Scripting.BrainExtensions.AddToHashSetAsync``1(Serious.Abbot.Scripting.IBrain,System.String,``0)
    name: AddToHashSetAsync(Of T)
    nameWithType: BrainExtensions.AddToHashSetAsync(Of T)
    fullName: Serious.Abbot.Scripting.BrainExtensions.AddToHashSetAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Serious.Abbot.Scripting.IBrain
    name: IBrain
    nameWithType: IBrain
    fullName: Serious.Abbot.Scripting.IBrain
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Serious.Abbot.Scripting.BrainExtensions.RemoveFromListAsync``1(Serious.Abbot.Scripting.IBrain,System.String,``0)
  commentId: M:Serious.Abbot.Scripting.BrainExtensions.RemoveFromListAsync``1(Serious.Abbot.Scripting.IBrain,System.String,``0)
  isExternal: true
  name: RemoveFromListAsync<T>(IBrain, String, T)
  nameWithType: BrainExtensions.RemoveFromListAsync<T>(IBrain, String, T)
  fullName: Serious.Abbot.Scripting.BrainExtensions.RemoveFromListAsync<T>(Serious.Abbot.Scripting.IBrain, System.String, T)
  nameWithType.vb: BrainExtensions.RemoveFromListAsync(Of T)(IBrain, String, T)
  fullName.vb: Serious.Abbot.Scripting.BrainExtensions.RemoveFromListAsync(Of T)(Serious.Abbot.Scripting.IBrain, System.String, T)
  name.vb: RemoveFromListAsync(Of T)(IBrain, String, T)
  spec.csharp:
  - uid: Serious.Abbot.Scripting.BrainExtensions.RemoveFromListAsync``1(Serious.Abbot.Scripting.IBrain,System.String,``0)
    name: RemoveFromListAsync<T>
    nameWithType: BrainExtensions.RemoveFromListAsync<T>
    fullName: Serious.Abbot.Scripting.BrainExtensions.RemoveFromListAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Serious.Abbot.Scripting.IBrain
    name: IBrain
    nameWithType: IBrain
    fullName: Serious.Abbot.Scripting.IBrain
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Serious.Abbot.Scripting.BrainExtensions.RemoveFromListAsync``1(Serious.Abbot.Scripting.IBrain,System.String,``0)
    name: RemoveFromListAsync(Of T)
    nameWithType: BrainExtensions.RemoveFromListAsync(Of T)
    fullName: Serious.Abbot.Scripting.BrainExtensions.RemoveFromListAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Serious.Abbot.Scripting.IBrain
    name: IBrain
    nameWithType: IBrain
    fullName: Serious.Abbot.Scripting.IBrain
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Serious.Abbot.Scripting.BrainExtensions.RemoveAtFromListAsync``1(Serious.Abbot.Scripting.IBrain,System.String,System.Int32)
  commentId: M:Serious.Abbot.Scripting.BrainExtensions.RemoveAtFromListAsync``1(Serious.Abbot.Scripting.IBrain,System.String,System.Int32)
  isExternal: true
  name: RemoveAtFromListAsync<T>(IBrain, String, Int32)
  nameWithType: BrainExtensions.RemoveAtFromListAsync<T>(IBrain, String, Int32)
  fullName: Serious.Abbot.Scripting.BrainExtensions.RemoveAtFromListAsync<T>(Serious.Abbot.Scripting.IBrain, System.String, System.Int32)
  nameWithType.vb: BrainExtensions.RemoveAtFromListAsync(Of T)(IBrain, String, Int32)
  fullName.vb: Serious.Abbot.Scripting.BrainExtensions.RemoveAtFromListAsync(Of T)(Serious.Abbot.Scripting.IBrain, System.String, System.Int32)
  name.vb: RemoveAtFromListAsync(Of T)(IBrain, String, Int32)
  spec.csharp:
  - uid: Serious.Abbot.Scripting.BrainExtensions.RemoveAtFromListAsync``1(Serious.Abbot.Scripting.IBrain,System.String,System.Int32)
    name: RemoveAtFromListAsync<T>
    nameWithType: BrainExtensions.RemoveAtFromListAsync<T>
    fullName: Serious.Abbot.Scripting.BrainExtensions.RemoveAtFromListAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Serious.Abbot.Scripting.IBrain
    name: IBrain
    nameWithType: IBrain
    fullName: Serious.Abbot.Scripting.IBrain
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Serious.Abbot.Scripting.BrainExtensions.RemoveAtFromListAsync``1(Serious.Abbot.Scripting.IBrain,System.String,System.Int32)
    name: RemoveAtFromListAsync(Of T)
    nameWithType: BrainExtensions.RemoveAtFromListAsync(Of T)
    fullName: Serious.Abbot.Scripting.BrainExtensions.RemoveAtFromListAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Serious.Abbot.Scripting.IBrain
    name: IBrain
    nameWithType: IBrain
    fullName: Serious.Abbot.Scripting.IBrain
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Serious.Abbot.Scripting.BrainExtensions.RemoveFromHashSetAsync``1(Serious.Abbot.Scripting.IBrain,System.String,``0)
  commentId: M:Serious.Abbot.Scripting.BrainExtensions.RemoveFromHashSetAsync``1(Serious.Abbot.Scripting.IBrain,System.String,``0)
  isExternal: true
  name: RemoveFromHashSetAsync<T>(IBrain, String, T)
  nameWithType: BrainExtensions.RemoveFromHashSetAsync<T>(IBrain, String, T)
  fullName: Serious.Abbot.Scripting.BrainExtensions.RemoveFromHashSetAsync<T>(Serious.Abbot.Scripting.IBrain, System.String, T)
  nameWithType.vb: BrainExtensions.RemoveFromHashSetAsync(Of T)(IBrain, String, T)
  fullName.vb: Serious.Abbot.Scripting.BrainExtensions.RemoveFromHashSetAsync(Of T)(Serious.Abbot.Scripting.IBrain, System.String, T)
  name.vb: RemoveFromHashSetAsync(Of T)(IBrain, String, T)
  spec.csharp:
  - uid: Serious.Abbot.Scripting.BrainExtensions.RemoveFromHashSetAsync``1(Serious.Abbot.Scripting.IBrain,System.String,``0)
    name: RemoveFromHashSetAsync<T>
    nameWithType: BrainExtensions.RemoveFromHashSetAsync<T>
    fullName: Serious.Abbot.Scripting.BrainExtensions.RemoveFromHashSetAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Serious.Abbot.Scripting.IBrain
    name: IBrain
    nameWithType: IBrain
    fullName: Serious.Abbot.Scripting.IBrain
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Serious.Abbot.Scripting.BrainExtensions.RemoveFromHashSetAsync``1(Serious.Abbot.Scripting.IBrain,System.String,``0)
    name: RemoveFromHashSetAsync(Of T)
    nameWithType: BrainExtensions.RemoveFromHashSetAsync(Of T)
    fullName: Serious.Abbot.Scripting.BrainExtensions.RemoveFromHashSetAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Serious.Abbot.Scripting.IBrain
    name: IBrain
    nameWithType: IBrain
    fullName: Serious.Abbot.Scripting.IBrain
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Serious.Abbot.Scripting.BrainExtensions.GetListAsync``1(Serious.Abbot.Scripting.IBrain,System.String)
  commentId: M:Serious.Abbot.Scripting.BrainExtensions.GetListAsync``1(Serious.Abbot.Scripting.IBrain,System.String)
  isExternal: true
  name: GetListAsync<T>(IBrain, String)
  nameWithType: BrainExtensions.GetListAsync<T>(IBrain, String)
  fullName: Serious.Abbot.Scripting.BrainExtensions.GetListAsync<T>(Serious.Abbot.Scripting.IBrain, System.String)
  nameWithType.vb: BrainExtensions.GetListAsync(Of T)(IBrain, String)
  fullName.vb: Serious.Abbot.Scripting.BrainExtensions.GetListAsync(Of T)(Serious.Abbot.Scripting.IBrain, System.String)
  name.vb: GetListAsync(Of T)(IBrain, String)
  spec.csharp:
  - uid: Serious.Abbot.Scripting.BrainExtensions.GetListAsync``1(Serious.Abbot.Scripting.IBrain,System.String)
    name: GetListAsync<T>
    nameWithType: BrainExtensions.GetListAsync<T>
    fullName: Serious.Abbot.Scripting.BrainExtensions.GetListAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Serious.Abbot.Scripting.IBrain
    name: IBrain
    nameWithType: IBrain
    fullName: Serious.Abbot.Scripting.IBrain
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Serious.Abbot.Scripting.BrainExtensions.GetListAsync``1(Serious.Abbot.Scripting.IBrain,System.String)
    name: GetListAsync(Of T)
    nameWithType: BrainExtensions.GetListAsync(Of T)
    fullName: Serious.Abbot.Scripting.BrainExtensions.GetListAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Serious.Abbot.Scripting.IBrain
    name: IBrain
    nameWithType: IBrain
    fullName: Serious.Abbot.Scripting.IBrain
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Serious.Abbot.Scripting.BrainExtensions.GetHashSetAsync``1(Serious.Abbot.Scripting.IBrain,System.String)
  commentId: M:Serious.Abbot.Scripting.BrainExtensions.GetHashSetAsync``1(Serious.Abbot.Scripting.IBrain,System.String)
  isExternal: true
  name: GetHashSetAsync<T>(IBrain, String)
  nameWithType: BrainExtensions.GetHashSetAsync<T>(IBrain, String)
  fullName: Serious.Abbot.Scripting.BrainExtensions.GetHashSetAsync<T>(Serious.Abbot.Scripting.IBrain, System.String)
  nameWithType.vb: BrainExtensions.GetHashSetAsync(Of T)(IBrain, String)
  fullName.vb: Serious.Abbot.Scripting.BrainExtensions.GetHashSetAsync(Of T)(Serious.Abbot.Scripting.IBrain, System.String)
  name.vb: GetHashSetAsync(Of T)(IBrain, String)
  spec.csharp:
  - uid: Serious.Abbot.Scripting.BrainExtensions.GetHashSetAsync``1(Serious.Abbot.Scripting.IBrain,System.String)
    name: GetHashSetAsync<T>
    nameWithType: BrainExtensions.GetHashSetAsync<T>
    fullName: Serious.Abbot.Scripting.BrainExtensions.GetHashSetAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Serious.Abbot.Scripting.IBrain
    name: IBrain
    nameWithType: IBrain
    fullName: Serious.Abbot.Scripting.IBrain
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Serious.Abbot.Scripting.BrainExtensions.GetHashSetAsync``1(Serious.Abbot.Scripting.IBrain,System.String)
    name: GetHashSetAsync(Of T)
    nameWithType: BrainExtensions.GetHashSetAsync(Of T)
    fullName: Serious.Abbot.Scripting.BrainExtensions.GetHashSetAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Serious.Abbot.Scripting.IBrain
    name: IBrain
    nameWithType: IBrain
    fullName: Serious.Abbot.Scripting.IBrain
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Serious.Abbot.Scripting.IBrain.GetAsync*
  commentId: Overload:Serious.Abbot.Scripting.IBrain.GetAsync
  name: GetAsync
  nameWithType: IBrain.GetAsync
  fullName: Serious.Abbot.Scripting.IBrain.GetAsync
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Task{System.Object}
  commentId: '!:Task{System.Object}'
  definition: Task`1
  name: Task<Object>
  nameWithType: Task<Object>
  fullName: Task<System.Object>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Serious.Abbot.Scripting.IBrain.GetAsAsync*
  commentId: Overload:Serious.Abbot.Scripting.IBrain.GetAsAsync
  name: GetAsAsync
  nameWithType: IBrain.GetAsAsync
  fullName: Serious.Abbot.Scripting.IBrain.GetAsAsync
- uid: Task{{T}}
  commentId: '!:Task{``0}'
  definition: Task`1
  name: Task<T>
  nameWithType: Task<T>
  fullName: Task<T>
  nameWithType.vb: Task(Of T)
  fullName.vb: Task(Of T)
  name.vb: Task(Of T)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Serious.Abbot.Scripting.IBrain.WriteAsync*
  commentId: Overload:Serious.Abbot.Scripting.IBrain.WriteAsync
  name: WriteAsync
  nameWithType: IBrain.WriteAsync
  fullName: Serious.Abbot.Scripting.IBrain.WriteAsync
- uid: System.Object
  commentId: T:System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: Task
- uid: Serious.Abbot.Scripting.IBrain.DeleteAsync*
  commentId: Overload:Serious.Abbot.Scripting.IBrain.DeleteAsync
  name: DeleteAsync
  nameWithType: IBrain.DeleteAsync
  fullName: Serious.Abbot.Scripting.IBrain.DeleteAsync
- uid: Serious.Abbot.Scripting.IBrain.GetKeysAsync*
  commentId: Overload:Serious.Abbot.Scripting.IBrain.GetKeysAsync
  name: GetKeysAsync
  nameWithType: IBrain.GetKeysAsync
  fullName: Serious.Abbot.Scripting.IBrain.GetKeysAsync
- uid: System.Nullable{System.String}
  commentId: '!:System.Nullable{System.String}'
  definition: System.Nullable`1
  name: Nullable<String>
  nameWithType: Nullable<String>
  fullName: System.Nullable<System.String>
  nameWithType.vb: Nullable(Of String)
  fullName.vb: System.Nullable(Of System.String)
  name.vb: Nullable(Of String)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Task{IReadOnlyList{System.String}}
  commentId: '!:Task{IReadOnlyList{System.String}}'
  definition: Task`1
  name: Task<IReadOnlyList<String>>
  nameWithType: Task<IReadOnlyList<String>>
  fullName: Task<IReadOnlyList<System.String>>
  nameWithType.vb: Task(Of IReadOnlyList(Of String))
  fullName.vb: Task(Of IReadOnlyList(Of System.String))
  name.vb: Task(Of IReadOnlyList(Of String))
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  isExternal: true
  name: Nullable<>
  nameWithType: Nullable<>
  fullName: System.Nullable<>
  nameWithType.vb: Nullable(Of )
  fullName.vb: System.Nullable(Of )
  name.vb: Nullable(Of )
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Serious.Abbot.Scripting.IBrain.GetAllAsync*
  commentId: Overload:Serious.Abbot.Scripting.IBrain.GetAllAsync
  name: GetAllAsync
  nameWithType: IBrain.GetAllAsync
  fullName: Serious.Abbot.Scripting.IBrain.GetAllAsync
- uid: Task{IReadOnlyList{Serious.Abbot.Scripting.ISkillDataItem}}
  commentId: '!:Task{IReadOnlyList{Serious.Abbot.Scripting.ISkillDataItem}}'
  definition: Task`1
  name: Task<IReadOnlyList<ISkillDataItem>>
  nameWithType: Task<IReadOnlyList<ISkillDataItem>>
  fullName: Task<IReadOnlyList<Serious.Abbot.Scripting.ISkillDataItem>>
  nameWithType.vb: Task(Of IReadOnlyList(Of ISkillDataItem))
  fullName.vb: Task(Of IReadOnlyList(Of Serious.Abbot.Scripting.ISkillDataItem))
  name.vb: Task(Of IReadOnlyList(Of ISkillDataItem))
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Serious.Abbot.Scripting.ISkillDataItem
    name: ISkillDataItem
    nameWithType: ISkillDataItem
    fullName: Serious.Abbot.Scripting.ISkillDataItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Serious.Abbot.Scripting.ISkillDataItem
    name: ISkillDataItem
    nameWithType: ISkillDataItem
    fullName: Serious.Abbot.Scripting.ISkillDataItem
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
