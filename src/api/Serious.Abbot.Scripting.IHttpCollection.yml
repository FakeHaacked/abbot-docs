### YamlMime:ManagedReference
items:
- uid: Serious.Abbot.Scripting.IHttpCollection
  commentId: T:Serious.Abbot.Scripting.IHttpCollection
  id: IHttpCollection
  parent: Serious.Abbot.Scripting
  children:
  - Serious.Abbot.Scripting.IHttpCollection.ContainsKey(System.String)
  - Serious.Abbot.Scripting.IHttpCollection.Keys
  - Serious.Abbot.Scripting.IHttpCollection.TryGetValue(System.String,Serious.Abbot.Scripting.StringValues@)
  - Serious.Abbot.Scripting.IHttpCollection.Values
  langs:
  - csharp
  - vb
  name: IHttpCollection
  nameWithType: IHttpCollection
  fullName: Serious.Abbot.Scripting.IHttpCollection
  type: Interface
  source:
    remote:
      path: src/Abbot.Scripting.Interfaces/Http/IHttpCollection.cs
      branch: docs
      repo: https://github.com/aseriousbiz/abbot.git
    id: IHttpCollection
    path: ../../src/Abbot.Scripting.Interfaces/Http/IHttpCollection.cs
    startLine: 8
  assemblies:
  - Abbot.Scripting.Interfaces
  namespace: Serious.Abbot.Scripting
  summary: "\nRepresents Http collections such as query string, form, and headers.\n"
  example: []
  syntax:
    content: 'public interface IHttpCollection : IReadOnlyCollection<KeyValuePair<string, StringValues>>'
    content.vb: >-
      Public Interface IHttpCollection

          Inherits IReadOnlyCollection(Of KeyValuePair(Of String, StringValues))
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Serious.Abbot.Scripting.IHttpCollection.ContainsKey(System.String)
  commentId: M:Serious.Abbot.Scripting.IHttpCollection.ContainsKey(System.String)
  id: ContainsKey(System.String)
  parent: Serious.Abbot.Scripting.IHttpCollection
  langs:
  - csharp
  - vb
  name: ContainsKey(String)
  nameWithType: IHttpCollection.ContainsKey(String)
  fullName: Serious.Abbot.Scripting.IHttpCollection.ContainsKey(System.String)
  type: Method
  source:
    remote:
      path: src/Abbot.Scripting.Interfaces/Http/IHttpCollection.cs
      branch: docs
      repo: https://github.com/aseriousbiz/abbot.git
    id: ContainsKey
    path: ../../src/Abbot.Scripting.Interfaces/Http/IHttpCollection.cs
    startLine: 24
  assemblies:
  - Abbot.Scripting.Interfaces
  namespace: Serious.Abbot.Scripting
  summary: "\nDetermines whether the <xref href=\"Serious.Abbot.Scripting.IHttpCollection\" data-throw-if-not-resolved=\"false\"></xref> contains an element\nwith the specified key.\n"
  example: []
  syntax:
    content: bool ContainsKey(string key)
    parameters:
    - id: key
      type: System.String
      description: "\nThe key to locate in the <xref href=\"Serious.Abbot.Scripting.IHttpCollection\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    return:
      type: System.Boolean
      description: "\ntrue if the <xref href=\"Serious.Abbot.Scripting.IHttpCollection\" data-throw-if-not-resolved=\"false\"></xref> contains an element with\nthe key; otherwise, false.\n"
    content.vb: Function ContainsKey(key As String) As Boolean
  overload: Serious.Abbot.Scripting.IHttpCollection.ContainsKey*
- uid: Serious.Abbot.Scripting.IHttpCollection.TryGetValue(System.String,Serious.Abbot.Scripting.StringValues@)
  commentId: M:Serious.Abbot.Scripting.IHttpCollection.TryGetValue(System.String,Serious.Abbot.Scripting.StringValues@)
  id: TryGetValue(System.String,Serious.Abbot.Scripting.StringValues@)
  parent: Serious.Abbot.Scripting.IHttpCollection
  langs:
  - csharp
  - vb
  name: TryGetValue(String, out StringValues)
  nameWithType: IHttpCollection.TryGetValue(String, out StringValues)
  fullName: Serious.Abbot.Scripting.IHttpCollection.TryGetValue(System.String, out Serious.Abbot.Scripting.StringValues)
  type: Method
  source:
    remote:
      path: src/Abbot.Scripting.Interfaces/Http/IHttpCollection.cs
      branch: docs
      repo: https://github.com/aseriousbiz/abbot.git
    id: TryGetValue
    path: ../../src/Abbot.Scripting.Interfaces/Http/IHttpCollection.cs
    startLine: 45
  assemblies:
  - Abbot.Scripting.Interfaces
  namespace: Serious.Abbot.Scripting
  summary: "\nGets the value associated with the specified key.\n"
  example: []
  syntax:
    content: bool TryGetValue(string key, out StringValues value)
    parameters:
    - id: key
      type: System.String
      description: "\nThe key of the value to get.\n"
    - id: value
      type: Serious.Abbot.Scripting.StringValues
      description: "\nThe key of the value to get.\nWhen this method returns, the value associated with the specified key, if the\nkey is found; otherwise, the default value for the type of the value parameter.\nThis parameter is passed uninitialized.\n"
    return:
      type: System.Boolean
      description: "\ntrue if the object that implements <xref href=\"Serious.Abbot.Scripting.IHttpCollection\" data-throw-if-not-resolved=\"false\"></xref> contains\nan element with the specified key; otherwise, false.\n"
    content.vb: Function TryGetValue(key As String, ByRef value As StringValues) As Boolean
  overload: Serious.Abbot.Scripting.IHttpCollection.TryGetValue*
  nameWithType.vb: IHttpCollection.TryGetValue(String, ByRef StringValues)
  fullName.vb: Serious.Abbot.Scripting.IHttpCollection.TryGetValue(System.String, ByRef Serious.Abbot.Scripting.StringValues)
  name.vb: TryGetValue(String, ByRef StringValues)
- uid: Serious.Abbot.Scripting.IHttpCollection.Keys
  commentId: P:Serious.Abbot.Scripting.IHttpCollection.Keys
  id: Keys
  parent: Serious.Abbot.Scripting.IHttpCollection
  langs:
  - csharp
  - vb
  name: Keys
  nameWithType: IHttpCollection.Keys
  fullName: Serious.Abbot.Scripting.IHttpCollection.Keys
  type: Property
  source:
    remote:
      path: src/Abbot.Scripting.Interfaces/Http/IHttpCollection.cs
      branch: docs
      repo: https://github.com/aseriousbiz/abbot.git
    id: Keys
    path: ../../src/Abbot.Scripting.Interfaces/Http/IHttpCollection.cs
    startLine: 55
  assemblies:
  - Abbot.Scripting.Interfaces
  namespace: Serious.Abbot.Scripting
  summary: "\nGets an <see cref=\"!:ICollection&lt;T>\"></see> containing the keys of the\n<xref href=\"Serious.Abbot.Scripting.IHttpCollection\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: ICollection<string> Keys { get; }
    parameters: []
    return:
      type: ICollection{System.String}
      description: "\nAn <see cref=\"!:ICollection&lt;T>\"></see> containing the keys of the object\nthat implements <xref href=\"Serious.Abbot.Scripting.IHttpCollection\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    content.vb: ReadOnly Property Keys As ICollection(Of String)
  overload: Serious.Abbot.Scripting.IHttpCollection.Keys*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Serious.Abbot.Scripting.IHttpCollection.Values
  commentId: P:Serious.Abbot.Scripting.IHttpCollection.Values
  id: Values
  parent: Serious.Abbot.Scripting.IHttpCollection
  langs:
  - csharp
  - vb
  name: Values
  nameWithType: IHttpCollection.Values
  fullName: Serious.Abbot.Scripting.IHttpCollection.Values
  type: Property
  source:
    remote:
      path: src/Abbot.Scripting.Interfaces/Http/IHttpCollection.cs
      branch: docs
      repo: https://github.com/aseriousbiz/abbot.git
    id: Values
    path: ../../src/Abbot.Scripting.Interfaces/Http/IHttpCollection.cs
    startLine: 65
  assemblies:
  - Abbot.Scripting.Interfaces
  namespace: Serious.Abbot.Scripting
  summary: "\nGets an <see cref=\"!:ICollection&lt;T>\"></see> containing the values of the\n<xref href=\"Serious.Abbot.Scripting.IHttpCollection\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: ICollection<StringValues> Values { get; }
    parameters: []
    return:
      type: ICollection{Serious.Abbot.Scripting.StringValues}
      description: "\nAn <see cref=\"!:ICollection&lt;T>\"></see> containing the values of the object\nthat implements <xref href=\"Serious.Abbot.Scripting.IHttpCollection\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    content.vb: ReadOnly Property Values As ICollection(Of StringValues)
  overload: Serious.Abbot.Scripting.IHttpCollection.Values*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
references:
- uid: Serious.Abbot.Scripting
  commentId: N:Serious.Abbot.Scripting
  name: Serious.Abbot.Scripting
  nameWithType: Serious.Abbot.Scripting
  fullName: Serious.Abbot.Scripting
- uid: Serious.Abbot.Scripting.IHttpCollection
  commentId: T:Serious.Abbot.Scripting.IHttpCollection
  parent: Serious.Abbot.Scripting
  name: IHttpCollection
  nameWithType: IHttpCollection
  fullName: Serious.Abbot.Scripting.IHttpCollection
- uid: Serious.Abbot.Scripting.IHttpCollection.ContainsKey*
  commentId: Overload:Serious.Abbot.Scripting.IHttpCollection.ContainsKey
  name: ContainsKey
  nameWithType: IHttpCollection.ContainsKey
  fullName: Serious.Abbot.Scripting.IHttpCollection.ContainsKey
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Serious.Abbot.Scripting.IHttpCollection.TryGetValue*
  commentId: Overload:Serious.Abbot.Scripting.IHttpCollection.TryGetValue
  name: TryGetValue
  nameWithType: IHttpCollection.TryGetValue
  fullName: Serious.Abbot.Scripting.IHttpCollection.TryGetValue
- uid: Serious.Abbot.Scripting.StringValues
  commentId: T:Serious.Abbot.Scripting.StringValues
  parent: Serious.Abbot.Scripting
  name: StringValues
  nameWithType: StringValues
  fullName: Serious.Abbot.Scripting.StringValues
- uid: Serious.Abbot.Scripting.IHttpCollection.Keys*
  commentId: Overload:Serious.Abbot.Scripting.IHttpCollection.Keys
  name: Keys
  nameWithType: IHttpCollection.Keys
  fullName: Serious.Abbot.Scripting.IHttpCollection.Keys
- uid: ICollection{System.String}
  commentId: '!:ICollection{System.String}'
  definition: ICollection`1
  name: ICollection<String>
  nameWithType: ICollection<String>
  fullName: ICollection<System.String>
  nameWithType.vb: ICollection(Of String)
  fullName.vb: ICollection(Of System.String)
  name.vb: ICollection(Of String)
  spec.csharp:
  - uid: ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: ICollection`1
  isExternal: true
  name: ICollection<>
  nameWithType: ICollection<>
  fullName: ICollection<>
  nameWithType.vb: ICollection(Of )
  fullName.vb: ICollection(Of )
  name.vb: ICollection(Of )
  spec.csharp:
  - uid: ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Serious.Abbot.Scripting.IHttpCollection.Values*
  commentId: Overload:Serious.Abbot.Scripting.IHttpCollection.Values
  name: Values
  nameWithType: IHttpCollection.Values
  fullName: Serious.Abbot.Scripting.IHttpCollection.Values
- uid: ICollection{Serious.Abbot.Scripting.StringValues}
  commentId: '!:ICollection{Serious.Abbot.Scripting.StringValues}'
  definition: ICollection`1
  name: ICollection<StringValues>
  nameWithType: ICollection<StringValues>
  fullName: ICollection<Serious.Abbot.Scripting.StringValues>
  nameWithType.vb: ICollection(Of StringValues)
  fullName.vb: ICollection(Of Serious.Abbot.Scripting.StringValues)
  name.vb: ICollection(Of StringValues)
  spec.csharp:
  - uid: ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Serious.Abbot.Scripting.StringValues
    name: StringValues
    nameWithType: StringValues
    fullName: Serious.Abbot.Scripting.StringValues
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Serious.Abbot.Scripting.StringValues
    name: StringValues
    nameWithType: StringValues
    fullName: Serious.Abbot.Scripting.StringValues
  - name: )
    nameWithType: )
    fullName: )
