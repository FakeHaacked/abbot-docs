### YamlMime:ManagedReference
items:
- uid: Serious.Abbot.Scripting.ILocation
  commentId: T:Serious.Abbot.Scripting.ILocation
  id: ILocation
  parent: Serious.Abbot.Scripting
  children:
  - Serious.Abbot.Scripting.ILocation.Coordinate
  - Serious.Abbot.Scripting.ILocation.FormattedAddress
  langs:
  - csharp
  - vb
  name: ILocation
  nameWithType: ILocation
  fullName: Serious.Abbot.Scripting.ILocation
  type: Interface
  source:
    remote:
      path: src/Abbot.Scripting.Interfaces/Utilities/ILocation.cs
      branch: docs
      repo: https://github.com/aseriousbiz/abbot.git
    id: ILocation
    path: ../../src/Abbot.Scripting.Interfaces/Utilities/ILocation.cs
    startLine: 5
  assemblies:
  - Abbot.Scripting.Interfaces
  namespace: Serious.Abbot.Scripting
  summary: "\nA geo-coded location.\n"
  example: []
  syntax:
    content: public interface ILocation
    content.vb: Public Interface ILocation
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Serious.Abbot.Scripting.ILocation.Coordinate
  commentId: P:Serious.Abbot.Scripting.ILocation.Coordinate
  id: Coordinate
  parent: Serious.Abbot.Scripting.ILocation
  langs:
  - csharp
  - vb
  name: Coordinate
  nameWithType: ILocation.Coordinate
  fullName: Serious.Abbot.Scripting.ILocation.Coordinate
  type: Property
  source:
    remote:
      path: src/Abbot.Scripting.Interfaces/Utilities/ILocation.cs
      branch: docs
      repo: https://github.com/aseriousbiz/abbot.git
    id: Coordinate
    path: ../../src/Abbot.Scripting.Interfaces/Utilities/ILocation.cs
    startLine: 10
  assemblies:
  - Abbot.Scripting.Interfaces
  namespace: Serious.Abbot.Scripting
  summary: "\nThe coordinates of the location.\n"
  example: []
  syntax:
    content: ICoordinate Coordinate { get; }
    parameters: []
    return:
      type: Serious.Abbot.Scripting.ICoordinate
    content.vb: ReadOnly Property Coordinate As ICoordinate
  overload: Serious.Abbot.Scripting.ILocation.Coordinate*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Serious.Abbot.Scripting.ILocation.FormattedAddress
  commentId: P:Serious.Abbot.Scripting.ILocation.FormattedAddress
  id: FormattedAddress
  parent: Serious.Abbot.Scripting.ILocation
  langs:
  - csharp
  - vb
  name: FormattedAddress
  nameWithType: ILocation.FormattedAddress
  fullName: Serious.Abbot.Scripting.ILocation.FormattedAddress
  type: Property
  source:
    remote:
      path: src/Abbot.Scripting.Interfaces/Utilities/ILocation.cs
      branch: docs
      repo: https://github.com/aseriousbiz/abbot.git
    id: FormattedAddress
    path: ../../src/Abbot.Scripting.Interfaces/Utilities/ILocation.cs
    startLine: 15
  assemblies:
  - Abbot.Scripting.Interfaces
  namespace: Serious.Abbot.Scripting
  summary: "\nThe formatted address for the location.\n"
  example: []
  syntax:
    content: string? FormattedAddress { get; }
    parameters: []
    return:
      type: System.Nullable{System.String}
    content.vb: ReadOnly Property FormattedAddress As String?
  overload: Serious.Abbot.Scripting.ILocation.FormattedAddress*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
references:
- uid: Serious.Abbot.Scripting
  commentId: N:Serious.Abbot.Scripting
  name: Serious.Abbot.Scripting
  nameWithType: Serious.Abbot.Scripting
  fullName: Serious.Abbot.Scripting
- uid: Serious.Abbot.Scripting.ILocation.Coordinate*
  commentId: Overload:Serious.Abbot.Scripting.ILocation.Coordinate
  name: Coordinate
  nameWithType: ILocation.Coordinate
  fullName: Serious.Abbot.Scripting.ILocation.Coordinate
- uid: Serious.Abbot.Scripting.ICoordinate
  commentId: T:Serious.Abbot.Scripting.ICoordinate
  parent: Serious.Abbot.Scripting
  name: ICoordinate
  nameWithType: ICoordinate
  fullName: Serious.Abbot.Scripting.ICoordinate
- uid: Serious.Abbot.Scripting.ILocation.FormattedAddress*
  commentId: Overload:Serious.Abbot.Scripting.ILocation.FormattedAddress
  name: FormattedAddress
  nameWithType: ILocation.FormattedAddress
  fullName: Serious.Abbot.Scripting.ILocation.FormattedAddress
- uid: System.Nullable{System.String}
  commentId: '!:System.Nullable{System.String}'
  definition: System.Nullable`1
  name: Nullable<String>
  nameWithType: Nullable<String>
  fullName: System.Nullable<System.String>
  nameWithType.vb: Nullable(Of String)
  fullName.vb: System.Nullable(Of System.String)
  name.vb: Nullable(Of String)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  isExternal: true
  name: Nullable<>
  nameWithType: Nullable<>
  fullName: System.Nullable<>
  nameWithType.vb: Nullable(Of )
  fullName.vb: System.Nullable(Of )
  name.vb: Nullable(Of )
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
