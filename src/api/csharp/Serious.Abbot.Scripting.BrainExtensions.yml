### YamlMime:ManagedReference
items:
- uid: Serious.Abbot.Scripting.BrainExtensions
  commentId: T:Serious.Abbot.Scripting.BrainExtensions
  id: BrainExtensions
  parent: Serious.Abbot.Scripting
  children:
  - Serious.Abbot.Scripting.BrainExtensions.AddToHashSetAsync``1(Serious.Abbot.Scripting.IBrain,System.String,``0)
  - Serious.Abbot.Scripting.BrainExtensions.AddToListAsync``1(Serious.Abbot.Scripting.IBrain,System.String,``0)
  - Serious.Abbot.Scripting.BrainExtensions.GetHashSetAsync``1(Serious.Abbot.Scripting.IBrain,System.String)
  - Serious.Abbot.Scripting.BrainExtensions.GetListAsync``1(Serious.Abbot.Scripting.IBrain,System.String)
  - Serious.Abbot.Scripting.BrainExtensions.RemoveAtFromListAsync``1(Serious.Abbot.Scripting.IBrain,System.String,System.Int32)
  - Serious.Abbot.Scripting.BrainExtensions.RemoveFromHashSetAsync``1(Serious.Abbot.Scripting.IBrain,System.String,``0)
  - Serious.Abbot.Scripting.BrainExtensions.RemoveFromListAsync``1(Serious.Abbot.Scripting.IBrain,System.String,``0)
  langs:
  - csharp
  - vb
  name: BrainExtensions
  nameWithType: BrainExtensions
  fullName: Serious.Abbot.Scripting.BrainExtensions
  type: Class
  source:
    remote:
      path: src/Abbot.Scripting.Interfaces/Extensions/BrainExtensions.cs
      branch: docs
      repo: https://github.com/aseriousbiz/abbot.git
    id: BrainExtensions
    path: ../../abbot/src/Abbot.Scripting.Interfaces/Extensions/BrainExtensions.cs
    startLine: 8
  assemblies:
  - Abbot.Scripting.Interfaces
  namespace: Serious.Abbot.Scripting
  summary: "\nUseful methods for working with Abbot&apos;s brain.\n"
  example: []
  syntax:
    content: 'public static class BrainExtensions : object'
    content.vb: >-
      Public Module BrainExtensions

          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Serious.Abbot.Scripting.BrainExtensions.AddToListAsync``1(Serious.Abbot.Scripting.IBrain,System.String,``0)
  commentId: M:Serious.Abbot.Scripting.BrainExtensions.AddToListAsync``1(Serious.Abbot.Scripting.IBrain,System.String,``0)
  id: AddToListAsync``1(Serious.Abbot.Scripting.IBrain,System.String,``0)
  isExtensionMethod: true
  parent: Serious.Abbot.Scripting.BrainExtensions
  langs:
  - csharp
  - vb
  name: AddToListAsync<T>(IBrain, String, T)
  nameWithType: BrainExtensions.AddToListAsync<T>(IBrain, String, T)
  fullName: Serious.Abbot.Scripting.BrainExtensions.AddToListAsync<T>(Serious.Abbot.Scripting.IBrain, System.String, T)
  type: Method
  source:
    remote:
      path: src/Abbot.Scripting.Interfaces/Extensions/BrainExtensions.cs
      branch: docs
      repo: https://github.com/aseriousbiz/abbot.git
    id: AddToListAsync
    path: ../../abbot/src/Abbot.Scripting.Interfaces/Extensions/BrainExtensions.cs
    startLine: 19
  assemblies:
  - Abbot.Scripting.Interfaces
  namespace: Serious.Abbot.Scripting
  summary: "\nAdds the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">item</code> to a <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1?view=net-5.0\">List{T}</a> stored in the brain. Behind the\nscenes this retrieves the list stored for the key. If there is none, it creates one. Then adds the item to\nthe list, and then writes the list back to the brain.\n"
  example: []
  syntax:
    content: public static Task<List<T>> AddToListAsync<T>(this IBrain brain, string key, T item)
    parameters:
    - id: brain
      type: Serious.Abbot.Scripting.IBrain
      description: The brain.
    - id: key
      type: System.String
      description: The key of the list.
    - id: item
      type: '{T}'
      description: The item to add to the list.
    typeParameters:
    - id: T
    return:
      type: Task{List{{T}}}
      description: Returns the <a href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1?view=net-5.0">List{T}</a> associated to the <code data-dev-comment-type="paramref" class="paramref">key</code> with the added <code data-dev-comment-type="paramref" class="paramref">item</code>.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddToListAsync(Of T)(brain As IBrain, key As String, item As T) As Task(Of List(Of T))
  overload: Serious.Abbot.Scripting.BrainExtensions.AddToListAsync*
  nameWithType.vb: BrainExtensions.AddToListAsync(Of T)(IBrain, String, T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Serious.Abbot.Scripting.BrainExtensions.AddToListAsync(Of T)(Serious.Abbot.Scripting.IBrain, System.String, T)
  name.vb: AddToListAsync(Of T)(IBrain, String, T)
- uid: Serious.Abbot.Scripting.BrainExtensions.AddToHashSetAsync``1(Serious.Abbot.Scripting.IBrain,System.String,``0)
  commentId: M:Serious.Abbot.Scripting.BrainExtensions.AddToHashSetAsync``1(Serious.Abbot.Scripting.IBrain,System.String,``0)
  id: AddToHashSetAsync``1(Serious.Abbot.Scripting.IBrain,System.String,``0)
  isExtensionMethod: true
  parent: Serious.Abbot.Scripting.BrainExtensions
  langs:
  - csharp
  - vb
  name: AddToHashSetAsync<T>(IBrain, String, T)
  nameWithType: BrainExtensions.AddToHashSetAsync<T>(IBrain, String, T)
  fullName: Serious.Abbot.Scripting.BrainExtensions.AddToHashSetAsync<T>(Serious.Abbot.Scripting.IBrain, System.String, T)
  type: Method
  source:
    remote:
      path: src/Abbot.Scripting.Interfaces/Extensions/BrainExtensions.cs
      branch: docs
      repo: https://github.com/aseriousbiz/abbot.git
    id: AddToHashSetAsync
    path: ../../abbot/src/Abbot.Scripting.Interfaces/Extensions/BrainExtensions.cs
    startLine: 39
  assemblies:
  - Abbot.Scripting.Interfaces
  namespace: Serious.Abbot.Scripting
  summary: "\nAdds the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">item</code> to a <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.hashset-1?view=net-5.0\">HashSet{T}</a> stored in the brain associated\nwith the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">key</code>.\n"
  remarks: "\nThis retrieves the set stored for the key. If there is none, it creates one. Then adds the item to\nthe set, and then writes the set back to the brain.\n"
  example: []
  syntax:
    content: public static Task<bool> AddToHashSetAsync<T>(this IBrain brain, string key, T item)
    parameters:
    - id: brain
      type: Serious.Abbot.Scripting.IBrain
      description: The brain.
    - id: key
      type: System.String
      description: The key of the list.
    - id: item
      type: '{T}'
      description: The item to add to the list.
    typeParameters:
    - id: T
    return:
      type: Task{System.Boolean}
      description: <code>true</code> if the element is added to the <a href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.hashset-1?view=net-5.0">HashSet{T}</a>; <code>false</code> if the element is already present.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AddToHashSetAsync(Of T)(brain As IBrain, key As String, item As T) As Task(Of Boolean)
  overload: Serious.Abbot.Scripting.BrainExtensions.AddToHashSetAsync*
  nameWithType.vb: BrainExtensions.AddToHashSetAsync(Of T)(IBrain, String, T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Serious.Abbot.Scripting.BrainExtensions.AddToHashSetAsync(Of T)(Serious.Abbot.Scripting.IBrain, System.String, T)
  name.vb: AddToHashSetAsync(Of T)(IBrain, String, T)
- uid: Serious.Abbot.Scripting.BrainExtensions.RemoveFromListAsync``1(Serious.Abbot.Scripting.IBrain,System.String,``0)
  commentId: M:Serious.Abbot.Scripting.BrainExtensions.RemoveFromListAsync``1(Serious.Abbot.Scripting.IBrain,System.String,``0)
  id: RemoveFromListAsync``1(Serious.Abbot.Scripting.IBrain,System.String,``0)
  isExtensionMethod: true
  parent: Serious.Abbot.Scripting.BrainExtensions
  langs:
  - csharp
  - vb
  name: RemoveFromListAsync<T>(IBrain, String, T)
  nameWithType: BrainExtensions.RemoveFromListAsync<T>(IBrain, String, T)
  fullName: Serious.Abbot.Scripting.BrainExtensions.RemoveFromListAsync<T>(Serious.Abbot.Scripting.IBrain, System.String, T)
  type: Method
  source:
    remote:
      path: src/Abbot.Scripting.Interfaces/Extensions/BrainExtensions.cs
      branch: docs
      repo: https://github.com/aseriousbiz/abbot.git
    id: RemoveFromListAsync
    path: ../../abbot/src/Abbot.Scripting.Interfaces/Extensions/BrainExtensions.cs
    startLine: 63
  assemblies:
  - Abbot.Scripting.Interfaces
  namespace: Serious.Abbot.Scripting
  summary: "\nRemoves the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">item</code> from a <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1?view=net-5.0\">List{T}</a> stored in the brain associated\nwith the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">key</code>.\n"
  remarks: "\nThis retrieves the list stored for the key. If there is none, it returns immediately. Otherwise it\nremoves the specified item from the list.\n"
  example: []
  syntax:
    content: public static Task<bool> RemoveFromListAsync<T>(this IBrain brain, string key, T item)
    parameters:
    - id: brain
      type: Serious.Abbot.Scripting.IBrain
      description: The brain.
    - id: key
      type: System.String
      description: The key of the list.
    - id: item
      type: '{T}'
      description: The item to add to the list.
    typeParameters:
    - id: T
    return:
      type: Task{System.Boolean}
      description: <code>true</code> if item is successfully removed; otherwise, <code>false</code>. This method also returns <code>false</code> if item was not found in the List.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function RemoveFromListAsync(Of T)(brain As IBrain, key As String, item As T) As Task(Of Boolean)
  overload: Serious.Abbot.Scripting.BrainExtensions.RemoveFromListAsync*
  nameWithType.vb: BrainExtensions.RemoveFromListAsync(Of T)(IBrain, String, T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Serious.Abbot.Scripting.BrainExtensions.RemoveFromListAsync(Of T)(Serious.Abbot.Scripting.IBrain, System.String, T)
  name.vb: RemoveFromListAsync(Of T)(IBrain, String, T)
- uid: Serious.Abbot.Scripting.BrainExtensions.RemoveAtFromListAsync``1(Serious.Abbot.Scripting.IBrain,System.String,System.Int32)
  commentId: M:Serious.Abbot.Scripting.BrainExtensions.RemoveAtFromListAsync``1(Serious.Abbot.Scripting.IBrain,System.String,System.Int32)
  id: RemoveAtFromListAsync``1(Serious.Abbot.Scripting.IBrain,System.String,System.Int32)
  isExtensionMethod: true
  parent: Serious.Abbot.Scripting.BrainExtensions
  langs:
  - csharp
  - vb
  name: RemoveAtFromListAsync<T>(IBrain, String, Int32)
  nameWithType: BrainExtensions.RemoveAtFromListAsync<T>(IBrain, String, Int32)
  fullName: Serious.Abbot.Scripting.BrainExtensions.RemoveAtFromListAsync<T>(Serious.Abbot.Scripting.IBrain, System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/Abbot.Scripting.Interfaces/Extensions/BrainExtensions.cs
      branch: docs
      repo: https://github.com/aseriousbiz/abbot.git
    id: RemoveAtFromListAsync
    path: ../../abbot/src/Abbot.Scripting.Interfaces/Extensions/BrainExtensions.cs
    startLine: 91
  assemblies:
  - Abbot.Scripting.Interfaces
  namespace: Serious.Abbot.Scripting
  summary: "\nRemoves an item by <code data-dev-comment-type=\"paramref\" class=\"paramref\">index</code> from a <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1?view=net-5.0\">List{T}</a> stored in the brain associated\nwith the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">key</code>.\n"
  remarks: "\nThis retrieves the list stored for the key. If there is none, it returns immediately. Otherwise it\nremoves the specified item from the list.\n"
  example: []
  syntax:
    content: public static Task<bool> RemoveAtFromListAsync<T>(this IBrain brain, string key, int index)
    parameters:
    - id: brain
      type: Serious.Abbot.Scripting.IBrain
      description: The brain.
    - id: key
      type: System.String
      description: The key of the list.
    - id: index
      type: System.Int32
      description: The item to add to the list.
    typeParameters:
    - id: T
    return:
      type: Task{System.Boolean}
      description: <code>true</code> if item is successfully removed; otherwise, <code>false</code>. This method also returns <code>false</code> if <code data-dev-comment-type="paramref" class="paramref">index</code> is out of range.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function RemoveAtFromListAsync(Of T)(brain As IBrain, key As String, index As Integer) As Task(Of Boolean)
  overload: Serious.Abbot.Scripting.BrainExtensions.RemoveAtFromListAsync*
  nameWithType.vb: BrainExtensions.RemoveAtFromListAsync(Of T)(IBrain, String, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Serious.Abbot.Scripting.BrainExtensions.RemoveAtFromListAsync(Of T)(Serious.Abbot.Scripting.IBrain, System.String, System.Int32)
  name.vb: RemoveAtFromListAsync(Of T)(IBrain, String, Int32)
- uid: Serious.Abbot.Scripting.BrainExtensions.RemoveFromHashSetAsync``1(Serious.Abbot.Scripting.IBrain,System.String,``0)
  commentId: M:Serious.Abbot.Scripting.BrainExtensions.RemoveFromHashSetAsync``1(Serious.Abbot.Scripting.IBrain,System.String,``0)
  id: RemoveFromHashSetAsync``1(Serious.Abbot.Scripting.IBrain,System.String,``0)
  isExtensionMethod: true
  parent: Serious.Abbot.Scripting.BrainExtensions
  langs:
  - csharp
  - vb
  name: RemoveFromHashSetAsync<T>(IBrain, String, T)
  nameWithType: BrainExtensions.RemoveFromHashSetAsync<T>(IBrain, String, T)
  fullName: Serious.Abbot.Scripting.BrainExtensions.RemoveFromHashSetAsync<T>(Serious.Abbot.Scripting.IBrain, System.String, T)
  type: Method
  source:
    remote:
      path: src/Abbot.Scripting.Interfaces/Extensions/BrainExtensions.cs
      branch: docs
      repo: https://github.com/aseriousbiz/abbot.git
    id: RemoveFromHashSetAsync
    path: ../../abbot/src/Abbot.Scripting.Interfaces/Extensions/BrainExtensions.cs
    startLine: 116
  assemblies:
  - Abbot.Scripting.Interfaces
  namespace: Serious.Abbot.Scripting
  summary: "\nRemoves the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">item</code> from a <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.hashset-1?view=net-5.0\">HashSet{T}</a> stored in the brain associated\nwith the specified <code data-dev-comment-type=\"paramref\" class=\"paramref\">key</code>.\n"
  remarks: "\nThis retrieves the set stored for the key. If there is none, it returns false. Then it removes the item\nfrom the set and writes the set back to the brain.\n"
  example: []
  syntax:
    content: public static Task<bool> RemoveFromHashSetAsync<T>(this IBrain brain, string key, T item)
    parameters:
    - id: brain
      type: Serious.Abbot.Scripting.IBrain
      description: The brain.
    - id: key
      type: System.String
      description: The key of the list.
    - id: item
      type: '{T}'
      description: The item to remove from the list.
    typeParameters:
    - id: T
    return:
      type: Task{System.Boolean}
      description: <code>true</code> if item is successfully removed; otherwise, <code>false</code>. This method also returns <code>false</code> if the item is not in the <a href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.hashset-1?view=net-5.0">HashSet{T}</a>.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function RemoveFromHashSetAsync(Of T)(brain As IBrain, key As String, item As T) As Task(Of Boolean)
  overload: Serious.Abbot.Scripting.BrainExtensions.RemoveFromHashSetAsync*
  nameWithType.vb: BrainExtensions.RemoveFromHashSetAsync(Of T)(IBrain, String, T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Serious.Abbot.Scripting.BrainExtensions.RemoveFromHashSetAsync(Of T)(Serious.Abbot.Scripting.IBrain, System.String, T)
  name.vb: RemoveFromHashSetAsync(Of T)(IBrain, String, T)
- uid: Serious.Abbot.Scripting.BrainExtensions.GetListAsync``1(Serious.Abbot.Scripting.IBrain,System.String)
  commentId: M:Serious.Abbot.Scripting.BrainExtensions.GetListAsync``1(Serious.Abbot.Scripting.IBrain,System.String)
  id: GetListAsync``1(Serious.Abbot.Scripting.IBrain,System.String)
  isExtensionMethod: true
  parent: Serious.Abbot.Scripting.BrainExtensions
  langs:
  - csharp
  - vb
  name: GetListAsync<T>(IBrain, String)
  nameWithType: BrainExtensions.GetListAsync<T>(IBrain, String)
  fullName: Serious.Abbot.Scripting.BrainExtensions.GetListAsync<T>(Serious.Abbot.Scripting.IBrain, System.String)
  type: Method
  source:
    remote:
      path: src/Abbot.Scripting.Interfaces/Extensions/BrainExtensions.cs
      branch: docs
      repo: https://github.com/aseriousbiz/abbot.git
    id: GetListAsync
    path: ../../abbot/src/Abbot.Scripting.Interfaces/Extensions/BrainExtensions.cs
    startLine: 138
  assemblies:
  - Abbot.Scripting.Interfaces
  namespace: Serious.Abbot.Scripting
  summary: "\nGets a List{T} from the brain. If it does not exist, returns a new <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1?view=net-5.0\">List{T}</a>.\n"
  example: []
  syntax:
    content: public static Task<List<T>> GetListAsync<T>(this IBrain brain, string key)
    parameters:
    - id: brain
      type: Serious.Abbot.Scripting.IBrain
      description: The brain
    - id: key
      type: System.String
      description: The key
    typeParameters:
    - id: T
    return:
      type: Task{List{{T}}}
      description: Returns the <a href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1?view=net-5.0">List{T}</a> associated with the <code data-dev-comment-type="paramref" class="paramref">key</code>
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetListAsync(Of T)(brain As IBrain, key As String) As Task(Of List(Of T))
  overload: Serious.Abbot.Scripting.BrainExtensions.GetListAsync*
  nameWithType.vb: BrainExtensions.GetListAsync(Of T)(IBrain, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Serious.Abbot.Scripting.BrainExtensions.GetListAsync(Of T)(Serious.Abbot.Scripting.IBrain, System.String)
  name.vb: GetListAsync(Of T)(IBrain, String)
- uid: Serious.Abbot.Scripting.BrainExtensions.GetHashSetAsync``1(Serious.Abbot.Scripting.IBrain,System.String)
  commentId: M:Serious.Abbot.Scripting.BrainExtensions.GetHashSetAsync``1(Serious.Abbot.Scripting.IBrain,System.String)
  id: GetHashSetAsync``1(Serious.Abbot.Scripting.IBrain,System.String)
  isExtensionMethod: true
  parent: Serious.Abbot.Scripting.BrainExtensions
  langs:
  - csharp
  - vb
  name: GetHashSetAsync<T>(IBrain, String)
  nameWithType: BrainExtensions.GetHashSetAsync<T>(IBrain, String)
  fullName: Serious.Abbot.Scripting.BrainExtensions.GetHashSetAsync<T>(Serious.Abbot.Scripting.IBrain, System.String)
  type: Method
  source:
    remote:
      path: src/Abbot.Scripting.Interfaces/Extensions/BrainExtensions.cs
      branch: docs
      repo: https://github.com/aseriousbiz/abbot.git
    id: GetHashSetAsync
    path: ../../abbot/src/Abbot.Scripting.Interfaces/Extensions/BrainExtensions.cs
    startLine: 149
  assemblies:
  - Abbot.Scripting.Interfaces
  namespace: Serious.Abbot.Scripting
  summary: "\nGets a HashSet{T} from the brain. If it does not exist, returns a new <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.hashset-1?view=net-5.0\">HashSet{T}</a>.\n"
  example: []
  syntax:
    content: public static Task<HashSet<T>> GetHashSetAsync<T>(this IBrain brain, string key)
    parameters:
    - id: brain
      type: Serious.Abbot.Scripting.IBrain
      description: The brain
    - id: key
      type: System.String
      description: The key
    typeParameters:
    - id: T
    return:
      type: Task{HashSet{{T}}}
      description: Returns the <a href="https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.hashset-1?view=net-5.0">HashSet{T}</a> associated with the <code data-dev-comment-type="paramref" class="paramref">key</code>
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetHashSetAsync(Of T)(brain As IBrain, key As String) As Task(Of HashSet(Of T))
  overload: Serious.Abbot.Scripting.BrainExtensions.GetHashSetAsync*
  nameWithType.vb: BrainExtensions.GetHashSetAsync(Of T)(IBrain, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Serious.Abbot.Scripting.BrainExtensions.GetHashSetAsync(Of T)(Serious.Abbot.Scripting.IBrain, System.String)
  name.vb: GetHashSetAsync(Of T)(IBrain, String)
references:
- uid: Serious.Abbot.Scripting
  commentId: N:Serious.Abbot.Scripting
  name: Serious.Abbot.Scripting
  nameWithType: Serious.Abbot.Scripting
  fullName: Serious.Abbot.Scripting
- uid: System.Object
  commentId: T:System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Serious.Abbot.Scripting.BrainExtensions.AddToListAsync*
  commentId: Overload:Serious.Abbot.Scripting.BrainExtensions.AddToListAsync
  name: AddToListAsync
  nameWithType: BrainExtensions.AddToListAsync
  fullName: Serious.Abbot.Scripting.BrainExtensions.AddToListAsync
- uid: Serious.Abbot.Scripting.IBrain
  commentId: T:Serious.Abbot.Scripting.IBrain
  parent: Serious.Abbot.Scripting
  name: IBrain
  nameWithType: IBrain
  fullName: Serious.Abbot.Scripting.IBrain
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: Task{List{{T}}}
  commentId: '!:Task{List{``0}}'
  definition: Task`1
  name: Task<List<T>>
  nameWithType: Task<List<T>>
  fullName: Task<List<T>>
  nameWithType.vb: Task(Of List(Of T))
  fullName.vb: Task(Of List(Of T))
  name.vb: Task(Of List(Of T))
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Serious.Abbot.Scripting.BrainExtensions.AddToHashSetAsync*
  commentId: Overload:Serious.Abbot.Scripting.BrainExtensions.AddToHashSetAsync
  name: AddToHashSetAsync
  nameWithType: BrainExtensions.AddToHashSetAsync
  fullName: Serious.Abbot.Scripting.BrainExtensions.AddToHashSetAsync
- uid: Task{System.Boolean}
  commentId: '!:Task{System.Boolean}'
  definition: Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Serious.Abbot.Scripting.BrainExtensions.RemoveFromListAsync*
  commentId: Overload:Serious.Abbot.Scripting.BrainExtensions.RemoveFromListAsync
  name: RemoveFromListAsync
  nameWithType: BrainExtensions.RemoveFromListAsync
  fullName: Serious.Abbot.Scripting.BrainExtensions.RemoveFromListAsync
- uid: Serious.Abbot.Scripting.BrainExtensions.RemoveAtFromListAsync*
  commentId: Overload:Serious.Abbot.Scripting.BrainExtensions.RemoveAtFromListAsync
  name: RemoveAtFromListAsync
  nameWithType: BrainExtensions.RemoveAtFromListAsync
  fullName: Serious.Abbot.Scripting.BrainExtensions.RemoveAtFromListAsync
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Serious.Abbot.Scripting.BrainExtensions.RemoveFromHashSetAsync*
  commentId: Overload:Serious.Abbot.Scripting.BrainExtensions.RemoveFromHashSetAsync
  name: RemoveFromHashSetAsync
  nameWithType: BrainExtensions.RemoveFromHashSetAsync
  fullName: Serious.Abbot.Scripting.BrainExtensions.RemoveFromHashSetAsync
- uid: Serious.Abbot.Scripting.BrainExtensions.GetListAsync*
  commentId: Overload:Serious.Abbot.Scripting.BrainExtensions.GetListAsync
  name: GetListAsync
  nameWithType: BrainExtensions.GetListAsync
  fullName: Serious.Abbot.Scripting.BrainExtensions.GetListAsync
- uid: Serious.Abbot.Scripting.BrainExtensions.GetHashSetAsync*
  commentId: Overload:Serious.Abbot.Scripting.BrainExtensions.GetHashSetAsync
  name: GetHashSetAsync
  nameWithType: BrainExtensions.GetHashSetAsync
  fullName: Serious.Abbot.Scripting.BrainExtensions.GetHashSetAsync
- uid: Task{HashSet{{T}}}
  commentId: '!:Task{HashSet{``0}}'
  definition: Task`1
  name: Task<HashSet<T>>
  nameWithType: Task<HashSet<T>>
  fullName: Task<HashSet<T>>
  nameWithType.vb: Task(Of HashSet(Of T))
  fullName.vb: Task(Of HashSet(Of T))
  name.vb: Task(Of HashSet(Of T))
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: HashSet
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: HashSet`1
    name: HashSet
    nameWithType: HashSet
    fullName: HashSet
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
