### YamlMime:ManagedReference
items:
- uid: Serious.Abbot.Scripting.ISecrets
  commentId: T:Serious.Abbot.Scripting.ISecrets
  id: ISecrets
  parent: Serious.Abbot.Scripting
  children:
  - Serious.Abbot.Scripting.ISecrets.GetAsync(System.String)
  langs:
  - csharp
  - vb
  name: ISecrets
  nameWithType: ISecrets
  fullName: Serious.Abbot.Scripting.ISecrets
  type: Interface
  source:
    remote:
      path: src/Abbot.Scripting.Interfaces/ISecrets.cs
      branch: docs
      repo: https://github.com/aseriousbiz/abbot.git
    id: ISecrets
    path: ../../abbot/src/Abbot.Scripting.Interfaces/ISecrets.cs
    startLine: 7
  assemblies:
  - Abbot.Scripting.Interfaces
  namespace: Serious.Abbot.Scripting
  summary: "\nUsed to retrieve secrets stored for the skill.\n"
  example: []
  syntax:
    content: public interface ISecrets
    content.vb: Public Interface ISecrets
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Serious.Abbot.Scripting.ISecrets.GetAsync(System.String)
  commentId: M:Serious.Abbot.Scripting.ISecrets.GetAsync(System.String)
  id: GetAsync(System.String)
  parent: Serious.Abbot.Scripting.ISecrets
  langs:
  - csharp
  - vb
  name: GetAsync(String)
  nameWithType: ISecrets.GetAsync(String)
  fullName: Serious.Abbot.Scripting.ISecrets.GetAsync(System.String)
  type: Method
  source:
    remote:
      path: src/Abbot.Scripting.Interfaces/ISecrets.cs
      branch: docs
      repo: https://github.com/aseriousbiz/abbot.git
    id: GetAsync
    path: ../../abbot/src/Abbot.Scripting.Interfaces/ISecrets.cs
    startLine: 14
  assemblies:
  - Abbot.Scripting.Interfaces
  namespace: Serious.Abbot.Scripting
  summary: "\nRetrieves a stored secret for the current skill using the <code data-dev-comment-type=\"paramref\" class=\"paramref\">name</code>.\n"
  example: []
  syntax:
    content: Task<string> GetAsync(string name)
    parameters:
    - id: name
      type: System.String
      description: The key.
    return:
      type: Task{System.String}
      description: A task with the value of the secret.
    content.vb: Function GetAsync(name As String) As Task(Of String)
  overload: Serious.Abbot.Scripting.ISecrets.GetAsync*
references:
- uid: Serious.Abbot.Scripting
  commentId: N:Serious.Abbot.Scripting
  name: Serious.Abbot.Scripting
  nameWithType: Serious.Abbot.Scripting
  fullName: Serious.Abbot.Scripting
- uid: Serious.Abbot.Scripting.ISecrets.GetAsync*
  commentId: Overload:Serious.Abbot.Scripting.ISecrets.GetAsync
  name: GetAsync
  nameWithType: ISecrets.GetAsync
  fullName: Serious.Abbot.Scripting.ISecrets.GetAsync
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Task{System.String}
  commentId: '!:Task{System.String}'
  definition: Task`1
  name: Task<String>
  nameWithType: Task<String>
  fullName: Task<System.String>
  nameWithType.vb: Task(Of String)
  fullName.vb: Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
