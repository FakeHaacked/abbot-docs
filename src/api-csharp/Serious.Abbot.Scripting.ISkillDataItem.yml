### YamlMime:ManagedReference
items:
- uid: Serious.Abbot.Scripting.ISkillDataItem
  commentId: T:Serious.Abbot.Scripting.ISkillDataItem
  id: ISkillDataItem
  parent: Serious.Abbot.Scripting
  children:
  - Serious.Abbot.Scripting.ISkillDataItem.GetValueAs``1(``0)
  - Serious.Abbot.Scripting.ISkillDataItem.Key
  - Serious.Abbot.Scripting.ISkillDataItem.Value
  langs:
  - csharp
  - vb
  name: ISkillDataItem
  nameWithType: ISkillDataItem
  fullName: Serious.Abbot.Scripting.ISkillDataItem
  type: Interface
  source:
    remote:
      path: src/Abbot.Scripting.Interfaces/ISkillDataItem.cs
      branch: docs
      repo: https://github.com/aseriousbiz/abbot.git
    id: ISkillDataItem
    path: ../../abbot/src/Abbot.Scripting.Interfaces/ISkillDataItem.cs
    startLine: 7
  assemblies:
  - Abbot.Scripting.Interfaces
  namespace: Serious.Abbot.Scripting
  summary: "\nRepresents a piece of data stored for a skill.\n"
  example: []
  syntax:
    content: public interface ISkillDataItem
    content.vb: Public Interface ISkillDataItem
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Serious.Abbot.Scripting.ISkillDataItem.Key
  commentId: P:Serious.Abbot.Scripting.ISkillDataItem.Key
  id: Key
  parent: Serious.Abbot.Scripting.ISkillDataItem
  langs:
  - csharp
  - vb
  name: Key
  nameWithType: ISkillDataItem.Key
  fullName: Serious.Abbot.Scripting.ISkillDataItem.Key
  type: Property
  source:
    remote:
      path: src/Abbot.Scripting.Interfaces/ISkillDataItem.cs
      branch: docs
      repo: https://github.com/aseriousbiz/abbot.git
    id: Key
    path: ../../abbot/src/Abbot.Scripting.Interfaces/ISkillDataItem.cs
    startLine: 12
  assemblies:
  - Abbot.Scripting.Interfaces
  namespace: Serious.Abbot.Scripting
  summary: "\nThe key\n"
  example: []
  syntax:
    content: string Key { get; }
    parameters: []
    return:
      type: System.String
    content.vb: ReadOnly Property Key As String
  overload: Serious.Abbot.Scripting.ISkillDataItem.Key*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Serious.Abbot.Scripting.ISkillDataItem.Value
  commentId: P:Serious.Abbot.Scripting.ISkillDataItem.Value
  id: Value
  parent: Serious.Abbot.Scripting.ISkillDataItem
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: ISkillDataItem.Value
  fullName: Serious.Abbot.Scripting.ISkillDataItem.Value
  type: Property
  source:
    remote:
      path: src/Abbot.Scripting.Interfaces/ISkillDataItem.cs
      branch: docs
      repo: https://github.com/aseriousbiz/abbot.git
    id: Value
    path: ../../abbot/src/Abbot.Scripting.Interfaces/ISkillDataItem.cs
    startLine: 17
  assemblies:
  - Abbot.Scripting.Interfaces
  namespace: Serious.Abbot.Scripting
  summary: "\nA dynamic value. Could be a string or an object.\n"
  example: []
  syntax:
    content: dynamic Value { get; }
    parameters: []
    return:
      type: System.Object
    content.vb: ReadOnly Property Value As Object
  overload: Serious.Abbot.Scripting.ISkillDataItem.Value*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Serious.Abbot.Scripting.ISkillDataItem.GetValueAs``1(``0)
  commentId: M:Serious.Abbot.Scripting.ISkillDataItem.GetValueAs``1(``0)
  id: GetValueAs``1(``0)
  parent: Serious.Abbot.Scripting.ISkillDataItem
  langs:
  - csharp
  - vb
  name: GetValueAs<T>(T)
  nameWithType: ISkillDataItem.GetValueAs<T>(T)
  fullName: Serious.Abbot.Scripting.ISkillDataItem.GetValueAs<T>(T)
  type: Method
  source:
    remote:
      path: src/Abbot.Scripting.Interfaces/ISkillDataItem.cs
      branch: docs
      repo: https://github.com/aseriousbiz/abbot.git
    id: GetValueAs
    path: ../../abbot/src/Abbot.Scripting.Interfaces/ISkillDataItem.cs
    startLine: 25
  assemblies:
  - Abbot.Scripting.Interfaces
  namespace: Serious.Abbot.Scripting
  summary: "\nRetrieves the value as type T.\n"
  example: []
  syntax:
    content: T GetValueAs<T>(T defaultValue = null)
    parameters:
    - id: defaultValue
      type: '{T}'
      description: The value to return if value does not exist or cannot be cast.
    typeParameters:
    - id: T
      description: The type to cast the value as.
    return:
      type: '{T}'
    content.vb: Function GetValueAs(Of T)(defaultValue As T = Nothing) As T
  overload: Serious.Abbot.Scripting.ISkillDataItem.GetValueAs*
  nameWithType.vb: ISkillDataItem.GetValueAs(Of T)(T)
  fullName.vb: Serious.Abbot.Scripting.ISkillDataItem.GetValueAs(Of T)(T)
  name.vb: GetValueAs(Of T)(T)
references:
- uid: Serious.Abbot.Scripting
  commentId: N:Serious.Abbot.Scripting
  name: Serious.Abbot.Scripting
  nameWithType: Serious.Abbot.Scripting
  fullName: Serious.Abbot.Scripting
- uid: Serious.Abbot.Scripting.ISkillDataItem.Key*
  commentId: Overload:Serious.Abbot.Scripting.ISkillDataItem.Key
  name: Key
  nameWithType: ISkillDataItem.Key
  fullName: Serious.Abbot.Scripting.ISkillDataItem.Key
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Serious.Abbot.Scripting.ISkillDataItem.Value*
  commentId: Overload:Serious.Abbot.Scripting.ISkillDataItem.Value
  name: Value
  nameWithType: ISkillDataItem.Value
  fullName: Serious.Abbot.Scripting.ISkillDataItem.Value
- uid: System.Object
  commentId: T:System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Serious.Abbot.Scripting.ISkillDataItem.GetValueAs*
  commentId: Overload:Serious.Abbot.Scripting.ISkillDataItem.GetValueAs
  name: GetValueAs
  nameWithType: ISkillDataItem.GetValueAs
  fullName: Serious.Abbot.Scripting.ISkillDataItem.GetValueAs
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
