### YamlMime:ManagedReference
items:
- uid: Serious.Abbot.Scripting.ArgumentExtensions
  commentId: T:Serious.Abbot.Scripting.ArgumentExtensions
  id: ArgumentExtensions
  parent: Serious.Abbot.Scripting
  children:
  - Serious.Abbot.Scripting.ArgumentExtensions.ToInt32(Serious.Abbot.Scripting.IArgument)
  - Serious.Abbot.Scripting.ArgumentExtensions.ToLocalTime(Serious.Abbot.Scripting.IArgument)
  - Serious.Abbot.Scripting.ArgumentExtensions.ToTimeZone(LocalTime,DateTimeZone,DateTimeZone)
  langs:
  - csharp
  - vb
  name: ArgumentExtensions
  nameWithType: ArgumentExtensions
  fullName: Serious.Abbot.Scripting.ArgumentExtensions
  type: Class
  source:
    remote:
      path: src/Abbot.Scripting.Interfaces/Extensions/ArgumentExtensions.cs
      branch: docs
      repo: https://github.com/aseriousbiz/abbot.git
    id: ArgumentExtensions
    path: ../../abbot/src/Abbot.Scripting.Interfaces/Extensions/ArgumentExtensions.cs
    startLine: 8
  assemblies:
  - Abbot.Scripting.Interfaces
  namespace: Serious.Abbot.Scripting
  summary: "\nExtensions to <xref href=\"Serious.Abbot.Scripting.IArgument\" data-throw-if-not-resolved=\"false\"></xref> to make it easier to work with arguments.\n"
  example: []
  syntax:
    content: 'public static class ArgumentExtensions : object'
    content.vb: >-
      Public Module ArgumentExtensions

          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Serious.Abbot.Scripting.ArgumentExtensions.ToLocalTime(Serious.Abbot.Scripting.IArgument)
  commentId: M:Serious.Abbot.Scripting.ArgumentExtensions.ToLocalTime(Serious.Abbot.Scripting.IArgument)
  id: ToLocalTime(Serious.Abbot.Scripting.IArgument)
  isExtensionMethod: true
  parent: Serious.Abbot.Scripting.ArgumentExtensions
  langs:
  - csharp
  - vb
  name: ToLocalTime(IArgument)
  nameWithType: ArgumentExtensions.ToLocalTime(IArgument)
  fullName: Serious.Abbot.Scripting.ArgumentExtensions.ToLocalTime(Serious.Abbot.Scripting.IArgument)
  type: Method
  source:
    remote:
      path: src/Abbot.Scripting.Interfaces/Extensions/ArgumentExtensions.cs
      branch: docs
      repo: https://github.com/aseriousbiz/abbot.git
    id: ToLocalTime
    path: ../../abbot/src/Abbot.Scripting.Interfaces/Extensions/ArgumentExtensions.cs
    startLine: 19
  assemblies:
  - Abbot.Scripting.Interfaces
  namespace: Serious.Abbot.Scripting
  summary: "\nParses the argument value and returns it as a <a href=\"https://nodatime.org/2.2.x/api/NodaTime.LocalTime.html\">LocalTime</a> if it matches the format, otherwise\nreturns null.\n"
  example: []
  syntax:
    content: public static LocalTime? ToLocalTime(this IArgument argument)
    parameters:
    - id: argument
      type: Serious.Abbot.Scripting.IArgument
      description: The argument.
    return:
      type: System.Nullable{LocalTime}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToLocalTime(argument As IArgument) As LocalTime?
  overload: Serious.Abbot.Scripting.ArgumentExtensions.ToLocalTime*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Serious.Abbot.Scripting.ArgumentExtensions.ToTimeZone(LocalTime,DateTimeZone,DateTimeZone)
  commentId: M:Serious.Abbot.Scripting.ArgumentExtensions.ToTimeZone(LocalTime,DateTimeZone,DateTimeZone)
  id: ToTimeZone(LocalTime,DateTimeZone,DateTimeZone)
  isExtensionMethod: true
  parent: Serious.Abbot.Scripting.ArgumentExtensions
  langs:
  - csharp
  - vb
  name: ToTimeZone(LocalTime, DateTimeZone, DateTimeZone)
  nameWithType: ArgumentExtensions.ToTimeZone(LocalTime, DateTimeZone, DateTimeZone)
  fullName: Serious.Abbot.Scripting.ArgumentExtensions.ToTimeZone(LocalTime, DateTimeZone, DateTimeZone)
  type: Method
  source:
    remote:
      path: src/Abbot.Scripting.Interfaces/Extensions/ArgumentExtensions.cs
      branch: docs
      repo: https://github.com/aseriousbiz/abbot.git
    id: ToTimeZone
    path: ../../abbot/src/Abbot.Scripting.Interfaces/Extensions/ArgumentExtensions.cs
    startLine: 58
  assemblies:
  - Abbot.Scripting.Interfaces
  namespace: Serious.Abbot.Scripting
  summary: "\nConverts this local time into a zoned date time for the target time zone. It assumes today as the starting\npoint. If the local time is before today, then it returns the time the next day.\n"
  example: []
  syntax:
    content: public static ZonedDateTime ToTimeZone(this LocalTime localTime, DateTimeZone source, DateTimeZone target)
    parameters:
    - id: localTime
      type: LocalTime
      description: The local time.
    - id: source
      type: DateTimeZone
      description: The source time zone the local time is assumed to be in.
    - id: target
      type: DateTimeZone
      description: The target time zone.
    return:
      type: ZonedDateTime
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToTimeZone(localTime As LocalTime, source As DateTimeZone, target As DateTimeZone) As ZonedDateTime
  overload: Serious.Abbot.Scripting.ArgumentExtensions.ToTimeZone*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Serious.Abbot.Scripting.ArgumentExtensions.ToInt32(Serious.Abbot.Scripting.IArgument)
  commentId: M:Serious.Abbot.Scripting.ArgumentExtensions.ToInt32(Serious.Abbot.Scripting.IArgument)
  id: ToInt32(Serious.Abbot.Scripting.IArgument)
  isExtensionMethod: true
  parent: Serious.Abbot.Scripting.ArgumentExtensions
  langs:
  - csharp
  - vb
  name: ToInt32(IArgument)
  nameWithType: ArgumentExtensions.ToInt32(IArgument)
  fullName: Serious.Abbot.Scripting.ArgumentExtensions.ToInt32(Serious.Abbot.Scripting.IArgument)
  type: Method
  source:
    remote:
      path: src/Abbot.Scripting.Interfaces/Extensions/ArgumentExtensions.cs
      branch: docs
      repo: https://github.com/aseriousbiz/abbot.git
    id: ToInt32
    path: ../../abbot/src/Abbot.Scripting.Interfaces/Extensions/ArgumentExtensions.cs
    startLine: 76
  assemblies:
  - Abbot.Scripting.Interfaces
  namespace: Serious.Abbot.Scripting
  summary: "\nParses the argument value as an Int32 and returns the value or null if it is not an integer.\n"
  example: []
  syntax:
    content: public static int? ToInt32(this IArgument argument)
    parameters:
    - id: argument
      type: Serious.Abbot.Scripting.IArgument
      description: The argument.
    return:
      type: System.Nullable{System.Int32}
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToInt32(argument As IArgument) As Integer?
  overload: Serious.Abbot.Scripting.ArgumentExtensions.ToInt32*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Serious.Abbot.Scripting.IArgument
  commentId: T:Serious.Abbot.Scripting.IArgument
  parent: Serious.Abbot.Scripting
  name: IArgument
  nameWithType: IArgument
  fullName: Serious.Abbot.Scripting.IArgument
- uid: Serious.Abbot.Scripting
  commentId: N:Serious.Abbot.Scripting
  name: Serious.Abbot.Scripting
  nameWithType: Serious.Abbot.Scripting
  fullName: Serious.Abbot.Scripting
- uid: System.Object
  commentId: T:System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Serious.Abbot.Scripting.ArgumentExtensions.ToLocalTime*
  commentId: Overload:Serious.Abbot.Scripting.ArgumentExtensions.ToLocalTime
  name: ToLocalTime
  nameWithType: ArgumentExtensions.ToLocalTime
  fullName: Serious.Abbot.Scripting.ArgumentExtensions.ToLocalTime
- uid: System.Nullable{LocalTime}
  commentId: '!:System.Nullable{LocalTime}'
  definition: System.Nullable`1
  name: Nullable<LocalTime>
  nameWithType: Nullable<LocalTime>
  fullName: System.Nullable<LocalTime>
  nameWithType.vb: Nullable(Of LocalTime)
  fullName.vb: System.Nullable(Of LocalTime)
  name.vb: Nullable(Of LocalTime)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: LocalTime
    name: LocalTime
    nameWithType: LocalTime
    fullName: LocalTime
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: LocalTime
    name: LocalTime
    nameWithType: LocalTime
    fullName: LocalTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  isExternal: true
  name: Nullable<>
  nameWithType: Nullable<>
  fullName: System.Nullable<>
  nameWithType.vb: Nullable(Of )
  fullName.vb: System.Nullable(Of )
  name.vb: Nullable(Of )
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Serious.Abbot.Scripting.ArgumentExtensions.ToTimeZone*
  commentId: Overload:Serious.Abbot.Scripting.ArgumentExtensions.ToTimeZone
  name: ToTimeZone
  nameWithType: ArgumentExtensions.ToTimeZone
  fullName: Serious.Abbot.Scripting.ArgumentExtensions.ToTimeZone
- uid: LocalTime
  commentId: '!:LocalTime'
  isExternal: true
  name: LocalTime
  nameWithType: LocalTime
  fullName: LocalTime
- uid: DateTimeZone
  isExternal: true
  name: DateTimeZone
  nameWithType: DateTimeZone
  fullName: DateTimeZone
- uid: ZonedDateTime
  commentId: '!:ZonedDateTime'
  isExternal: true
  name: ZonedDateTime
  nameWithType: ZonedDateTime
  fullName: ZonedDateTime
- uid: Serious.Abbot.Scripting.ArgumentExtensions.ToInt32*
  commentId: Overload:Serious.Abbot.Scripting.ArgumentExtensions.ToInt32
  name: ToInt32
  nameWithType: ArgumentExtensions.ToInt32
  fullName: Serious.Abbot.Scripting.ArgumentExtensions.ToInt32
- uid: System.Nullable{System.Int32}
  commentId: '!:System.Nullable{System.Int32}'
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullName.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
