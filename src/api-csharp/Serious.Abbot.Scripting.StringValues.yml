### YamlMime:ManagedReference
items:
- uid: Serious.Abbot.Scripting.StringValues
  commentId: T:Serious.Abbot.Scripting.StringValues
  id: StringValues
  parent: Serious.Abbot.Scripting
  children:
  - Serious.Abbot.Scripting.StringValues.#ctor(System.String)
  - Serious.Abbot.Scripting.StringValues.#ctor(System.String[])
  - Serious.Abbot.Scripting.StringValues.Concat(Serious.Abbot.Scripting.StringValues,Serious.Abbot.Scripting.StringValues)
  - Serious.Abbot.Scripting.StringValues.Concat(Serious.Abbot.Scripting.StringValues@,System.String)
  - Serious.Abbot.Scripting.StringValues.Concat(System.String,Serious.Abbot.Scripting.StringValues@)
  - Serious.Abbot.Scripting.StringValues.Count
  - Serious.Abbot.Scripting.StringValues.Empty
  - Serious.Abbot.Scripting.StringValues.Equals(Serious.Abbot.Scripting.StringValues)
  - Serious.Abbot.Scripting.StringValues.Equals(Serious.Abbot.Scripting.StringValues,Serious.Abbot.Scripting.StringValues)
  - Serious.Abbot.Scripting.StringValues.Equals(Serious.Abbot.Scripting.StringValues,System.String)
  - Serious.Abbot.Scripting.StringValues.Equals(Serious.Abbot.Scripting.StringValues,System.String[])
  - Serious.Abbot.Scripting.StringValues.Equals(System.Object)
  - Serious.Abbot.Scripting.StringValues.Equals(System.String)
  - Serious.Abbot.Scripting.StringValues.Equals(System.String,Serious.Abbot.Scripting.StringValues)
  - Serious.Abbot.Scripting.StringValues.Equals(System.String[])
  - Serious.Abbot.Scripting.StringValues.Equals(System.String[],Serious.Abbot.Scripting.StringValues)
  - Serious.Abbot.Scripting.StringValues.GetEnumerator
  - Serious.Abbot.Scripting.StringValues.GetHashCode
  - Serious.Abbot.Scripting.StringValues.IsNullOrEmpty(Serious.Abbot.Scripting.StringValues)
  - Serious.Abbot.Scripting.StringValues.Item(System.Int32)
  - Serious.Abbot.Scripting.StringValues.op_Equality(Serious.Abbot.Scripting.StringValues,Serious.Abbot.Scripting.StringValues)
  - Serious.Abbot.Scripting.StringValues.op_Equality(Serious.Abbot.Scripting.StringValues,System.Object)
  - Serious.Abbot.Scripting.StringValues.op_Equality(Serious.Abbot.Scripting.StringValues,System.String)
  - Serious.Abbot.Scripting.StringValues.op_Equality(Serious.Abbot.Scripting.StringValues,System.String[])
  - Serious.Abbot.Scripting.StringValues.op_Equality(System.Object,Serious.Abbot.Scripting.StringValues)
  - Serious.Abbot.Scripting.StringValues.op_Equality(System.String,Serious.Abbot.Scripting.StringValues)
  - Serious.Abbot.Scripting.StringValues.op_Equality(System.String[],Serious.Abbot.Scripting.StringValues)
  - Serious.Abbot.Scripting.StringValues.op_Implicit(Serious.Abbot.Scripting.StringValues)~System.String
  - Serious.Abbot.Scripting.StringValues.op_Implicit(Serious.Abbot.Scripting.StringValues)~System.String[]
  - Serious.Abbot.Scripting.StringValues.op_Implicit(System.String)~Serious.Abbot.Scripting.StringValues
  - Serious.Abbot.Scripting.StringValues.op_Implicit(System.String[])~Serious.Abbot.Scripting.StringValues
  - Serious.Abbot.Scripting.StringValues.op_Inequality(Serious.Abbot.Scripting.StringValues,Serious.Abbot.Scripting.StringValues)
  - Serious.Abbot.Scripting.StringValues.op_Inequality(Serious.Abbot.Scripting.StringValues,System.Object)
  - Serious.Abbot.Scripting.StringValues.op_Inequality(Serious.Abbot.Scripting.StringValues,System.String)
  - Serious.Abbot.Scripting.StringValues.op_Inequality(Serious.Abbot.Scripting.StringValues,System.String[])
  - Serious.Abbot.Scripting.StringValues.op_Inequality(System.Object,Serious.Abbot.Scripting.StringValues)
  - Serious.Abbot.Scripting.StringValues.op_Inequality(System.String,Serious.Abbot.Scripting.StringValues)
  - Serious.Abbot.Scripting.StringValues.op_Inequality(System.String[],Serious.Abbot.Scripting.StringValues)
  - Serious.Abbot.Scripting.StringValues.ToArray
  - Serious.Abbot.Scripting.StringValues.ToString
  langs:
  - csharp
  - vb
  name: StringValues
  nameWithType: StringValues
  fullName: Serious.Abbot.Scripting.StringValues
  type: Struct
  source:
    remote:
      path: src/Abbot.Scripting.Interfaces/Http/StringValues.cs
      branch: docs
      repo: https://github.com/aseriousbiz/abbot.git
    id: StringValues
    path: ../../abbot/src/Abbot.Scripting.Interfaces/Http/StringValues.cs
    startLine: 13
  assemblies:
  - Abbot.Scripting.Interfaces
  namespace: Serious.Abbot.Scripting
  summary: "\nRepresents zero/null, one, or many strings in an efficient way.\n"
  example: []
  syntax:
    content: 'public struct StringValues : IList<string>, IReadOnlyList<string>, IEquatable<StringValues>, IEquatable<string>, IEquatable<string[]>'
    content.vb: >-
      Public Structure StringValues

          Implements IList(Of String), IReadOnlyList(Of String), IEquatable(Of StringValues), IEquatable(Of String), IEquatable(Of String())
  implements:
  - IList{System.String}
  - IReadOnlyList{System.String}
  - IEquatable{Serious.Abbot.Scripting.StringValues}
  - IEquatable{System.String}
  - IEquatable{System.String[]}
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: Serious.Abbot.Scripting.StringValues.Empty
  commentId: F:Serious.Abbot.Scripting.StringValues.Empty
  id: Empty
  parent: Serious.Abbot.Scripting.StringValues
  langs:
  - csharp
  - vb
  name: Empty
  nameWithType: StringValues.Empty
  fullName: Serious.Abbot.Scripting.StringValues.Empty
  type: Field
  source:
    remote:
      path: src/Abbot.Scripting.Interfaces/Http/StringValues.cs
      branch: docs
      repo: https://github.com/aseriousbiz/abbot.git
    id: Empty
    path: ../../abbot/src/Abbot.Scripting.Interfaces/Http/StringValues.cs
    startLine: 21
  assemblies:
  - Abbot.Scripting.Interfaces
  namespace: Serious.Abbot.Scripting
  summary: "\nA readonly instance of the <xref href=\"Serious.Abbot.Scripting.StringValues\" data-throw-if-not-resolved=\"false\"></xref> struct whose value is an empty string array.\n"
  remarks: "\nIn application code, this field is most commonly used to safely represent a <xref href=\"Serious.Abbot.Scripting.StringValues\" data-throw-if-not-resolved=\"false\"></xref> that has null string values.\n"
  example: []
  syntax:
    content: public static readonly StringValues Empty
    return:
      type: Serious.Abbot.Scripting.StringValues
    content.vb: Public Shared ReadOnly Empty As StringValues
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Serious.Abbot.Scripting.StringValues.#ctor(System.String)
  commentId: M:Serious.Abbot.Scripting.StringValues.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: Serious.Abbot.Scripting.StringValues
  langs:
  - csharp
  - vb
  name: StringValues(String)
  nameWithType: StringValues.StringValues(String)
  fullName: Serious.Abbot.Scripting.StringValues.StringValues(System.String)
  type: Constructor
  source:
    remote:
      path: src/Abbot.Scripting.Interfaces/Http/StringValues.cs
      branch: docs
      repo: https://github.com/aseriousbiz/abbot.git
    id: .ctor
    path: ../../abbot/src/Abbot.Scripting.Interfaces/Http/StringValues.cs
    startLine: 29
  assemblies:
  - Abbot.Scripting.Interfaces
  namespace: Serious.Abbot.Scripting
  summary: "\nInitializes a new instance of the <xref href=\"Serious.Abbot.Scripting.StringValues\" data-throw-if-not-resolved=\"false\"></xref> structure using the specified string.\n"
  example: []
  syntax:
    content: public StringValues(string value)
    parameters:
    - id: value
      type: System.String
      description: A string value or <code>null</code>.
    content.vb: Public Sub New(value As String)
  overload: Serious.Abbot.Scripting.StringValues.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Serious.Abbot.Scripting.StringValues.#ctor(System.String[])
  commentId: M:Serious.Abbot.Scripting.StringValues.#ctor(System.String[])
  id: '#ctor(System.String[])'
  parent: Serious.Abbot.Scripting.StringValues
  langs:
  - csharp
  - vb
  name: StringValues(String[])
  nameWithType: StringValues.StringValues(String[])
  fullName: Serious.Abbot.Scripting.StringValues.StringValues(System.String[])
  type: Constructor
  source:
    remote:
      path: src/Abbot.Scripting.Interfaces/Http/StringValues.cs
      branch: docs
      repo: https://github.com/aseriousbiz/abbot.git
    id: .ctor
    path: ../../abbot/src/Abbot.Scripting.Interfaces/Http/StringValues.cs
    startLine: 38
  assemblies:
  - Abbot.Scripting.Interfaces
  namespace: Serious.Abbot.Scripting
  summary: "\nInitializes a new instance of the <xref href=\"Serious.Abbot.Scripting.StringValues\" data-throw-if-not-resolved=\"false\"></xref> structure using the specified array of strings.\n"
  example: []
  syntax:
    content: public StringValues(string[] values)
    parameters:
    - id: values
      type: System.String[]
      description: A string array.
    content.vb: Public Sub New(values As String())
  overload: Serious.Abbot.Scripting.StringValues.#ctor*
  nameWithType.vb: StringValues.StringValues(String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Serious.Abbot.Scripting.StringValues.StringValues(System.String())
  name.vb: StringValues(String())
- uid: Serious.Abbot.Scripting.StringValues.op_Implicit(System.String)~Serious.Abbot.Scripting.StringValues
  commentId: M:Serious.Abbot.Scripting.StringValues.op_Implicit(System.String)~Serious.Abbot.Scripting.StringValues
  id: op_Implicit(System.String)~Serious.Abbot.Scripting.StringValues
  parent: Serious.Abbot.Scripting.StringValues
  langs:
  - csharp
  - vb
  name: Implicit(String to StringValues)
  nameWithType: StringValues.Implicit(String to StringValues)
  fullName: Serious.Abbot.Scripting.StringValues.Implicit(System.String to Serious.Abbot.Scripting.StringValues)
  type: Operator
  source:
    remote:
      path: src/Abbot.Scripting.Interfaces/Http/StringValues.cs
      branch: docs
      repo: https://github.com/aseriousbiz/abbot.git
    id: op_Implicit
    path: ../../abbot/src/Abbot.Scripting.Interfaces/Http/StringValues.cs
    startLine: 48
  assemblies:
  - Abbot.Scripting.Interfaces
  namespace: Serious.Abbot.Scripting
  summary: "\nDefines an implicit conversion of a given string to a <xref href=\"Serious.Abbot.Scripting.StringValues\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static implicit operator StringValues(string value)
    parameters:
    - id: value
      type: System.String
      description: A string to implicitly convert.
    return:
      type: Serious.Abbot.Scripting.StringValues
    content.vb: Public Shared Widening Operator CType(value As String) As StringValues
  overload: Serious.Abbot.Scripting.StringValues.op_Implicit*
  nameWithType.vb: StringValues.Widening(String to StringValues)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Serious.Abbot.Scripting.StringValues.Widening(System.String to Serious.Abbot.Scripting.StringValues)
  name.vb: Widening(String to StringValues)
- uid: Serious.Abbot.Scripting.StringValues.op_Implicit(System.String[])~Serious.Abbot.Scripting.StringValues
  commentId: M:Serious.Abbot.Scripting.StringValues.op_Implicit(System.String[])~Serious.Abbot.Scripting.StringValues
  id: op_Implicit(System.String[])~Serious.Abbot.Scripting.StringValues
  parent: Serious.Abbot.Scripting.StringValues
  langs:
  - csharp
  - vb
  name: Implicit(String[] to StringValues)
  nameWithType: StringValues.Implicit(String[] to StringValues)
  fullName: Serious.Abbot.Scripting.StringValues.Implicit(System.String[] to Serious.Abbot.Scripting.StringValues)
  type: Operator
  source:
    remote:
      path: src/Abbot.Scripting.Interfaces/Http/StringValues.cs
      branch: docs
      repo: https://github.com/aseriousbiz/abbot.git
    id: op_Implicit
    path: ../../abbot/src/Abbot.Scripting.Interfaces/Http/StringValues.cs
    startLine: 59
  assemblies:
  - Abbot.Scripting.Interfaces
  namespace: Serious.Abbot.Scripting
  summary: "\nDefines an implicit conversion of a given string array to a <xref href=\"Serious.Abbot.Scripting.StringValues\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static implicit operator StringValues(string[] values)
    parameters:
    - id: values
      type: System.String[]
      description: A string array to implicitly convert.
    return:
      type: Serious.Abbot.Scripting.StringValues
    content.vb: Public Shared Widening Operator CType(values As String()) As StringValues
  overload: Serious.Abbot.Scripting.StringValues.op_Implicit*
  nameWithType.vb: StringValues.Widening(String() to StringValues)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Serious.Abbot.Scripting.StringValues.Widening(System.String() to Serious.Abbot.Scripting.StringValues)
  name.vb: Widening(String() to StringValues)
- uid: Serious.Abbot.Scripting.StringValues.op_Implicit(Serious.Abbot.Scripting.StringValues)~System.String
  commentId: M:Serious.Abbot.Scripting.StringValues.op_Implicit(Serious.Abbot.Scripting.StringValues)~System.String
  id: op_Implicit(Serious.Abbot.Scripting.StringValues)~System.String
  parent: Serious.Abbot.Scripting.StringValues
  langs:
  - csharp
  - vb
  name: Implicit(StringValues to String)
  nameWithType: StringValues.Implicit(StringValues to String)
  fullName: Serious.Abbot.Scripting.StringValues.Implicit(Serious.Abbot.Scripting.StringValues to System.String)
  type: Operator
  source:
    remote:
      path: src/Abbot.Scripting.Interfaces/Http/StringValues.cs
      branch: docs
      repo: https://github.com/aseriousbiz/abbot.git
    id: op_Implicit
    path: ../../abbot/src/Abbot.Scripting.Interfaces/Http/StringValues.cs
    startLine: 72
  assemblies:
  - Abbot.Scripting.Interfaces
  namespace: Serious.Abbot.Scripting
  summary: "\nDefines an implicit conversion of a given <xref href=\"Serious.Abbot.Scripting.StringValues\" data-throw-if-not-resolved=\"false\"></xref> to a string, with multiple values joined as a comma separated string.\n"
  remarks: "\nReturns <code>null</code> where <xref href=\"Serious.Abbot.Scripting.StringValues\" data-throw-if-not-resolved=\"false\"></xref> has been initialized from an empty string array or is <xref href=\"Serious.Abbot.Scripting.StringValues.Empty\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static implicit operator string (StringValues values)
    parameters:
    - id: values
      type: Serious.Abbot.Scripting.StringValues
      description: A <xref href="Serious.Abbot.Scripting.StringValues" data-throw-if-not-resolved="false"></xref> to implicitly convert.
    return:
      type: System.String
    content.vb: Public Shared Widening Operator CType(values As StringValues) As String
  overload: Serious.Abbot.Scripting.StringValues.op_Implicit*
  nameWithType.vb: StringValues.Widening(StringValues to String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Serious.Abbot.Scripting.StringValues.Widening(Serious.Abbot.Scripting.StringValues to System.String)
  name.vb: Widening(StringValues to String)
- uid: Serious.Abbot.Scripting.StringValues.op_Implicit(Serious.Abbot.Scripting.StringValues)~System.String[]
  commentId: M:Serious.Abbot.Scripting.StringValues.op_Implicit(Serious.Abbot.Scripting.StringValues)~System.String[]
  id: op_Implicit(Serious.Abbot.Scripting.StringValues)~System.String[]
  parent: Serious.Abbot.Scripting.StringValues
  langs:
  - csharp
  - vb
  name: Implicit(StringValues to String[])
  nameWithType: StringValues.Implicit(StringValues to String[])
  fullName: Serious.Abbot.Scripting.StringValues.Implicit(Serious.Abbot.Scripting.StringValues to System.String[])
  type: Operator
  source:
    remote:
      path: src/Abbot.Scripting.Interfaces/Http/StringValues.cs
      branch: docs
      repo: https://github.com/aseriousbiz/abbot.git
    id: op_Implicit
    path: ../../abbot/src/Abbot.Scripting.Interfaces/Http/StringValues.cs
    startLine: 82
  assemblies:
  - Abbot.Scripting.Interfaces
  namespace: Serious.Abbot.Scripting
  summary: "\nDefines an implicit conversion of a given <xref href=\"Serious.Abbot.Scripting.StringValues\" data-throw-if-not-resolved=\"false\"></xref> to a string array.\n"
  example: []
  syntax:
    content: public static implicit operator string[](StringValues value)
    parameters:
    - id: value
      type: Serious.Abbot.Scripting.StringValues
      description: A <xref href="Serious.Abbot.Scripting.StringValues" data-throw-if-not-resolved="false"></xref> to implicitly convert.
    return:
      type: System.String[]
    content.vb: Public Shared Widening Operator CType(value As StringValues) As String()
  overload: Serious.Abbot.Scripting.StringValues.op_Implicit*
  nameWithType.vb: StringValues.Widening(StringValues to String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Serious.Abbot.Scripting.StringValues.Widening(Serious.Abbot.Scripting.StringValues to System.String())
  name.vb: Widening(StringValues to String())
- uid: Serious.Abbot.Scripting.StringValues.Count
  commentId: P:Serious.Abbot.Scripting.StringValues.Count
  id: Count
  parent: Serious.Abbot.Scripting.StringValues
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: StringValues.Count
  fullName: Serious.Abbot.Scripting.StringValues.Count
  type: Property
  source:
    remote:
      path: src/Abbot.Scripting.Interfaces/Http/StringValues.cs
      branch: docs
      repo: https://github.com/aseriousbiz/abbot.git
    id: Count
    path: ../../abbot/src/Abbot.Scripting.Interfaces/Http/StringValues.cs
    startLine: 91
  assemblies:
  - Abbot.Scripting.Interfaces
  namespace: Serious.Abbot.Scripting
  summary: "\nGets the number of <see cref=\"!:System.String\"></see> elements contained in this <xref href=\"Serious.Abbot.Scripting.StringValues\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Count As Integer
  overload: Serious.Abbot.Scripting.StringValues.Count*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Serious.Abbot.Scripting.StringValues.Item(System.Int32)
  commentId: P:Serious.Abbot.Scripting.StringValues.Item(System.Int32)
  id: Item(System.Int32)
  parent: Serious.Abbot.Scripting.StringValues
  langs:
  - csharp
  - vb
  name: Item[Int32]
  nameWithType: StringValues.Item[Int32]
  fullName: Serious.Abbot.Scripting.StringValues.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/Abbot.Scripting.Interfaces/Http/StringValues.cs
      branch: docs
      repo: https://github.com/aseriousbiz/abbot.git
    id: this[]
    path: ../../abbot/src/Abbot.Scripting.Interfaces/Http/StringValues.cs
    startLine: 135
  assemblies:
  - Abbot.Scripting.Interfaces
  namespace: Serious.Abbot.Scripting
  summary: "\nGets the <see cref=\"!:System.String\"></see> at index.\n"
  example: []
  syntax:
    content: public string this[int index] { get; }
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the element to get.
    return:
      type: System.String
      description: The string at the specified index.
    content.vb: Public ReadOnly Property Item(index As Integer) As String
  overload: Serious.Abbot.Scripting.StringValues.Item*
  nameWithType.vb: StringValues.Item(Int32)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Serious.Abbot.Scripting.StringValues.Item(System.Int32)
  name.vb: Item(Int32)
- uid: Serious.Abbot.Scripting.StringValues.ToString
  commentId: M:Serious.Abbot.Scripting.StringValues.ToString
  id: ToString
  parent: Serious.Abbot.Scripting.StringValues
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: StringValues.ToString()
  fullName: Serious.Abbot.Scripting.StringValues.ToString()
  type: Method
  source:
    remote:
      path: src/Abbot.Scripting.Interfaces/Http/StringValues.cs
      branch: docs
      repo: https://github.com/aseriousbiz/abbot.git
    id: ToString
    path: ../../abbot/src/Abbot.Scripting.Interfaces/Http/StringValues.cs
    startLine: 167
  assemblies:
  - Abbot.Scripting.Interfaces
  namespace: Serious.Abbot.Scripting
  summary: "\nConverts the value of the current <xref href=\"Serious.Abbot.Scripting.StringValues\" data-throw-if-not-resolved=\"false\"></xref> object to its equivalent string representation, with multiple values joined as a comma separated string.\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: A string representation of the value of the current <xref href="Serious.Abbot.Scripting.StringValues" data-throw-if-not-resolved="false"></xref> object.
    content.vb: Public Overrides Function ToString As String
  overload: Serious.Abbot.Scripting.StringValues.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Serious.Abbot.Scripting.StringValues.ToArray
  commentId: M:Serious.Abbot.Scripting.StringValues.ToArray
  id: ToArray
  parent: Serious.Abbot.Scripting.StringValues
  langs:
  - csharp
  - vb
  name: ToArray()
  nameWithType: StringValues.ToArray()
  fullName: Serious.Abbot.Scripting.StringValues.ToArray()
  type: Method
  source:
    remote:
      path: src/Abbot.Scripting.Interfaces/Http/StringValues.cs
      branch: docs
      repo: https://github.com/aseriousbiz/abbot.git
    id: ToArray
    path: ../../abbot/src/Abbot.Scripting.Interfaces/Http/StringValues.cs
    startLine: 283
  assemblies:
  - Abbot.Scripting.Interfaces
  namespace: Serious.Abbot.Scripting
  summary: "\nCreates a string array from the current <xref href=\"Serious.Abbot.Scripting.StringValues\" data-throw-if-not-resolved=\"false\"></xref> object.\n"
  remarks: "\n<p>If the <xref href=\"Serious.Abbot.Scripting.StringValues\" data-throw-if-not-resolved=\"false\"></xref> contains a single string internally, it is copied to a new array.</p>\n<p>If the <xref href=\"Serious.Abbot.Scripting.StringValues\" data-throw-if-not-resolved=\"false\"></xref> contains an array internally it returns that array instance.</p>\n"
  example: []
  syntax:
    content: public string[] ToArray()
    return:
      type: System.String[]
      description: A string array represented by this instance.
    content.vb: Public Function ToArray As String()
  overload: Serious.Abbot.Scripting.StringValues.ToArray*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Serious.Abbot.Scripting.StringValues.GetEnumerator
  commentId: M:Serious.Abbot.Scripting.StringValues.GetEnumerator
  id: GetEnumerator
  parent: Serious.Abbot.Scripting.StringValues
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: StringValues.GetEnumerator()
  fullName: Serious.Abbot.Scripting.StringValues.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/Abbot.Scripting.Interfaces/Http/StringValues.cs
      branch: docs
      repo: https://github.com/aseriousbiz/abbot.git
    id: GetEnumerator
    path: ../../abbot/src/Abbot.Scripting.Interfaces/Http/StringValues.cs
    startLine: 406
  assemblies:
  - Abbot.Scripting.Interfaces
  namespace: Serious.Abbot.Scripting
  summary: Retrieves an object that can iterate through the individual strings in this <xref href="Serious.Abbot.Scripting.StringValues" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public StringValues.Enumerator GetEnumerator()
    return:
      type: Serious.Abbot.Scripting.StringValues.Enumerator
      description: An enumerator that can be used to iterate through the <xref href="Serious.Abbot.Scripting.StringValues" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Function GetEnumerator As StringValues.Enumerator
  overload: Serious.Abbot.Scripting.StringValues.GetEnumerator*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Serious.Abbot.Scripting.StringValues.IsNullOrEmpty(Serious.Abbot.Scripting.StringValues)
  commentId: M:Serious.Abbot.Scripting.StringValues.IsNullOrEmpty(Serious.Abbot.Scripting.StringValues)
  id: IsNullOrEmpty(Serious.Abbot.Scripting.StringValues)
  parent: Serious.Abbot.Scripting.StringValues
  langs:
  - csharp
  - vb
  name: IsNullOrEmpty(StringValues)
  nameWithType: StringValues.IsNullOrEmpty(StringValues)
  fullName: Serious.Abbot.Scripting.StringValues.IsNullOrEmpty(Serious.Abbot.Scripting.StringValues)
  type: Method
  source:
    remote:
      path: src/Abbot.Scripting.Interfaces/Http/StringValues.cs
      branch: docs
      repo: https://github.com/aseriousbiz/abbot.git
    id: IsNullOrEmpty
    path: ../../abbot/src/Abbot.Scripting.Interfaces/Http/StringValues.cs
    startLine: 428
  assemblies:
  - Abbot.Scripting.Interfaces
  namespace: Serious.Abbot.Scripting
  summary: "\nIndicates whether the specified <xref href=\"Serious.Abbot.Scripting.StringValues\" data-throw-if-not-resolved=\"false\"></xref> contains no string values.\n"
  example: []
  syntax:
    content: public static bool IsNullOrEmpty(StringValues value)
    parameters:
    - id: value
      type: Serious.Abbot.Scripting.StringValues
      description: The <xref href="Serious.Abbot.Scripting.StringValues" data-throw-if-not-resolved="false"></xref> to test.
    return:
      type: System.Boolean
      description: true if <code data-dev-comment-type="paramref" class="paramref">value</code> contains a single null string or empty array; otherwise, false.
    content.vb: Public Shared Function IsNullOrEmpty(value As StringValues) As Boolean
  overload: Serious.Abbot.Scripting.StringValues.IsNullOrEmpty*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Serious.Abbot.Scripting.StringValues.Concat(Serious.Abbot.Scripting.StringValues,Serious.Abbot.Scripting.StringValues)
  commentId: M:Serious.Abbot.Scripting.StringValues.Concat(Serious.Abbot.Scripting.StringValues,Serious.Abbot.Scripting.StringValues)
  id: Concat(Serious.Abbot.Scripting.StringValues,Serious.Abbot.Scripting.StringValues)
  parent: Serious.Abbot.Scripting.StringValues
  langs:
  - csharp
  - vb
  name: Concat(StringValues, StringValues)
  nameWithType: StringValues.Concat(StringValues, StringValues)
  fullName: Serious.Abbot.Scripting.StringValues.Concat(Serious.Abbot.Scripting.StringValues, Serious.Abbot.Scripting.StringValues)
  type: Method
  source:
    remote:
      path: src/Abbot.Scripting.Interfaces/Http/StringValues.cs
      branch: docs
      repo: https://github.com/aseriousbiz/abbot.git
    id: Concat
    path: ../../abbot/src/Abbot.Scripting.Interfaces/Http/StringValues.cs
    startLine: 457
  assemblies:
  - Abbot.Scripting.Interfaces
  namespace: Serious.Abbot.Scripting
  summary: "\nConcatenates two specified instances of <xref href=\"Serious.Abbot.Scripting.StringValues\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static StringValues Concat(StringValues values1, StringValues values2)
    parameters:
    - id: values1
      type: Serious.Abbot.Scripting.StringValues
      description: The first <xref href="Serious.Abbot.Scripting.StringValues" data-throw-if-not-resolved="false"></xref> to concatenate.
    - id: values2
      type: Serious.Abbot.Scripting.StringValues
      description: The second <xref href="Serious.Abbot.Scripting.StringValues" data-throw-if-not-resolved="false"></xref> to concatenate.
    return:
      type: Serious.Abbot.Scripting.StringValues
      description: The concatenation of <code data-dev-comment-type="paramref" class="paramref">values1</code> and <code data-dev-comment-type="paramref" class="paramref">values2</code>.
    content.vb: Public Shared Function Concat(values1 As StringValues, values2 As StringValues) As StringValues
  overload: Serious.Abbot.Scripting.StringValues.Concat*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Serious.Abbot.Scripting.StringValues.Concat(Serious.Abbot.Scripting.StringValues@,System.String)
  commentId: M:Serious.Abbot.Scripting.StringValues.Concat(Serious.Abbot.Scripting.StringValues@,System.String)
  id: Concat(Serious.Abbot.Scripting.StringValues@,System.String)
  parent: Serious.Abbot.Scripting.StringValues
  langs:
  - csharp
  - vb
  name: Concat(StringValues, String)
  nameWithType: StringValues.Concat(StringValues, String)
  fullName: Serious.Abbot.Scripting.StringValues.Concat(Serious.Abbot.Scripting.StringValues, System.String)
  type: Method
  source:
    remote:
      path: src/Abbot.Scripting.Interfaces/Http/StringValues.cs
      branch: docs
      repo: https://github.com/aseriousbiz/abbot.git
    id: Concat
    path: ../../abbot/src/Abbot.Scripting.Interfaces/Http/StringValues.cs
    startLine: 484
  assemblies:
  - Abbot.Scripting.Interfaces
  namespace: Serious.Abbot.Scripting
  summary: "\nConcatenates specified instance of <xref href=\"Serious.Abbot.Scripting.StringValues\" data-throw-if-not-resolved=\"false\"></xref> with specified <see cref=\"!:System.String\"></see>.\n"
  example: []
  syntax:
    content: public static StringValues Concat(in StringValues values, string value)
    parameters:
    - id: values
      type: Serious.Abbot.Scripting.StringValues
      description: The <xref href="Serious.Abbot.Scripting.StringValues" data-throw-if-not-resolved="false"></xref> to concatenate.
    - id: value
      type: System.String
      description: The <see cref="!:System.String"></see> to concatenate.
    return:
      type: Serious.Abbot.Scripting.StringValues
      description: The concatenation of <code data-dev-comment-type="paramref" class="paramref">values</code> and <code data-dev-comment-type="paramref" class="paramref">value</code>.
    content.vb: Public Shared Function Concat(ByRef values As StringValues, value As String) As StringValues
  overload: Serious.Abbot.Scripting.StringValues.Concat*
  nameWithType.vb: StringValues.Concat(ByRef StringValues, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Serious.Abbot.Scripting.StringValues.Concat(ByRef Serious.Abbot.Scripting.StringValues, System.String)
  name.vb: Concat(ByRef StringValues, String)
- uid: Serious.Abbot.Scripting.StringValues.Concat(System.String,Serious.Abbot.Scripting.StringValues@)
  commentId: M:Serious.Abbot.Scripting.StringValues.Concat(System.String,Serious.Abbot.Scripting.StringValues@)
  id: Concat(System.String,Serious.Abbot.Scripting.StringValues@)
  parent: Serious.Abbot.Scripting.StringValues
  langs:
  - csharp
  - vb
  name: Concat(String, StringValues)
  nameWithType: StringValues.Concat(String, StringValues)
  fullName: Serious.Abbot.Scripting.StringValues.Concat(System.String, Serious.Abbot.Scripting.StringValues)
  type: Method
  source:
    remote:
      path: src/Abbot.Scripting.Interfaces/Http/StringValues.cs
      branch: docs
      repo: https://github.com/aseriousbiz/abbot.git
    id: Concat
    path: ../../abbot/src/Abbot.Scripting.Interfaces/Http/StringValues.cs
    startLine: 509
  assemblies:
  - Abbot.Scripting.Interfaces
  namespace: Serious.Abbot.Scripting
  summary: "\nConcatenates specified instance of <see cref=\"!:System.String\"></see> with specified <xref href=\"Serious.Abbot.Scripting.StringValues\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static StringValues Concat(string value, in StringValues values)
    parameters:
    - id: value
      type: System.String
      description: The <see cref="!:System.String"></see> to concatenate.
    - id: values
      type: Serious.Abbot.Scripting.StringValues
      description: The <xref href="Serious.Abbot.Scripting.StringValues" data-throw-if-not-resolved="false"></xref> to concatenate.
    return:
      type: Serious.Abbot.Scripting.StringValues
      description: The concatenation of <code data-dev-comment-type="paramref" class="paramref">values</code> and <code data-dev-comment-type="paramref" class="paramref">values</code>.
    content.vb: Public Shared Function Concat(value As String, ByRef values As StringValues) As StringValues
  overload: Serious.Abbot.Scripting.StringValues.Concat*
  nameWithType.vb: StringValues.Concat(String, ByRef StringValues)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Serious.Abbot.Scripting.StringValues.Concat(System.String, ByRef Serious.Abbot.Scripting.StringValues)
  name.vb: Concat(String, ByRef StringValues)
- uid: Serious.Abbot.Scripting.StringValues.Equals(Serious.Abbot.Scripting.StringValues,Serious.Abbot.Scripting.StringValues)
  commentId: M:Serious.Abbot.Scripting.StringValues.Equals(Serious.Abbot.Scripting.StringValues,Serious.Abbot.Scripting.StringValues)
  id: Equals(Serious.Abbot.Scripting.StringValues,Serious.Abbot.Scripting.StringValues)
  parent: Serious.Abbot.Scripting.StringValues
  langs:
  - csharp
  - vb
  name: Equals(StringValues, StringValues)
  nameWithType: StringValues.Equals(StringValues, StringValues)
  fullName: Serious.Abbot.Scripting.StringValues.Equals(Serious.Abbot.Scripting.StringValues, Serious.Abbot.Scripting.StringValues)
  type: Method
  source:
    remote:
      path: src/Abbot.Scripting.Interfaces/Http/StringValues.cs
      branch: docs
      repo: https://github.com/aseriousbiz/abbot.git
    id: Equals
    path: ../../abbot/src/Abbot.Scripting.Interfaces/Http/StringValues.cs
    startLine: 534
  assemblies:
  - Abbot.Scripting.Interfaces
  namespace: Serious.Abbot.Scripting
  summary: "\nDetermines whether two specified <xref href=\"Serious.Abbot.Scripting.StringValues\" data-throw-if-not-resolved=\"false\"></xref> objects have the same values in the same order.\n"
  example: []
  syntax:
    content: public static bool Equals(StringValues left, StringValues right)
    parameters:
    - id: left
      type: Serious.Abbot.Scripting.StringValues
      description: The first <xref href="Serious.Abbot.Scripting.StringValues" data-throw-if-not-resolved="false"></xref> to compare.
    - id: right
      type: Serious.Abbot.Scripting.StringValues
      description: The second <xref href="Serious.Abbot.Scripting.StringValues" data-throw-if-not-resolved="false"></xref> to compare.
    return:
      type: System.Boolean
      description: <code>true</code> if the value of <code data-dev-comment-type="paramref" class="paramref">left</code> is the same as the value of <code data-dev-comment-type="paramref" class="paramref">right</code>; otherwise, <code>false</code>.
    content.vb: Public Shared Function Equals(left As StringValues, right As StringValues) As Boolean
  overload: Serious.Abbot.Scripting.StringValues.Equals*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Serious.Abbot.Scripting.StringValues.op_Equality(Serious.Abbot.Scripting.StringValues,Serious.Abbot.Scripting.StringValues)
  commentId: M:Serious.Abbot.Scripting.StringValues.op_Equality(Serious.Abbot.Scripting.StringValues,Serious.Abbot.Scripting.StringValues)
  id: op_Equality(Serious.Abbot.Scripting.StringValues,Serious.Abbot.Scripting.StringValues)
  parent: Serious.Abbot.Scripting.StringValues
  langs:
  - csharp
  - vb
  name: Equality(StringValues, StringValues)
  nameWithType: StringValues.Equality(StringValues, StringValues)
  fullName: Serious.Abbot.Scripting.StringValues.Equality(Serious.Abbot.Scripting.StringValues, Serious.Abbot.Scripting.StringValues)
  type: Operator
  source:
    remote:
      path: src/Abbot.Scripting.Interfaces/Http/StringValues.cs
      branch: docs
      repo: https://github.com/aseriousbiz/abbot.git
    id: op_Equality
    path: ../../abbot/src/Abbot.Scripting.Interfaces/Http/StringValues.cs
    startLine: 560
  assemblies:
  - Abbot.Scripting.Interfaces
  namespace: Serious.Abbot.Scripting
  summary: "\nDetermines whether two specified <xref href=\"Serious.Abbot.Scripting.StringValues\" data-throw-if-not-resolved=\"false\"></xref> have the same values.\n"
  example: []
  syntax:
    content: public static bool operator ==(StringValues left, StringValues right)
    parameters:
    - id: left
      type: Serious.Abbot.Scripting.StringValues
      description: The first <xref href="Serious.Abbot.Scripting.StringValues" data-throw-if-not-resolved="false"></xref> to compare.
    - id: right
      type: Serious.Abbot.Scripting.StringValues
      description: The second <xref href="Serious.Abbot.Scripting.StringValues" data-throw-if-not-resolved="false"></xref> to compare.
    return:
      type: System.Boolean
      description: <code>true</code> if the value of <code data-dev-comment-type="paramref" class="paramref">left</code> is the same as the value of <code data-dev-comment-type="paramref" class="paramref">right</code>; otherwise, <code>false</code>.
    content.vb: Public Shared Operator =(left As StringValues, right As StringValues) As Boolean
  overload: Serious.Abbot.Scripting.StringValues.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Serious.Abbot.Scripting.StringValues.op_Inequality(Serious.Abbot.Scripting.StringValues,Serious.Abbot.Scripting.StringValues)
  commentId: M:Serious.Abbot.Scripting.StringValues.op_Inequality(Serious.Abbot.Scripting.StringValues,Serious.Abbot.Scripting.StringValues)
  id: op_Inequality(Serious.Abbot.Scripting.StringValues,Serious.Abbot.Scripting.StringValues)
  parent: Serious.Abbot.Scripting.StringValues
  langs:
  - csharp
  - vb
  name: Inequality(StringValues, StringValues)
  nameWithType: StringValues.Inequality(StringValues, StringValues)
  fullName: Serious.Abbot.Scripting.StringValues.Inequality(Serious.Abbot.Scripting.StringValues, Serious.Abbot.Scripting.StringValues)
  type: Operator
  source:
    remote:
      path: src/Abbot.Scripting.Interfaces/Http/StringValues.cs
      branch: docs
      repo: https://github.com/aseriousbiz/abbot.git
    id: op_Inequality
    path: ../../abbot/src/Abbot.Scripting.Interfaces/Http/StringValues.cs
    startLine: 571
  assemblies:
  - Abbot.Scripting.Interfaces
  namespace: Serious.Abbot.Scripting
  summary: "\nDetermines whether two specified <xref href=\"Serious.Abbot.Scripting.StringValues\" data-throw-if-not-resolved=\"false\"></xref> have different values.\n"
  example: []
  syntax:
    content: public static bool operator !=(StringValues left, StringValues right)
    parameters:
    - id: left
      type: Serious.Abbot.Scripting.StringValues
      description: The first <xref href="Serious.Abbot.Scripting.StringValues" data-throw-if-not-resolved="false"></xref> to compare.
    - id: right
      type: Serious.Abbot.Scripting.StringValues
      description: The second <xref href="Serious.Abbot.Scripting.StringValues" data-throw-if-not-resolved="false"></xref> to compare.
    return:
      type: System.Boolean
      description: <code>true</code> if the value of <code data-dev-comment-type="paramref" class="paramref">left</code> is different to the value of <code data-dev-comment-type="paramref" class="paramref">right</code>; otherwise, <code>false</code>.
    content.vb: Public Shared Operator <>(left As StringValues, right As StringValues) As Boolean
  overload: Serious.Abbot.Scripting.StringValues.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Serious.Abbot.Scripting.StringValues.Equals(Serious.Abbot.Scripting.StringValues)
  commentId: M:Serious.Abbot.Scripting.StringValues.Equals(Serious.Abbot.Scripting.StringValues)
  id: Equals(Serious.Abbot.Scripting.StringValues)
  parent: Serious.Abbot.Scripting.StringValues
  langs:
  - csharp
  - vb
  name: Equals(StringValues)
  nameWithType: StringValues.Equals(StringValues)
  fullName: Serious.Abbot.Scripting.StringValues.Equals(Serious.Abbot.Scripting.StringValues)
  type: Method
  source:
    remote:
      path: src/Abbot.Scripting.Interfaces/Http/StringValues.cs
      branch: docs
      repo: https://github.com/aseriousbiz/abbot.git
    id: Equals
    path: ../../abbot/src/Abbot.Scripting.Interfaces/Http/StringValues.cs
    startLine: 581
  assemblies:
  - Abbot.Scripting.Interfaces
  namespace: Serious.Abbot.Scripting
  summary: "\nDetermines whether this instance and another specified <xref href=\"Serious.Abbot.Scripting.StringValues\" data-throw-if-not-resolved=\"false\"></xref> object have the same values.\n"
  example: []
  syntax:
    content: public bool Equals(StringValues other)
    parameters:
    - id: other
      type: Serious.Abbot.Scripting.StringValues
      description: The string to compare to this instance.
    return:
      type: System.Boolean
      description: <code>true</code> if the value of <code data-dev-comment-type="paramref" class="paramref">other</code> is the same as the value of this instance; otherwise, <code>false</code>.
    content.vb: Public Function Equals(other As StringValues) As Boolean
  overload: Serious.Abbot.Scripting.StringValues.Equals*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Serious.Abbot.Scripting.StringValues.Equals(System.String,Serious.Abbot.Scripting.StringValues)
  commentId: M:Serious.Abbot.Scripting.StringValues.Equals(System.String,Serious.Abbot.Scripting.StringValues)
  id: Equals(System.String,Serious.Abbot.Scripting.StringValues)
  parent: Serious.Abbot.Scripting.StringValues
  langs:
  - csharp
  - vb
  name: Equals(String, StringValues)
  nameWithType: StringValues.Equals(String, StringValues)
  fullName: Serious.Abbot.Scripting.StringValues.Equals(System.String, Serious.Abbot.Scripting.StringValues)
  type: Method
  source:
    remote:
      path: src/Abbot.Scripting.Interfaces/Http/StringValues.cs
      branch: docs
      repo: https://github.com/aseriousbiz/abbot.git
    id: Equals
    path: ../../abbot/src/Abbot.Scripting.Interfaces/Http/StringValues.cs
    startLine: 589
  assemblies:
  - Abbot.Scripting.Interfaces
  namespace: Serious.Abbot.Scripting
  summary: "\nDetermines whether the specified <see cref=\"!:System.String\"></see> and <xref href=\"Serious.Abbot.Scripting.StringValues\" data-throw-if-not-resolved=\"false\"></xref> objects have the same values.\n"
  example: []
  syntax:
    content: public static bool Equals(string left, StringValues right)
    parameters:
    - id: left
      type: System.String
      description: The <see cref="!:System.String"></see> to compare.
    - id: right
      type: Serious.Abbot.Scripting.StringValues
      description: The <xref href="Serious.Abbot.Scripting.StringValues" data-throw-if-not-resolved="false"></xref> to compare.
    return:
      type: System.Boolean
      description: <code>true</code> if the value of <code data-dev-comment-type="paramref" class="paramref">left</code> is the same as the value of <code data-dev-comment-type="paramref" class="paramref">right</code>; otherwise, <code>false</code>. If <code data-dev-comment-type="paramref" class="paramref">left</code> is <code>null</code>, the method returns <code>false</code>.
    content.vb: Public Shared Function Equals(left As String, right As StringValues) As Boolean
  overload: Serious.Abbot.Scripting.StringValues.Equals*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Serious.Abbot.Scripting.StringValues.Equals(Serious.Abbot.Scripting.StringValues,System.String)
  commentId: M:Serious.Abbot.Scripting.StringValues.Equals(Serious.Abbot.Scripting.StringValues,System.String)
  id: Equals(Serious.Abbot.Scripting.StringValues,System.String)
  parent: Serious.Abbot.Scripting.StringValues
  langs:
  - csharp
  - vb
  name: Equals(StringValues, String)
  nameWithType: StringValues.Equals(StringValues, String)
  fullName: Serious.Abbot.Scripting.StringValues.Equals(Serious.Abbot.Scripting.StringValues, System.String)
  type: Method
  source:
    remote:
      path: src/Abbot.Scripting.Interfaces/Http/StringValues.cs
      branch: docs
      repo: https://github.com/aseriousbiz/abbot.git
    id: Equals
    path: ../../abbot/src/Abbot.Scripting.Interfaces/Http/StringValues.cs
    startLine: 597
  assemblies:
  - Abbot.Scripting.Interfaces
  namespace: Serious.Abbot.Scripting
  summary: "\nDetermines whether the specified <xref href=\"Serious.Abbot.Scripting.StringValues\" data-throw-if-not-resolved=\"false\"></xref> and <see cref=\"!:System.String\"></see> objects have the same values.\n"
  example: []
  syntax:
    content: public static bool Equals(StringValues left, string right)
    parameters:
    - id: left
      type: Serious.Abbot.Scripting.StringValues
      description: The <xref href="Serious.Abbot.Scripting.StringValues" data-throw-if-not-resolved="false"></xref> to compare.
    - id: right
      type: System.String
      description: The <see cref="!:System.String"></see> to compare.
    return:
      type: System.Boolean
      description: <code>true</code> if the value of <code data-dev-comment-type="paramref" class="paramref">left</code> is the same as the value of <code data-dev-comment-type="paramref" class="paramref">right</code>; otherwise, <code>false</code>. If <code data-dev-comment-type="paramref" class="paramref">right</code> is <code>null</code>, the method returns <code>false</code>.
    content.vb: Public Shared Function Equals(left As StringValues, right As String) As Boolean
  overload: Serious.Abbot.Scripting.StringValues.Equals*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Serious.Abbot.Scripting.StringValues.Equals(System.String)
  commentId: M:Serious.Abbot.Scripting.StringValues.Equals(System.String)
  id: Equals(System.String)
  parent: Serious.Abbot.Scripting.StringValues
  langs:
  - csharp
  - vb
  name: Equals(String)
  nameWithType: StringValues.Equals(String)
  fullName: Serious.Abbot.Scripting.StringValues.Equals(System.String)
  type: Method
  source:
    remote:
      path: src/Abbot.Scripting.Interfaces/Http/StringValues.cs
      branch: docs
      repo: https://github.com/aseriousbiz/abbot.git
    id: Equals
    path: ../../abbot/src/Abbot.Scripting.Interfaces/Http/StringValues.cs
    startLine: 604
  assemblies:
  - Abbot.Scripting.Interfaces
  namespace: Serious.Abbot.Scripting
  summary: "\nDetermines whether this instance and a specified <see cref=\"!:System.String\"></see>, have the same value.\n"
  example: []
  syntax:
    content: public bool Equals(string other)
    parameters:
    - id: other
      type: System.String
      description: The <see cref="!:System.String"></see> to compare to this instance.
    return:
      type: System.Boolean
      description: <code>true</code> if the value of <code data-dev-comment-type="paramref" class="paramref">other</code> is the same as this instance; otherwise, <code>false</code>. If <code data-dev-comment-type="paramref" class="paramref">other</code> is <code>null</code>, returns <code>false</code>.
    content.vb: Public Function Equals(other As String) As Boolean
  overload: Serious.Abbot.Scripting.StringValues.Equals*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Serious.Abbot.Scripting.StringValues.Equals(System.String[],Serious.Abbot.Scripting.StringValues)
  commentId: M:Serious.Abbot.Scripting.StringValues.Equals(System.String[],Serious.Abbot.Scripting.StringValues)
  id: Equals(System.String[],Serious.Abbot.Scripting.StringValues)
  parent: Serious.Abbot.Scripting.StringValues
  langs:
  - csharp
  - vb
  name: Equals(String[], StringValues)
  nameWithType: StringValues.Equals(String[], StringValues)
  fullName: Serious.Abbot.Scripting.StringValues.Equals(System.String[], Serious.Abbot.Scripting.StringValues)
  type: Method
  source:
    remote:
      path: src/Abbot.Scripting.Interfaces/Http/StringValues.cs
      branch: docs
      repo: https://github.com/aseriousbiz/abbot.git
    id: Equals
    path: ../../abbot/src/Abbot.Scripting.Interfaces/Http/StringValues.cs
    startLine: 612
  assemblies:
  - Abbot.Scripting.Interfaces
  namespace: Serious.Abbot.Scripting
  summary: "\nDetermines whether the specified string array and <xref href=\"Serious.Abbot.Scripting.StringValues\" data-throw-if-not-resolved=\"false\"></xref> objects have the same values.\n"
  example: []
  syntax:
    content: public static bool Equals(string[] left, StringValues right)
    parameters:
    - id: left
      type: System.String[]
      description: The string array to compare.
    - id: right
      type: Serious.Abbot.Scripting.StringValues
      description: The <xref href="Serious.Abbot.Scripting.StringValues" data-throw-if-not-resolved="false"></xref> to compare.
    return:
      type: System.Boolean
      description: <code>true</code> if the value of <code data-dev-comment-type="paramref" class="paramref">left</code> is the same as the value of <code data-dev-comment-type="paramref" class="paramref">right</code>; otherwise, <code>false</code>.
    content.vb: Public Shared Function Equals(left As String(), right As StringValues) As Boolean
  overload: Serious.Abbot.Scripting.StringValues.Equals*
  nameWithType.vb: StringValues.Equals(String(), StringValues)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Serious.Abbot.Scripting.StringValues.Equals(System.String(), Serious.Abbot.Scripting.StringValues)
  name.vb: Equals(String(), StringValues)
- uid: Serious.Abbot.Scripting.StringValues.Equals(Serious.Abbot.Scripting.StringValues,System.String[])
  commentId: M:Serious.Abbot.Scripting.StringValues.Equals(Serious.Abbot.Scripting.StringValues,System.String[])
  id: Equals(Serious.Abbot.Scripting.StringValues,System.String[])
  parent: Serious.Abbot.Scripting.StringValues
  langs:
  - csharp
  - vb
  name: Equals(StringValues, String[])
  nameWithType: StringValues.Equals(StringValues, String[])
  fullName: Serious.Abbot.Scripting.StringValues.Equals(Serious.Abbot.Scripting.StringValues, System.String[])
  type: Method
  source:
    remote:
      path: src/Abbot.Scripting.Interfaces/Http/StringValues.cs
      branch: docs
      repo: https://github.com/aseriousbiz/abbot.git
    id: Equals
    path: ../../abbot/src/Abbot.Scripting.Interfaces/Http/StringValues.cs
    startLine: 620
  assemblies:
  - Abbot.Scripting.Interfaces
  namespace: Serious.Abbot.Scripting
  summary: "\nDetermines whether the specified <xref href=\"Serious.Abbot.Scripting.StringValues\" data-throw-if-not-resolved=\"false\"></xref> and string array objects have the same values.\n"
  example: []
  syntax:
    content: public static bool Equals(StringValues left, string[] right)
    parameters:
    - id: left
      type: Serious.Abbot.Scripting.StringValues
      description: The <xref href="Serious.Abbot.Scripting.StringValues" data-throw-if-not-resolved="false"></xref> to compare.
    - id: right
      type: System.String[]
      description: The string array to compare.
    return:
      type: System.Boolean
      description: <code>true</code> if the value of <code data-dev-comment-type="paramref" class="paramref">left</code> is the same as the value of <code data-dev-comment-type="paramref" class="paramref">right</code>; otherwise, <code>false</code>.
    content.vb: Public Shared Function Equals(left As StringValues, right As String()) As Boolean
  overload: Serious.Abbot.Scripting.StringValues.Equals*
  nameWithType.vb: StringValues.Equals(StringValues, String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Serious.Abbot.Scripting.StringValues.Equals(Serious.Abbot.Scripting.StringValues, System.String())
  name.vb: Equals(StringValues, String())
- uid: Serious.Abbot.Scripting.StringValues.Equals(System.String[])
  commentId: M:Serious.Abbot.Scripting.StringValues.Equals(System.String[])
  id: Equals(System.String[])
  parent: Serious.Abbot.Scripting.StringValues
  langs:
  - csharp
  - vb
  name: Equals(String[])
  nameWithType: StringValues.Equals(String[])
  fullName: Serious.Abbot.Scripting.StringValues.Equals(System.String[])
  type: Method
  source:
    remote:
      path: src/Abbot.Scripting.Interfaces/Http/StringValues.cs
      branch: docs
      repo: https://github.com/aseriousbiz/abbot.git
    id: Equals
    path: ../../abbot/src/Abbot.Scripting.Interfaces/Http/StringValues.cs
    startLine: 627
  assemblies:
  - Abbot.Scripting.Interfaces
  namespace: Serious.Abbot.Scripting
  summary: "\nDetermines whether this instance and a specified string array have the same values.\n"
  example: []
  syntax:
    content: public bool Equals(string[] other)
    parameters:
    - id: other
      type: System.String[]
      description: The string array to compare to this instance.
    return:
      type: System.Boolean
      description: <code>true</code> if the value of <code data-dev-comment-type="paramref" class="paramref">other</code> is the same as this instance; otherwise, <code>false</code>.
    content.vb: Public Function Equals(other As String()) As Boolean
  overload: Serious.Abbot.Scripting.StringValues.Equals*
  nameWithType.vb: StringValues.Equals(String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Serious.Abbot.Scripting.StringValues.Equals(System.String())
  name.vb: Equals(String())
- uid: Serious.Abbot.Scripting.StringValues.op_Equality(Serious.Abbot.Scripting.StringValues,System.String)
  commentId: M:Serious.Abbot.Scripting.StringValues.op_Equality(Serious.Abbot.Scripting.StringValues,System.String)
  id: op_Equality(Serious.Abbot.Scripting.StringValues,System.String)
  parent: Serious.Abbot.Scripting.StringValues
  langs:
  - csharp
  - vb
  name: Equality(StringValues, String)
  nameWithType: StringValues.Equality(StringValues, String)
  fullName: Serious.Abbot.Scripting.StringValues.Equality(Serious.Abbot.Scripting.StringValues, System.String)
  type: Operator
  source:
    remote:
      path: src/Abbot.Scripting.Interfaces/Http/StringValues.cs
      branch: docs
      repo: https://github.com/aseriousbiz/abbot.git
    id: op_Equality
    path: ../../abbot/src/Abbot.Scripting.Interfaces/Http/StringValues.cs
    startLine: 630
  assemblies:
  - Abbot.Scripting.Interfaces
  namespace: Serious.Abbot.Scripting
  example: []
  syntax:
    content: public static bool operator ==(StringValues left, string right)
    parameters:
    - id: left
      type: Serious.Abbot.Scripting.StringValues
    - id: right
      type: System.String
    return:
      type: System.Boolean
    content.vb: Public Shared Operator =(left As StringValues, right As String) As Boolean
  overload: Serious.Abbot.Scripting.StringValues.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Serious.Abbot.Scripting.StringValues.op_Inequality(Serious.Abbot.Scripting.StringValues,System.String)
  commentId: M:Serious.Abbot.Scripting.StringValues.op_Inequality(Serious.Abbot.Scripting.StringValues,System.String)
  id: op_Inequality(Serious.Abbot.Scripting.StringValues,System.String)
  parent: Serious.Abbot.Scripting.StringValues
  langs:
  - csharp
  - vb
  name: Inequality(StringValues, String)
  nameWithType: StringValues.Inequality(StringValues, String)
  fullName: Serious.Abbot.Scripting.StringValues.Inequality(Serious.Abbot.Scripting.StringValues, System.String)
  type: Operator
  source:
    remote:
      path: src/Abbot.Scripting.Interfaces/Http/StringValues.cs
      branch: docs
      repo: https://github.com/aseriousbiz/abbot.git
    id: op_Inequality
    path: ../../abbot/src/Abbot.Scripting.Interfaces/Http/StringValues.cs
    startLine: 638
  assemblies:
  - Abbot.Scripting.Interfaces
  namespace: Serious.Abbot.Scripting
  summary: "\nDetermines whether the specified <xref href=\"Serious.Abbot.Scripting.StringValues\" data-throw-if-not-resolved=\"false\"></xref> and <see cref=\"!:System.String\"></see> objects have different values.\n"
  example: []
  syntax:
    content: public static bool operator !=(StringValues left, string right)
    parameters:
    - id: left
      type: Serious.Abbot.Scripting.StringValues
      description: The <xref href="Serious.Abbot.Scripting.StringValues" data-throw-if-not-resolved="false"></xref> to compare.
    - id: right
      type: System.String
      description: The <see cref="!:System.String"></see> to compare.
    return:
      type: System.Boolean
      description: <code>true</code> if the value of <code data-dev-comment-type="paramref" class="paramref">left</code> is different to the value of <code data-dev-comment-type="paramref" class="paramref">right</code>; otherwise, <code>false</code>.
    content.vb: Public Shared Operator <>(left As StringValues, right As String) As Boolean
  overload: Serious.Abbot.Scripting.StringValues.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Serious.Abbot.Scripting.StringValues.op_Equality(System.String,Serious.Abbot.Scripting.StringValues)
  commentId: M:Serious.Abbot.Scripting.StringValues.op_Equality(System.String,Serious.Abbot.Scripting.StringValues)
  id: op_Equality(System.String,Serious.Abbot.Scripting.StringValues)
  parent: Serious.Abbot.Scripting.StringValues
  langs:
  - csharp
  - vb
  name: Equality(String, StringValues)
  nameWithType: StringValues.Equality(String, StringValues)
  fullName: Serious.Abbot.Scripting.StringValues.Equality(System.String, Serious.Abbot.Scripting.StringValues)
  type: Operator
  source:
    remote:
      path: src/Abbot.Scripting.Interfaces/Http/StringValues.cs
      branch: docs
      repo: https://github.com/aseriousbiz/abbot.git
    id: op_Equality
    path: ../../abbot/src/Abbot.Scripting.Interfaces/Http/StringValues.cs
    startLine: 641
  assemblies:
  - Abbot.Scripting.Interfaces
  namespace: Serious.Abbot.Scripting
  example: []
  syntax:
    content: public static bool operator ==(string left, StringValues right)
    parameters:
    - id: left
      type: System.String
    - id: right
      type: Serious.Abbot.Scripting.StringValues
    return:
      type: System.Boolean
    content.vb: Public Shared Operator =(left As String, right As StringValues) As Boolean
  overload: Serious.Abbot.Scripting.StringValues.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Serious.Abbot.Scripting.StringValues.op_Inequality(System.String,Serious.Abbot.Scripting.StringValues)
  commentId: M:Serious.Abbot.Scripting.StringValues.op_Inequality(System.String,Serious.Abbot.Scripting.StringValues)
  id: op_Inequality(System.String,Serious.Abbot.Scripting.StringValues)
  parent: Serious.Abbot.Scripting.StringValues
  langs:
  - csharp
  - vb
  name: Inequality(String, StringValues)
  nameWithType: StringValues.Inequality(String, StringValues)
  fullName: Serious.Abbot.Scripting.StringValues.Inequality(System.String, Serious.Abbot.Scripting.StringValues)
  type: Operator
  source:
    remote:
      path: src/Abbot.Scripting.Interfaces/Http/StringValues.cs
      branch: docs
      repo: https://github.com/aseriousbiz/abbot.git
    id: op_Inequality
    path: ../../abbot/src/Abbot.Scripting.Interfaces/Http/StringValues.cs
    startLine: 649
  assemblies:
  - Abbot.Scripting.Interfaces
  namespace: Serious.Abbot.Scripting
  summary: "\nDetermines whether the specified <see cref=\"!:System.String\"></see> and <xref href=\"Serious.Abbot.Scripting.StringValues\" data-throw-if-not-resolved=\"false\"></xref> objects have different values.\n"
  example: []
  syntax:
    content: public static bool operator !=(string left, StringValues right)
    parameters:
    - id: left
      type: System.String
      description: The <see cref="!:System.String"></see> to compare.
    - id: right
      type: Serious.Abbot.Scripting.StringValues
      description: The <xref href="Serious.Abbot.Scripting.StringValues" data-throw-if-not-resolved="false"></xref> to compare.
    return:
      type: System.Boolean
      description: <code>true</code> if the value of <code data-dev-comment-type="paramref" class="paramref">left</code> is different to the value of <code data-dev-comment-type="paramref" class="paramref">right</code>; otherwise, <code>false</code>.
    content.vb: Public Shared Operator <>(left As String, right As StringValues) As Boolean
  overload: Serious.Abbot.Scripting.StringValues.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Serious.Abbot.Scripting.StringValues.op_Equality(Serious.Abbot.Scripting.StringValues,System.String[])
  commentId: M:Serious.Abbot.Scripting.StringValues.op_Equality(Serious.Abbot.Scripting.StringValues,System.String[])
  id: op_Equality(Serious.Abbot.Scripting.StringValues,System.String[])
  parent: Serious.Abbot.Scripting.StringValues
  langs:
  - csharp
  - vb
  name: Equality(StringValues, String[])
  nameWithType: StringValues.Equality(StringValues, String[])
  fullName: Serious.Abbot.Scripting.StringValues.Equality(Serious.Abbot.Scripting.StringValues, System.String[])
  type: Operator
  source:
    remote:
      path: src/Abbot.Scripting.Interfaces/Http/StringValues.cs
      branch: docs
      repo: https://github.com/aseriousbiz/abbot.git
    id: op_Equality
    path: ../../abbot/src/Abbot.Scripting.Interfaces/Http/StringValues.cs
    startLine: 652
  assemblies:
  - Abbot.Scripting.Interfaces
  namespace: Serious.Abbot.Scripting
  example: []
  syntax:
    content: public static bool operator ==(StringValues left, string[] right)
    parameters:
    - id: left
      type: Serious.Abbot.Scripting.StringValues
    - id: right
      type: System.String[]
    return:
      type: System.Boolean
    content.vb: Public Shared Operator =(left As StringValues, right As String()) As Boolean
  overload: Serious.Abbot.Scripting.StringValues.op_Equality*
  nameWithType.vb: StringValues.Equality(StringValues, String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Serious.Abbot.Scripting.StringValues.Equality(Serious.Abbot.Scripting.StringValues, System.String())
  name.vb: Equality(StringValues, String())
- uid: Serious.Abbot.Scripting.StringValues.op_Inequality(Serious.Abbot.Scripting.StringValues,System.String[])
  commentId: M:Serious.Abbot.Scripting.StringValues.op_Inequality(Serious.Abbot.Scripting.StringValues,System.String[])
  id: op_Inequality(Serious.Abbot.Scripting.StringValues,System.String[])
  parent: Serious.Abbot.Scripting.StringValues
  langs:
  - csharp
  - vb
  name: Inequality(StringValues, String[])
  nameWithType: StringValues.Inequality(StringValues, String[])
  fullName: Serious.Abbot.Scripting.StringValues.Inequality(Serious.Abbot.Scripting.StringValues, System.String[])
  type: Operator
  source:
    remote:
      path: src/Abbot.Scripting.Interfaces/Http/StringValues.cs
      branch: docs
      repo: https://github.com/aseriousbiz/abbot.git
    id: op_Inequality
    path: ../../abbot/src/Abbot.Scripting.Interfaces/Http/StringValues.cs
    startLine: 660
  assemblies:
  - Abbot.Scripting.Interfaces
  namespace: Serious.Abbot.Scripting
  summary: "\nDetermines whether the specified <xref href=\"Serious.Abbot.Scripting.StringValues\" data-throw-if-not-resolved=\"false\"></xref> and string array have different values.\n"
  example: []
  syntax:
    content: public static bool operator !=(StringValues left, string[] right)
    parameters:
    - id: left
      type: Serious.Abbot.Scripting.StringValues
      description: The <xref href="Serious.Abbot.Scripting.StringValues" data-throw-if-not-resolved="false"></xref> to compare.
    - id: right
      type: System.String[]
      description: The string array to compare.
    return:
      type: System.Boolean
      description: <code>true</code> if the value of <code data-dev-comment-type="paramref" class="paramref">left</code> is different to the value of <code data-dev-comment-type="paramref" class="paramref">right</code>; otherwise, <code>false</code>.
    content.vb: Public Shared Operator <>(left As StringValues, right As String()) As Boolean
  overload: Serious.Abbot.Scripting.StringValues.op_Inequality*
  nameWithType.vb: StringValues.Inequality(StringValues, String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Serious.Abbot.Scripting.StringValues.Inequality(Serious.Abbot.Scripting.StringValues, System.String())
  name.vb: Inequality(StringValues, String())
- uid: Serious.Abbot.Scripting.StringValues.op_Equality(System.String[],Serious.Abbot.Scripting.StringValues)
  commentId: M:Serious.Abbot.Scripting.StringValues.op_Equality(System.String[],Serious.Abbot.Scripting.StringValues)
  id: op_Equality(System.String[],Serious.Abbot.Scripting.StringValues)
  parent: Serious.Abbot.Scripting.StringValues
  langs:
  - csharp
  - vb
  name: Equality(String[], StringValues)
  nameWithType: StringValues.Equality(String[], StringValues)
  fullName: Serious.Abbot.Scripting.StringValues.Equality(System.String[], Serious.Abbot.Scripting.StringValues)
  type: Operator
  source:
    remote:
      path: src/Abbot.Scripting.Interfaces/Http/StringValues.cs
      branch: docs
      repo: https://github.com/aseriousbiz/abbot.git
    id: op_Equality
    path: ../../abbot/src/Abbot.Scripting.Interfaces/Http/StringValues.cs
    startLine: 663
  assemblies:
  - Abbot.Scripting.Interfaces
  namespace: Serious.Abbot.Scripting
  example: []
  syntax:
    content: public static bool operator ==(string[] left, StringValues right)
    parameters:
    - id: left
      type: System.String[]
    - id: right
      type: Serious.Abbot.Scripting.StringValues
    return:
      type: System.Boolean
    content.vb: Public Shared Operator =(left As String(), right As StringValues) As Boolean
  overload: Serious.Abbot.Scripting.StringValues.op_Equality*
  nameWithType.vb: StringValues.Equality(String(), StringValues)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Serious.Abbot.Scripting.StringValues.Equality(System.String(), Serious.Abbot.Scripting.StringValues)
  name.vb: Equality(String(), StringValues)
- uid: Serious.Abbot.Scripting.StringValues.op_Inequality(System.String[],Serious.Abbot.Scripting.StringValues)
  commentId: M:Serious.Abbot.Scripting.StringValues.op_Inequality(System.String[],Serious.Abbot.Scripting.StringValues)
  id: op_Inequality(System.String[],Serious.Abbot.Scripting.StringValues)
  parent: Serious.Abbot.Scripting.StringValues
  langs:
  - csharp
  - vb
  name: Inequality(String[], StringValues)
  nameWithType: StringValues.Inequality(String[], StringValues)
  fullName: Serious.Abbot.Scripting.StringValues.Inequality(System.String[], Serious.Abbot.Scripting.StringValues)
  type: Operator
  source:
    remote:
      path: src/Abbot.Scripting.Interfaces/Http/StringValues.cs
      branch: docs
      repo: https://github.com/aseriousbiz/abbot.git
    id: op_Inequality
    path: ../../abbot/src/Abbot.Scripting.Interfaces/Http/StringValues.cs
    startLine: 671
  assemblies:
  - Abbot.Scripting.Interfaces
  namespace: Serious.Abbot.Scripting
  summary: "\nDetermines whether the specified string array and <xref href=\"Serious.Abbot.Scripting.StringValues\" data-throw-if-not-resolved=\"false\"></xref> have different values.\n"
  example: []
  syntax:
    content: public static bool operator !=(string[] left, StringValues right)
    parameters:
    - id: left
      type: System.String[]
      description: The string array to compare.
    - id: right
      type: Serious.Abbot.Scripting.StringValues
      description: The <xref href="Serious.Abbot.Scripting.StringValues" data-throw-if-not-resolved="false"></xref> to compare.
    return:
      type: System.Boolean
      description: <code>true</code> if the value of <code data-dev-comment-type="paramref" class="paramref">left</code> is different to the value of <code data-dev-comment-type="paramref" class="paramref">right</code>; otherwise, <code>false</code>.
    content.vb: Public Shared Operator <>(left As String(), right As StringValues) As Boolean
  overload: Serious.Abbot.Scripting.StringValues.op_Inequality*
  nameWithType.vb: StringValues.Inequality(String(), StringValues)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Serious.Abbot.Scripting.StringValues.Inequality(System.String(), Serious.Abbot.Scripting.StringValues)
  name.vb: Inequality(String(), StringValues)
- uid: Serious.Abbot.Scripting.StringValues.op_Equality(Serious.Abbot.Scripting.StringValues,System.Object)
  commentId: M:Serious.Abbot.Scripting.StringValues.op_Equality(Serious.Abbot.Scripting.StringValues,System.Object)
  id: op_Equality(Serious.Abbot.Scripting.StringValues,System.Object)
  parent: Serious.Abbot.Scripting.StringValues
  langs:
  - csharp
  - vb
  name: Equality(StringValues, Object)
  nameWithType: StringValues.Equality(StringValues, Object)
  fullName: Serious.Abbot.Scripting.StringValues.Equality(Serious.Abbot.Scripting.StringValues, System.Object)
  type: Operator
  source:
    remote:
      path: src/Abbot.Scripting.Interfaces/Http/StringValues.cs
      branch: docs
      repo: https://github.com/aseriousbiz/abbot.git
    id: op_Equality
    path: ../../abbot/src/Abbot.Scripting.Interfaces/Http/StringValues.cs
    startLine: 680
  assemblies:
  - Abbot.Scripting.Interfaces
  namespace: Serious.Abbot.Scripting
  summary: "\nDetermines whether the specified <xref href=\"Serious.Abbot.Scripting.StringValues\" data-throw-if-not-resolved=\"false\"></xref> and <see cref=\"!:System.Object\"></see>, which must be a\n<xref href=\"Serious.Abbot.Scripting.StringValues\" data-throw-if-not-resolved=\"false\"></xref>, <see cref=\"!:System.String\"></see>, or array of <see cref=\"!:System.String\"></see>, have the same value.\n"
  example: []
  syntax:
    content: public static bool operator ==(StringValues left, object right)
    parameters:
    - id: left
      type: Serious.Abbot.Scripting.StringValues
      description: The <xref href="Serious.Abbot.Scripting.StringValues" data-throw-if-not-resolved="false"></xref> to compare.
    - id: right
      type: System.Object
      description: The <see cref="!:System.Object"></see> to compare.
    return:
      type: System.Boolean
      description: <code>true</code> if the <code data-dev-comment-type="paramref" class="paramref">left</code> object is equal to the <code data-dev-comment-type="paramref" class="paramref">right</code>; otherwise, <code>false</code>.
    content.vb: Public Shared Operator =(left As StringValues, right As Object) As Boolean
  overload: Serious.Abbot.Scripting.StringValues.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Serious.Abbot.Scripting.StringValues.op_Inequality(Serious.Abbot.Scripting.StringValues,System.Object)
  commentId: M:Serious.Abbot.Scripting.StringValues.op_Inequality(Serious.Abbot.Scripting.StringValues,System.Object)
  id: op_Inequality(Serious.Abbot.Scripting.StringValues,System.Object)
  parent: Serious.Abbot.Scripting.StringValues
  langs:
  - csharp
  - vb
  name: Inequality(StringValues, Object)
  nameWithType: StringValues.Inequality(StringValues, Object)
  fullName: Serious.Abbot.Scripting.StringValues.Inequality(Serious.Abbot.Scripting.StringValues, System.Object)
  type: Operator
  source:
    remote:
      path: src/Abbot.Scripting.Interfaces/Http/StringValues.cs
      branch: docs
      repo: https://github.com/aseriousbiz/abbot.git
    id: op_Inequality
    path: ../../abbot/src/Abbot.Scripting.Interfaces/Http/StringValues.cs
    startLine: 689
  assemblies:
  - Abbot.Scripting.Interfaces
  namespace: Serious.Abbot.Scripting
  summary: "\nDetermines whether the specified <xref href=\"Serious.Abbot.Scripting.StringValues\" data-throw-if-not-resolved=\"false\"></xref> and <see cref=\"!:System.Object\"></see>, which must be a\n<xref href=\"Serious.Abbot.Scripting.StringValues\" data-throw-if-not-resolved=\"false\"></xref>, <see cref=\"!:System.String\"></see>, or array of <see cref=\"!:System.String\"></see>, have different values.\n"
  example: []
  syntax:
    content: public static bool operator !=(StringValues left, object right)
    parameters:
    - id: left
      type: Serious.Abbot.Scripting.StringValues
      description: The <xref href="Serious.Abbot.Scripting.StringValues" data-throw-if-not-resolved="false"></xref> to compare.
    - id: right
      type: System.Object
      description: The <see cref="!:System.Object"></see> to compare.
    return:
      type: System.Boolean
      description: <code>true</code> if the <code data-dev-comment-type="paramref" class="paramref">left</code> object is equal to the <code data-dev-comment-type="paramref" class="paramref">right</code>; otherwise, <code>false</code>.
    content.vb: Public Shared Operator <>(left As StringValues, right As Object) As Boolean
  overload: Serious.Abbot.Scripting.StringValues.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Serious.Abbot.Scripting.StringValues.op_Equality(System.Object,Serious.Abbot.Scripting.StringValues)
  commentId: M:Serious.Abbot.Scripting.StringValues.op_Equality(System.Object,Serious.Abbot.Scripting.StringValues)
  id: op_Equality(System.Object,Serious.Abbot.Scripting.StringValues)
  parent: Serious.Abbot.Scripting.StringValues
  langs:
  - csharp
  - vb
  name: Equality(Object, StringValues)
  nameWithType: StringValues.Equality(Object, StringValues)
  fullName: Serious.Abbot.Scripting.StringValues.Equality(System.Object, Serious.Abbot.Scripting.StringValues)
  type: Operator
  source:
    remote:
      path: src/Abbot.Scripting.Interfaces/Http/StringValues.cs
      branch: docs
      repo: https://github.com/aseriousbiz/abbot.git
    id: op_Equality
    path: ../../abbot/src/Abbot.Scripting.Interfaces/Http/StringValues.cs
    startLine: 698
  assemblies:
  - Abbot.Scripting.Interfaces
  namespace: Serious.Abbot.Scripting
  summary: "\nDetermines whether the specified <see cref=\"!:System.Object\"></see>, which must be a\n<xref href=\"Serious.Abbot.Scripting.StringValues\" data-throw-if-not-resolved=\"false\"></xref>, <see cref=\"!:System.String\"></see>, or array of <see cref=\"!:System.String\"></see>, and specified <xref href=\"Serious.Abbot.Scripting.StringValues\" data-throw-if-not-resolved=\"false\"></xref>,  have the same value.\n"
  example: []
  syntax:
    content: public static bool operator ==(object left, StringValues right)
    parameters:
    - id: left
      type: System.Object
      description: The <xref href="Serious.Abbot.Scripting.StringValues" data-throw-if-not-resolved="false"></xref> to compare.
    - id: right
      type: Serious.Abbot.Scripting.StringValues
      description: The <see cref="!:System.Object"></see> to compare.
    return:
      type: System.Boolean
      description: <code>true</code> if the <code data-dev-comment-type="paramref" class="paramref">left</code> object is equal to the <code data-dev-comment-type="paramref" class="paramref">right</code>; otherwise, <code>false</code>.
    content.vb: Public Shared Operator =(left As Object, right As StringValues) As Boolean
  overload: Serious.Abbot.Scripting.StringValues.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Serious.Abbot.Scripting.StringValues.op_Inequality(System.Object,Serious.Abbot.Scripting.StringValues)
  commentId: M:Serious.Abbot.Scripting.StringValues.op_Inequality(System.Object,Serious.Abbot.Scripting.StringValues)
  id: op_Inequality(System.Object,Serious.Abbot.Scripting.StringValues)
  parent: Serious.Abbot.Scripting.StringValues
  langs:
  - csharp
  - vb
  name: Inequality(Object, StringValues)
  nameWithType: StringValues.Inequality(Object, StringValues)
  fullName: Serious.Abbot.Scripting.StringValues.Inequality(System.Object, Serious.Abbot.Scripting.StringValues)
  type: Operator
  source:
    remote:
      path: src/Abbot.Scripting.Interfaces/Http/StringValues.cs
      branch: docs
      repo: https://github.com/aseriousbiz/abbot.git
    id: op_Inequality
    path: ../../abbot/src/Abbot.Scripting.Interfaces/Http/StringValues.cs
    startLine: 706
  assemblies:
  - Abbot.Scripting.Interfaces
  namespace: Serious.Abbot.Scripting
  summary: "\nDetermines whether the specified <see cref=\"!:System.Object\"></see> and <xref href=\"Serious.Abbot.Scripting.StringValues\" data-throw-if-not-resolved=\"false\"></xref> object have the same values.\n"
  example: []
  syntax:
    content: public static bool operator !=(object left, StringValues right)
    parameters:
    - id: left
      type: System.Object
      description: The <see cref="!:System.Object"></see> to compare.
    - id: right
      type: Serious.Abbot.Scripting.StringValues
      description: The <xref href="Serious.Abbot.Scripting.StringValues" data-throw-if-not-resolved="false"></xref> to compare.
    return:
      type: System.Boolean
      description: <code>true</code> if the <code data-dev-comment-type="paramref" class="paramref">left</code> object is equal to the <code data-dev-comment-type="paramref" class="paramref">right</code>; otherwise, <code>false</code>.
    content.vb: Public Shared Operator <>(left As Object, right As StringValues) As Boolean
  overload: Serious.Abbot.Scripting.StringValues.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Serious.Abbot.Scripting.StringValues.Equals(System.Object)
  commentId: M:Serious.Abbot.Scripting.StringValues.Equals(System.Object)
  id: Equals(System.Object)
  parent: Serious.Abbot.Scripting.StringValues
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: StringValues.Equals(Object)
  fullName: Serious.Abbot.Scripting.StringValues.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/Abbot.Scripting.Interfaces/Http/StringValues.cs
      branch: docs
      repo: https://github.com/aseriousbiz/abbot.git
    id: Equals
    path: ../../abbot/src/Abbot.Scripting.Interfaces/Http/StringValues.cs
    startLine: 713
  assemblies:
  - Abbot.Scripting.Interfaces
  namespace: Serious.Abbot.Scripting
  summary: "\nDetermines whether this instance and a specified object have the same value.\n"
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: An object to compare with this object.
    return:
      type: System.Boolean
      description: <code>true</code> if the current object is equal to <code data-dev-comment-type="paramref" class="paramref">obj</code>; otherwise, <code>false</code>.
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overload: Serious.Abbot.Scripting.StringValues.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Serious.Abbot.Scripting.StringValues.GetHashCode
  commentId: M:Serious.Abbot.Scripting.StringValues.GetHashCode
  id: GetHashCode
  parent: Serious.Abbot.Scripting.StringValues
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: StringValues.GetHashCode()
  fullName: Serious.Abbot.Scripting.StringValues.GetHashCode()
  type: Method
  source:
    remote:
      path: src/Abbot.Scripting.Interfaces/Http/StringValues.cs
      branch: docs
      repo: https://github.com/aseriousbiz/abbot.git
    id: GetHashCode
    path: ../../abbot/src/Abbot.Scripting.Interfaces/Http/StringValues.cs
    startLine: 739
  assemblies:
  - Abbot.Scripting.Interfaces
  namespace: Serious.Abbot.Scripting
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
    content.vb: Public Overrides Function GetHashCode As Integer
  overload: Serious.Abbot.Scripting.StringValues.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Serious.Abbot.Scripting
  commentId: N:Serious.Abbot.Scripting
  name: Serious.Abbot.Scripting
  nameWithType: Serious.Abbot.Scripting
  fullName: Serious.Abbot.Scripting
- uid: IList{System.String}
  commentId: '!:IList{System.String}'
  definition: IList`1
  name: IList<String>
  nameWithType: IList<String>
  fullName: IList<System.String>
  nameWithType.vb: IList(Of String)
  fullName.vb: IList(Of System.String)
  name.vb: IList(Of String)
  spec.csharp:
  - uid: IList`1
    name: IList
    nameWithType: IList
    fullName: IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IList`1
    name: IList
    nameWithType: IList
    fullName: IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: IReadOnlyList{System.String}
  commentId: '!:IReadOnlyList{System.String}'
  definition: IReadOnlyList`1
  name: IReadOnlyList<String>
  nameWithType: IReadOnlyList<String>
  fullName: IReadOnlyList<System.String>
  nameWithType.vb: IReadOnlyList(Of String)
  fullName.vb: IReadOnlyList(Of System.String)
  name.vb: IReadOnlyList(Of String)
  spec.csharp:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: IEquatable{Serious.Abbot.Scripting.StringValues}
  commentId: '!:IEquatable{Serious.Abbot.Scripting.StringValues}'
  definition: IEquatable`1
  name: IEquatable<StringValues>
  nameWithType: IEquatable<StringValues>
  fullName: IEquatable<Serious.Abbot.Scripting.StringValues>
  nameWithType.vb: IEquatable(Of StringValues)
  fullName.vb: IEquatable(Of Serious.Abbot.Scripting.StringValues)
  name.vb: IEquatable(Of StringValues)
  spec.csharp:
  - uid: IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Serious.Abbot.Scripting.StringValues
    name: StringValues
    nameWithType: StringValues
    fullName: Serious.Abbot.Scripting.StringValues
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Serious.Abbot.Scripting.StringValues
    name: StringValues
    nameWithType: StringValues
    fullName: Serious.Abbot.Scripting.StringValues
  - name: )
    nameWithType: )
    fullName: )
- uid: IEquatable{System.String}
  commentId: '!:IEquatable{System.String}'
  definition: IEquatable`1
  name: IEquatable<String>
  nameWithType: IEquatable<String>
  fullName: IEquatable<System.String>
  nameWithType.vb: IEquatable(Of String)
  fullName.vb: IEquatable(Of System.String)
  name.vb: IEquatable(Of String)
  spec.csharp:
  - uid: IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: IEquatable{System.String[]}
  commentId: '!:IEquatable{System.String[]}'
  definition: IEquatable`1
  name: IEquatable<String[]>
  nameWithType: IEquatable<String[]>
  fullName: IEquatable<System.String[]>
  nameWithType.vb: IEquatable(Of String())
  fullName.vb: IEquatable(Of System.String())
  name.vb: IEquatable(Of String())
  spec.csharp:
  - uid: IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: IList`1
  commentId: '!:IList`1'
  isExternal: true
  name: IList<>
  nameWithType: IList<>
  fullName: IList<>
  nameWithType.vb: IList(Of )
  fullName.vb: IList(Of )
  name.vb: IList(Of )
  spec.csharp:
  - uid: IList`1
    name: IList
    nameWithType: IList
    fullName: IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IList`1
    name: IList
    nameWithType: IList
    fullName: IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<>
  nameWithType: IReadOnlyList<>
  fullName: IReadOnlyList<>
  nameWithType.vb: IReadOnlyList(Of )
  fullName.vb: IReadOnlyList(Of )
  name.vb: IReadOnlyList(Of )
  spec.csharp:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: IEquatable`1
  isExternal: true
  name: IEquatable<>
  nameWithType: IEquatable<>
  fullName: IEquatable<>
  nameWithType.vb: IEquatable(Of )
  fullName.vb: IEquatable(Of )
  name.vb: IEquatable(Of )
  spec.csharp:
  - uid: IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Serious.Abbot.Scripting.StringValues
  commentId: T:Serious.Abbot.Scripting.StringValues
  parent: Serious.Abbot.Scripting
  name: StringValues
  nameWithType: StringValues
  fullName: Serious.Abbot.Scripting.StringValues
- uid: Serious.Abbot.Scripting.StringValues.#ctor*
  commentId: Overload:Serious.Abbot.Scripting.StringValues.#ctor
  name: StringValues
  nameWithType: StringValues.StringValues
  fullName: Serious.Abbot.Scripting.StringValues.StringValues
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Serious.Abbot.Scripting.StringValues.op_Implicit*
  commentId: Overload:Serious.Abbot.Scripting.StringValues.op_Implicit
  name: Implicit
  nameWithType: StringValues.Implicit
  fullName: Serious.Abbot.Scripting.StringValues.Implicit
  nameWithType.vb: StringValues.Widening
  fullName.vb: Serious.Abbot.Scripting.StringValues.Widening
  name.vb: Widening
- uid: Serious.Abbot.Scripting.StringValues.Empty
  commentId: F:Serious.Abbot.Scripting.StringValues.Empty
  isExternal: true
- uid: Serious.Abbot.Scripting.StringValues.Count*
  commentId: Overload:Serious.Abbot.Scripting.StringValues.Count
  name: Count
  nameWithType: StringValues.Count
  fullName: Serious.Abbot.Scripting.StringValues.Count
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Serious.Abbot.Scripting.StringValues.Item*
  commentId: Overload:Serious.Abbot.Scripting.StringValues.Item
  name: Item
  nameWithType: StringValues.Item
  fullName: Serious.Abbot.Scripting.StringValues.Item
- uid: Serious.Abbot.Scripting.StringValues.ToString*
  commentId: Overload:Serious.Abbot.Scripting.StringValues.ToString
  name: ToString
  nameWithType: StringValues.ToString
  fullName: Serious.Abbot.Scripting.StringValues.ToString
- uid: Serious.Abbot.Scripting.StringValues.ToArray*
  commentId: Overload:Serious.Abbot.Scripting.StringValues.ToArray
  name: ToArray
  nameWithType: StringValues.ToArray
  fullName: Serious.Abbot.Scripting.StringValues.ToArray
- uid: Serious.Abbot.Scripting.StringValues.GetEnumerator*
  commentId: Overload:Serious.Abbot.Scripting.StringValues.GetEnumerator
  name: GetEnumerator
  nameWithType: StringValues.GetEnumerator
  fullName: Serious.Abbot.Scripting.StringValues.GetEnumerator
- uid: Serious.Abbot.Scripting.StringValues.Enumerator
  commentId: T:Serious.Abbot.Scripting.StringValues.Enumerator
  parent: Serious.Abbot.Scripting
  name: StringValues.Enumerator
  nameWithType: StringValues.Enumerator
  fullName: Serious.Abbot.Scripting.StringValues.Enumerator
- uid: Serious.Abbot.Scripting.StringValues.IsNullOrEmpty*
  commentId: Overload:Serious.Abbot.Scripting.StringValues.IsNullOrEmpty
  name: IsNullOrEmpty
  nameWithType: StringValues.IsNullOrEmpty
  fullName: Serious.Abbot.Scripting.StringValues.IsNullOrEmpty
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Serious.Abbot.Scripting.StringValues.Concat*
  commentId: Overload:Serious.Abbot.Scripting.StringValues.Concat
  name: Concat
  nameWithType: StringValues.Concat
  fullName: Serious.Abbot.Scripting.StringValues.Concat
- uid: Serious.Abbot.Scripting.StringValues.Equals*
  commentId: Overload:Serious.Abbot.Scripting.StringValues.Equals
  name: Equals
  nameWithType: StringValues.Equals
  fullName: Serious.Abbot.Scripting.StringValues.Equals
- uid: Serious.Abbot.Scripting.StringValues.op_Equality*
  commentId: Overload:Serious.Abbot.Scripting.StringValues.op_Equality
  name: Equality
  nameWithType: StringValues.Equality
  fullName: Serious.Abbot.Scripting.StringValues.Equality
- uid: Serious.Abbot.Scripting.StringValues.op_Inequality*
  commentId: Overload:Serious.Abbot.Scripting.StringValues.op_Inequality
  name: Inequality
  nameWithType: StringValues.Inequality
  fullName: Serious.Abbot.Scripting.StringValues.Inequality
- uid: Serious.Abbot.Scripting.StringValues.Equals(Serious.Abbot.Scripting.StringValues,System.String)
  commentId: M:Serious.Abbot.Scripting.StringValues.Equals(Serious.Abbot.Scripting.StringValues,System.String)
  isExternal: true
- uid: Serious.Abbot.Scripting.StringValues.Equals(System.String,Serious.Abbot.Scripting.StringValues)
  commentId: M:Serious.Abbot.Scripting.StringValues.Equals(System.String,Serious.Abbot.Scripting.StringValues)
  isExternal: true
- uid: Serious.Abbot.Scripting.StringValues.Equals(Serious.Abbot.Scripting.StringValues,System.String[])
  commentId: M:Serious.Abbot.Scripting.StringValues.Equals(Serious.Abbot.Scripting.StringValues,System.String[])
  isExternal: true
- uid: Serious.Abbot.Scripting.StringValues.Equals(System.String[],Serious.Abbot.Scripting.StringValues)
  commentId: M:Serious.Abbot.Scripting.StringValues.Equals(System.String[],Serious.Abbot.Scripting.StringValues)
  isExternal: true
- uid: System.Object
  commentId: T:System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Serious.Abbot.Scripting.StringValues.GetHashCode*
  commentId: Overload:Serious.Abbot.Scripting.StringValues.GetHashCode
  name: GetHashCode
  nameWithType: StringValues.GetHashCode
  fullName: Serious.Abbot.Scripting.StringValues.GetHashCode
