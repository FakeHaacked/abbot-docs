{
  "guides/chatops/index.html": {
    "href": "guides/chatops/index.html",
    "title": "What are ChatOps? | Abbot Docs",
    "keywords": "What are ChatOps? We say that Abbot is a \"shared command line for your team\", and talk a lot about the \"power of ChatOps\", but what are they? Why do they matter? ChatOps is a way to describe working together to do things by running commands in chat. Teams use ChatOps to do things like merge Pull Requests, get graphs from network appliances, and cheer each other on for doing cool stuff. This is really useful because new people can see how to use all the internal tools by example. When a new person joins a team using Abbot, they can see how that team interacts with the multitude of systems in place. If there's an incident, Abbot can be in #ops along with the rest of the ops team, updating statuses ( @abbot status yellow We are experiencing some delays in the widgetizer ), sending Tweets ( @abbot tweet The widgetizer is back online, sorry for the noise! ), or getting statuses from other services ( @abbot ping widgetizer.ourwebsite.com ). By making common tasks accessible from chat, everyone can see who has run commands, how to run them, and run their own commands. For example, if there's an outage people can see exactly what's happening by watching their teammates interacting with Abbot to solve the problem. Abbot makes it easy to implement your own ChatOps by providing a platform where you can script your own integrations. This allows you and your team to move away from running scripts on your own command line (everyone has them!) and into a shared location where everyone can leverage the tools everyone else has built."
  },
  "guides/hello-world/index.html": {
    "href": "guides/hello-world/index.html",
    "title": "Writing your first Abbot skill | Abbot Docs",
    "keywords": "Writing your first Abbot skill Hello, World (and everyone else!) Let's start by showing Abbot how to say hello. To do this, we'll use the Bot object ( full reference here ) to respond to the channel, as well as to determine what text was entered. Creating Skills First, create a new skill ( C# skill , JavaScript , Python ). The name of the skill is how users will use it in chat. Name the skill hello . Abbot skills must be uniquely named, so if there is already a skill named hello you will need to choose another name. The Description and Usage fields help other Abbot users in chat figure out how to use your skills. Fill in some descriptive text in those fields now. Editing Code Abbot populates new skills with some default code that replies back with the passed in arguments. It should look something like: C# JavaScript Python // Change the code below with the code for your skill! await Bot.ReplyAsync(\"Hello \" + Bot.Arguments); module.exports = (async () => { // We modularize your code in order to run it. // Change the code below with the code for your skill! bot.reply(\"Hello \" + bot.arguments); })(); // Thanks for building with Abbot! # Change the code below with the code for your skill! bot.reply(\"Hello \" + bot.arguments) Go ahead and save the skill so you can test it. Below the editor is an interactive shell. The prompt should say @abbot hello (or @abbot whatever-you-named-the-skill ). You can test the skill by typing \"world\" in the interactive shell. Abbot should respond in the interactive shell by saying \"world\"). Congratulations, you've written your first skill! Of course, this might not be as exciting as you were hoping for, so let's add a few features to make it a little more useful. Working with User-Provided Data Most skills will need to collect some information from the user in chat. The text that the chat user entered is available in the arguments property: In C# the Arguments property is a special collection of words. See Parsing Arguments with C# for more details. In JavaScript, bot.tokenizedArguments contains the arguments as a collection of words, while bot.arguments is a string containing all the arguments the user typed (it does not include the skill name). In Python, bot.tokenized_arguments contais the arguments as a collection of words, while bot.arguments is a string containing all the arguments the user typed (it does not include the skill name). The default code when creating a new skill demonstrates accessing user provided data. A more involved example (writing skills is hard, let's go shopping!) A skill that repeats what you said doesn't seem very useful. Let's try something a little more valuable -- a shared shopping list. Instead of forcing you to set up your own database, Abbot provides an easy-to-use persistence layer called the Brain. There's a full reference of the brain in Abbot's reference documentation , but let's try out some ideas here. If you've left the edit screen, return to your hello skill. Rename the skill to shoppinglist and hit Save to follow along with the guide. Tip When editing a skill, you can save at any time using the keyboard. CMD+S on a mac. CTRL+S on Windows. We'll support this chat interface for our users: @Abbot shoppinglist add item // to add items to the shopping list. @Abbot shoppinglist remove item // to remove items from the shopping list. @Abbot shoppinglist show // to show the items that are on the shopping list. Let's build the interface first. We need to stub out handlers for each of our use cases. We can do that by retrieving the value from the arguments. Stub out three functions (one for each task type) like this: C# JavaScript Python Task Add(string item) { return Bot.ReplyAsync(\"Adding \" + item); } Task Remove(string item) { return Bot.ReplyAsync(\"Removing \" + item); } Task Show() { return Bot.ReplyAsync(\"Show the shopping list\"); } function add(item) { bot.reply(\"Adding \" + item); } function remove(item) { bot.reply(\"Removing \" + item); } function show() { bot.reply(\"Show the shopping list.\"); } def add(item): bot.reply(\"Adding \" + item) def remove(item): bot.reply(\"Removing \" + item) def show(): bot.reply(\"Show the shopping list\") Now we can parse the user's command to see which function to call. To do that, we can deconstruct the arguments into two values, the first word as the \"command\" and the rest of the string as the \"argument\". Put this in at the top of your skill before the methods you stubbed out: C# JavaScript Python var (command, argument) = Bot.Arguments; switch (command.Value) { case \"add\": Add(argument.Value); break; case \"remove\": Remove(argument.Value); break; case \"show\": Show(); break; default: await Bot.ReplyAsync(\"I don't know what to do!\"); break; } When deconstructing the arguments in this way, the first value contains the first word sent by the user. The second value contains the rest of the words sent by the user. If the user only sent one word, the second argument would have a type IMissingArgument and a Value of empty string. The switch statement tells the skill runner which method to run, along with the arguments provided by the user, if applicable. Finally, the skill will reply to the user \"I don't know what to do!\" if no arguments were provided. You can provide a more useful error message on your own, or change the default behavior to something more interesting. const words = bot.arguments.split(\" \"); const command = words.shift(); const userArguments = words.join(\" \"); switch (command) { case \"add\": add(userArguments); break; case \"remove\": remove(userArguments); break; case \"list\": show(); break; default: bot.reply(\"I don't know what to do!\"); } You can see that words contains an array of all of the words sent by the user, and userArguments contains the rest of the line. The case statements tell the skill runner which method to run, along with the arguments provided by the user, if applicable. Finally, the skill will reply to the user \"I don't know what to do!\" if no arguments were provided. You can provide a more useful error message on your own, or change the default behavior to something more interesting. words = args.split(\" \") user_arguments = \" \".join(words[1::]) if words[0] == \"add\": add(user_arguments) elif words[0] == \"remove\": remove(user_arguments) elif words[0] == \"show\": show() else: bot.reply(\"I don't know what to do!\") You can see that words contains an array of all of the words sent by the user, and user_arguments contains the rest of the line. The if statements tell the skill runner which method to run, along with the arguments provided by the user, if applicable. Finally, the skill will reply to the user \"I don't know what to do!\" if no arguments were provided. You can provide a more useful error message on your own, or change the default behavior to something more interesting. We've written enough code that it may make sense to start testing if everything is wired up. In each of Add , Remove , and Show methods, add a line to reply with a message in each method that indicates we're in that method. Once that's done we can test our skill's API before persisting data. To test that, try some commands in the command window like: @Abbot shoppinglist add spaghetti @Abbot shoppinglist add sauce @Abbot shoppinglist show @Abbot shoppinglist remove sauce Assuming everything has been entered correctly, Abbot should return some of the debug statements we entered earlier back into the command window. If there are any errors, the editor screen should be able to highlight them for you. In the rare case that the skill isn't working, and the editor isn't showing any errors, take a look at the JavaScript console. Please let us know if there are any errors here by emailing help@aseriousbusiness.com. We will take a look as soon as we can! Data Persistence Find the method to add an item and change it like so: C# JavaScript Python public async Task<string> Add(string item) { await Bot.Brain.WriteAsync(item, item); return $\"Added {item} to the shopping list.\"; } async function add(item) { await bot.brain.write(item, item); return `Added ${item} to the shopping list.`; } def add(item): bot.brain.write(item, item) return \"Added {} to the shopping list.\".format(item) The first argument of write (or WriteAsync in C#) expects a key, and the second expects a value. Keys must be unique in Abbot (duplicates overwrite the previous value), so we will store the items in our list as keys. Later we can use the value for metadata, like whether or not the item was purchased, or who added the item. For now, let's just use keys. One more thing -- write (or WriteAsync ) acts as an upsert operation. If there is a pre-existing item with a matching key, the method will overwrite that item. Once the item has been added to Abbot's brain, we return a message so that we can report it back to the user later. Next, change the method to remove an item, to look like this: C# JavaScript Python public async Task<string> Remove(string item) { await Bot.Brain.DeleteAsync(item); return $\"Removed {item} from the shopping list.\"; } async function remove(item) { await bot.brain.delete(item); return `Removed ${item} from the shopping list.`; } def remove(item): bot.brain.delete(item) return \"Removed {} from the shopping list.\".format(item) This will allow us to remove items from our list. delete (or DeleteAsync in C#) always expects a key in order to identify what data to remove. It will not raise an exception if the data is not found. Finally, we need a way to list the shopping list. Change the method to show items to match this: C# JavaScript Python public async Task<string> Show() { var response = \"Here's what's on the list:\"; var items = await Bot.Brain.GetKeysAsync(); foreach(var item in items) { response += $\"\\n* {item}\"; } return response; } async function show() { const list = await bot.brain.list(); var response = \"Here's what's on the list: \\n\"; list.forEach(function(item) { response += `* ${item.key} \\n`; }) return response; } def show(): response = \"Here's what's on the list:\" items = bot.brain.list() all_items = [\"* {}\".format(item) for item in items] response += \"\\n\".join(all_items) return response This method will call list (or GetKeysAsync ) to fetch all of the keys in Abbot's brain for this skill, iterate through them, and return the result back to the caller. We format the response here, but could just as easily return a List back to the caller. Now we can parse the user's command and call the correct method to modify the shopping list: C# JavaScript Python var (command, argument) = Bot.Arguments; var output = string.Empty; switch (command.Value) { case \"add\": output = await Add(argument.Value); break; case \"remove\": output = await Remove(argument.Value); break; case \"show\": output = await Show(); break; default: output = \"I don't know what to do!\"; break; } const words = bot.arguments.split(\" \"); const command = words.shift(); const userArguments = words.join(\" \"); var output = \"\"; switch (command) { case \"add\": output = await add(userArguments); break; case \"remove\": output = await remove(userArguments); break; case \"list\": output = await show(); break; default: output = \"I don't know what to do!\"; } words = args.split(\" \") user_arguments = \" \".join(words[1::]) output = \"\" if words[0] == \"add\": output = add(user_arguments) elif words[0] == \"remove\": output = remove(user_arguments) elif words[0] == \"show\": output = show() else: output = \"I don't know what to do!\" As you can see, we create a variable called output and store the output of our method there. Finally, we need to report back to the user -- every skill should return something to your user so that they know it succeeded (or failed, as they sometimes do). To do that, we can simply call the reply method: bot.reply(output) in JavaScript and Python or await Bot.ReplyAsync(output) in C#. And we're done! Try interacting with your skill from Abbot's console. You should be able to add and remove items, as well as view the shopping list. If you save this skill, you can interact with it in chat as well. Wrapping up Here's the entire skill, if you'd like to view the whole thing: C# JavaScript Python // A simple shopping list skill. var (command, argument) = Bot.Arguments; var output = string.Empty; switch (command.Value) { case \"add\": output = await Add(argument.Value); break; case \"remove\": output = await Remove(argument.Value); break; case \"show\": output = await Show(); break; default: output = \"I don't know what to do!\"; break; } await Bot.ReplyAsync(output); public async Task<string> Add(string item) { await Bot.Brain.WriteAsync(item, item); return $\"Added {item} to the shopping list.\"; } public async Task<string> Remove(string item) { await Bot.Brain.DeleteAsync(item); return $\"Removed {item} from the shopping list.\"; } public async Task<string> Show() { var response = \"Here's what's on the list:\"; var items = await Bot.Brain.GetKeysAsync(); foreach(var item in items) { response += $\"\\n* {item}\"; } return response; } // A simple shoppping list skill. const words = bot.arguments.split(\" \"); const command = words.shift(); const userArguments = words.join(\" \"); var output = \"\"; switch (command) { case \"add\": output = await add(userArguments); break; case \"remove\": output = await remove(userArguments); break; case \"list\": output = await show(); break; default: output = \"I don't know what to do!\"; } bot.reply(output); async function add(item) { await bot.brain.write(item, item); return `Added ${item} to the shopping list.`; } async function remove(item) { await bot.brain.delete(item); return `Removed ${item} from the shopping list.`; } async function show() { const list = await bot.brain.list(); var response = \"Here's what's on the list: \\n\"; list.forEach(function(item) { response += `* ${item.key} \\n`; }) return response; } # A simple shopping list skill. words = args.split(\" \") user_arguments = \" \".join(words[1::]) output = \"\" if words[0] == \"add\": output = add(user_arguments) elif words[0] == \"remove\": output = remove(user_arguments) elif words[0] == \"show\": output = show() else: output = \"I don't know what to do!\" bot.reply(output) def add(item): bot.brain.write(item, item) return \"Added {} to the shopping list.\".format(item) def remove(item): bot.brain.delete(item) return \"Removed {} from the shopping list.\".format(item) def show(): response = \"Here's what's on the list: \\n\" items = bot.brain.list() all_items = [\"* {}\".format(item) for item in items] response += \"\\n\".join(all_items) return response Next Steps For a challenge, you could modify this skill to check if data already exists before removing it, or add a quantity field in Value . There are many things you could try! We didn't get an opportunity to work with Secret values in this guide, but if we needed to interact with an external API, they would have been useful here. For now, we'll leave those as a topic for another guide."
  },
  "guides/index.html": {
    "href": "guides/index.html",
    "title": "Getting started with Abbot | Abbot Docs",
    "keywords": "Getting started with Abbot So you've just installed Abbot (congratulations!) and want to write a skill. Abbot tries to make building skills as painless as possible, and offers some convenience methods to you so that you don't have to deal with them. You can write skills in C#, Python, or JavaScript. We are adding new features and language support all the time! To get started... Try the Hello World Guide Unsure which language to start with? Abbot allows you to use all of these languages in a single bot, so you can experiment with each language and see what works best for you. If you really aren't sure, Abbot is built in C#, and it's what we use to build most of our skills. We like using C# for skills because static typing makes it easy to reason about our code, and the editing experience on https://ab.bot is pretty good! Please note that once you save a skill in Abbot's web editor, that skill is live in your chat. You can test locally before saving, if you'd like. More Guides Argument parsing in C# Creating and using List Skills Scheduled Skills and reacting to events with Triggers"
  },
  "guides/known-issues/index.html": {
    "href": "guides/known-issues/index.html",
    "title": "Known Issues | Abbot Docs",
    "keywords": "Known Issues We hope you're having a great time with Abbot. Sometimes you might run into an issue that seems strange, and you aren't sure if something's broken, or working as intended. This is a short list of issues that we're aware of but haven't scheduled to fix immediately. Please let us know if any of these issues impacts you negatively by using the @abbot feedback skill from chat or the bot console. Core Abbot No known issues Skill Editor Delayed replies in skills will return immediately when testing in the Skill Editor on https://ab.bot . This is by design, as we don't maintain an active connection with the editor console on the website. Developers can still use the language-appropriate version of \"reply later\" in the skill editor and expect it to work correctly in chat as long as the delay is set. This impacts Abbot's Bot Console as well. Skill Triggers Skill Triggers may only be attached in channels with more than one participant. When attempting to attach a trigger in a channel with only one participant, the message may be confusing. C# Runtime C# 8 switch expressions with an undeclared type (using var ) will cause the script compiler to crash, which in turn prevents a skill from completing correctly. We have reported the issue upstream to Microsoft . The workaround is to specify a type for the expression. For example, this will crash: var (first, second) = Bot.Arguments; var reply = (first, second) switch { (IMissingArgument, _) => \"Both arguments are missing\", (IMentionArgument, IMissingArgument) => \"You mentioned somebody\", (IMentionArgument, IArgument) => \"You mentioned someone and said more\", _ => \"Dunno what you did\" }; await Bot.ReplyAsync(reply); But this will work: var (first, second) = Bot.Arguments; string reply = (first, second) switch { (IMissingArgument, _) => \"Both arguments are missing\", (IMentionArgument, IMissingArgument) => \"You mentioned somebody\", (IMentionArgument, IArgument) => \"You mentioned someone and said more\", _ => \"Dunno what you did\" }; await Bot.ReplyAsync(reply); Notice that reply is typed as string instead of relying on type inference in the second case. Python Runtime No known issues JavaScript Runtime No known issues"
  },
  "guides/list-skills/index.html": {
    "href": "guides/list-skills/index.html",
    "title": "List Skills | Abbot Docs",
    "keywords": "List Skills List skills are a special kind of skill that are built into Abbot. They are useful if you want to build a skill that returns a random item out of a list every time it is called. Using Abbot, we could easily create a skill to accomplish that task like this: const _ = require('lodash'); let responses = [\"Yes\", \"No\", \"Maybe\", \"I'm not sure, ask again later\"] bot.reply(_.sample(responses)) This works well as long as we don't need to change the list of potential answers. As soon as someone wants to add a new item to the list, it becomes much more complicated. If they have access to Abbot and are comfortable editing code, they could log in to https://ab.bot and change the skill. What if they wanted to add options from chat? The skill would have to be updated to add argument parsing and persistence: const _ = require('lodash'); if (bot.arguments.startsWith('add') { // Add a new response } else if (bot.arguments.startsWith('remove') { // Remove a response } else { // Return a random response let responses = await bot.brain.list(); bot.reply(_.sample(responses)) } This can get complicated quickly! Instead, Abbot makes it very easy to create skills like this on your own, from inside of chat. To create a new list skill in chat, say @abbot custom-list add <the name of your list skill> . In this case, try @abbot custom-list add 8ball (don't worry, list skills don't count as custom skills -- make as many of these as you'd like!). Once Abbot creates the list skill, you can add options with @abbot 8ball add ... , like this: @abbot 8ball add Yes @abbot 8ball add No @abbot 8ball add Maybe @abbot 8ball add Unclear, ask again later To use the skill, simply say @abbot 8ball in any channel where Abbot has been invited, and Abbot will respond with a random selection from the list. You can remove items from Abbot's brain with @abbot 8ball remove and providing the full text of the item to remove. You can always get more help from Abbot in chat by asking for it with @abbot help list . Note that you can store both text and image links in Abbot lists. Image links will be treated as they are any time they're pasted into chat (which usually means the image will be displayed). So, get your favorite collections of gifs together and have fun making some list skills for you and your team!"
  },
  "guides/parsing-arguments-c-sharp/index.html": {
    "href": "guides/parsing-arguments-c-sharp/index.html",
    "title": "Parsing Arguments with C# | Abbot Docs",
    "keywords": "Parsing Arguments with C# Most Bot skills have a pretty simple format for the arguments passed to the skill. But even a simple format can require a fairly complex regular expression to parse correctly. Let's follow an example to see what I mean. Suppose we have a skill for managing another user's favorite songs with the following usage pattern. @abbot fave {@mention} add {song} [description] This skill allows the user to add a favorite song for another user with an optional description. The following set of chat transcripts show how the skill might be used. @haack: @abbot fave @paul add Dynamite @abbot: I've added `Dynamite` to @paul's list of favorite songs. So far so good. Now it gets a bit trickier if we want to add a favorite song with a description. @haack: @abbot fave @paul add Chandelier Because Sia speaks to me @abbot: I've added `Chandelier` with the description `Because Sia speaks to me` to @paul's list of favorite songs Which part is the song and which part is the description? Since descriptions tend to be sentences, it might make sense to have the first word after the command be the title, and the rest be the description. Until you run into the following example: @haack: @abbot fave @paul add Baby Shark Makes me dance @abbot: I've added `Baby` with the description `Shark Makes me dance` to @paul's list of favorite songs In this case, \"Baby Shark\" is the song. So what we need to do is allow quoting an argument. @haack: @abbot fave @paul add \"Baby Shark\" Makes me dance @abbot: I've added `Baby Shark` with the description `Makes me dance` to @paul's list of favorite songs. Ah! That's better. To get this better behavior, we need to write a somewhat complicated regular expression. It wouldn't be terrible, but as we handle more and more conditions, it would get more and more complicated. Fortunately, Abbot handles this sort of argument parsing for you. If you write a C# skill, you have access to the arguments via the Arguments property. Arguments is a custom collection with some interesting properties to make argument handling easier. It contains a tokenized set of incoming arguments that already handles quoting and whitespace. So in the case of the argument @paul add \"Baby Shark\" Makes me dance (the skill name is always omitted from the arguments), Bot.Arguments would contain the collection: [0]: @paul [1]: add [2]: Baby Shark [3]: Makes [4]: me [5]: dance \"Now wait a minute,\" you say. \"Don't we want the description , the fourth argument, to have the rest of the words after the song.\" Right you are! But in the Arguments collection, the fourth element in the collection is \"Makes\" and not the full description. This is a problem. Not to worry, Abbot has a solution for this. Arguments implements tuple deconstruction in a special way. Suppose you know that you will have at most four arguments for a skill. You can deconstruct the arguments into a tuple like so. var (cmdArg, mentionArg, songArg, descriptionArg) = Bot.Arguments; If there are more than four arguments, the remaining arguments are captured in the last tuple parameter, in this case descriptionArg . If you're familiar with JavaScript, this is a lot like rest parameters . Even though the remaining arguments are captured in descriptionArg (which is what we want in this case), you can still cast descriptionArg to IArguments to access each token that made up the description, if you needed to for some reason. If there are less than four arguments, then the last argument will be of type IMissingArgument . So let's put this all together. var (cmdArg, mentionArg, songArg, descriptionArg) = Bot.Arguments; if (cmdArg.Value is \"add\") { if (!(mentionArg is IMentionArgument mention)) { await Bot.ReplyAsync(\"Please mention someone whose favorite song this is.\"); return; } if (songArg is IMissingArgument) { await Bot.ReplyAsync(\"Please mention someone whose favorite song this is.\"); return; } // Some magic here to save the favorite song... var response = descriptionArg is IMissingArgument ? $\"I've added `{songArg.Value}` to {mention.Mentioned}'s list of favorite songs.\" : $\"I've added `{songArg.Value}` with the description `{descriptionArg.Value}` to {mention.Mentioned}'s list of favorite songs.\"; await Bot.ReplyAsync(response); return; } The rest of the code is left as an exercise for the reader. A few things to note. At the moment, we only support deconstructing up to a four-tuple. We can easily add a five-tuple or six-tuple in the future. But in most cases, four is enough. And if it's not, you can still deconstruct that fourth argument by casting it to IArguments . If an argument is a mention, you can cast it to IMentionArgument to access information about the mentioned user. Mentions are also in the Mentions collection. Also, if the default argument parsing doesn't work for you, you can always access the full arguments with Bot.Arguments.Value . Python and JavaScript skills also receive the arguments as a collection in bot.tokenized_arguments and bot.tokenizedArguments respectively. They don't have the same deconstructors that the C# code does, but mainly because those languages already have similar list operations. For more about writing skills for Abbot, check out the Getting Started Guides ."
  },
  "guides/reference/index.html": {
    "href": "guides/reference/index.html",
    "title": "Abbot Reference Documentation | Abbot Docs",
    "keywords": "Abbot Reference Documentation The Bot Object Bot.Id C# bot.id Python, JavaScript The identifier for the Bot. This can be used to test if a user has mentioned the bot (by comparing Mention.Id and Bot.Id for equality). Bot.Arguments C# bot.arguments Python, JavaScript args Python The text that the user entered when calling the skill. This does not include the name of the skill. In C#, this will be a special collection of parsed arguments. Access the Value property to get the full text as a string. Bot.IsChat C# bot.is_chat Python bot.isChat JavaScript Set to true if the message came from chat or the Bot Console. False if it came from a trigger. Bot.IsRequest C# bot.is_request Python bot.isRequest JavaScript True if the message comes from either a Scheduled Trigger or an HTTP Trigger. Otherwise, set to false. Bot.Brain C# bot.brain Python, JavaScript The interface to Abbot's storage system. See Managing Data section for more. Bot.Code C# bot.code Python, JavaScript The code of the skill. This is used for running the skill and should be considered an Internal variable. Be careful with this! Bot.From C# bot.from_user Python bot.from JavaScript The Id and Name of the user making the request. Only populated when Bot.IsChat is true. Bot.Mentions C# bot.mentions Python, JavaScript An array of Mention objects extracted from the entered text. Bot.Request C# bot.request Python, JavaScript Information about the request sent to the bot, when the bot is activated by either a Scheduled or HTTP Trigger. This may be null. Bot.Request.HttpMethod : The HTTP method sent to the Trigger. This should currently always be POST . Bot.Request.RawBody : The raw body of the request, if it exists. Bot.Request.ContentType : The content type of the request. Bot.Request.IsJson : True if the content type is json. Otherwise false. Bot.Request.IsForm : True if this is a form submission. Otherwise false. Bot.Request.Headers : A JSON collection of the request headers. Bot.Request.Form : The form data. Only populated if IsForm is true. Bot.Request.Query : The querystring sent with the request, if one was present. Bot.Secrets C# bot.secrets Python, JavaScript The interface to any skill secrets that might be set. See Managing Secrets for more. Bot.ReplyAsync(response) C# bot.reply(response) Python, JavaScript The method skills must use to send responses back to the chat. This may be called multiple times. Bot.ReplyLaterAsync(response, delay_in_seconds) C# bot.reply_later(response, delay_in_seconds) Python bot.replyLater(response, delay_in_seconds) JavaScript Send a response back to the chat after delay_in_seconds has elapsed. This may be called multiple times, and is the preferred method for delaying responses. Managing Data C# Abbot includes a simple persistence layer that makes it easy for your skills to store and retrieve data. You can access Abbot's brain with Bot.Brain . The methods that are included in Bot.Brain are: WriteAsync(Key, Value) : Save Value with a key of Key . GetAsync(Key) : Get the value stored with key Key . GetKeysAsync(Key?) : Get all keys that match Key . Key can be empty and will return all keys. note: This is not currently implemented in Python or JavaScript. GetAllAsync(Key?) : Get all records where keys match Key . This supports fuzzy matching, so partial matches will be returned. Key can be empty and will return all keys and values. note: This is not currently implemented in Python or JavaScript. DeleteAsync(Key) : Delete the value stored with key Key . Managing Secrets C# Secrets are a special kind of data, and can be used to store things like authentication tokens or other configuration items that you prefer to exclude from your skill. Secrets can only be set from https://ab.bot , and are specific to a single skill. Since developers can read data from your secrets, be careful about the data that you store there -- passwords should never be stored in a Secret, for example. Secrets can be read using a similar interface to Abbot's brain: GetAsync(Key) : Get the Secret with the key of Key The Mentions Collection C# Bot.Mentions contains a list of all mentions that were found in the user's text. The ToString() method on each mention will return an appropriately formatted username mention to the chat system (for example, <@U92394113> in Slack). Skill developers can also use any of the other fields available in the Mention object in their skills. The Mention Object C# The Mention object has these fields: Id : The id of the person or bot that was mentioned. This id is unique to the chat platform that was being used, and is not an Abbot user id. UserName : The user name of the person or bot that was mentioned. This name is determined by the chat platform, and is not an Abbot user name. Name : The display name of the person or bot that was mentioned. This is set by the user in the chat platform and may change over time. If you are writing skills that rely on the Mention object, the Id is the only reliable field to use in keys and for comparison. Managing Data Python, JavaScript Abbot includes a simple persistence layer that makes it easy for your skills to store and retrieve data. You can access Abbot's brain with bot.brain . The methods that are included in bot.brain are: write(key, value) : Save value with a key of key . get(key) : Get the value stored with key key . list() : Get all records. delete(key) : Delete the value stored with key key . Managing Secrets Python, JavaScript Secrets are a special kind of data, and can be used to store things like authentication tokens or other configuration items that you prefer to exclude from your skill. Secrets can only be set from https://ab.bot , and are specific to a single skill. Since developers can read data from your secrets, be careful about the data that you store there -- passwords should never be stored in a Secret, for example. Secrets can be read using a similar interface to Abbot's brain (but with bot.secrets ): get(key) : Get the Secret with the key of key The Mentions Collection Python, JavaScript bot.mentions contains a list of all mentions that were found in the user's text. The toString() or str method on each mention will return an appropriately formatted username mention to the chat system (for example, <@U92394113> in Slack). Skill developers can also use any of the other fields available in the Mention object in their skills. The Mention Object Python, JavaScript The Mention object has these fields: id : The id of the person or bot that was mentioned. This id is unique to the chat platform that was being used, and is not an Abbot user id. user_name Python , userName JavaScript : The user name of the person or bot that was mentioned. This name is determined by the chat platform, and is not an Abbot user name. name : The display name of the person or bot that was mentioned. This is set by the user in the chat platform and may change over time. If you are writing skills that rely on the Mention object, the id is the only reliable field to use in keys and for comparison."
  },
  "guides/triggers/index.html": {
    "href": "guides/triggers/index.html",
    "title": "Responding to external events with Triggers | Abbot Docs",
    "keywords": "Responding to external events with Triggers Abbot can respond to much more than just events raised from chat. Triggers give Abbot superpowers -- Http Triggers allow Abbot to respond to events from the outside world; and Scheduled Triggers let Abbot execute Skills on a schedule you define. Triggers are part of what make Abbot such a powerful tool for you and your team -- your automation is no longer limited to what happens inside of chat when you use Abbot Triggers. Triggers are attached to channels inside of chat. Skills must already be created in order to attach a Trigger to a channel, but don't worry; you can always update your code after a Trigger has been attached. Http Triggers Http Triggers allow Abbot to react to events from the outside world. When an Http Trigger is attached to an Abbot Skill, a URL unique to that Skill and channel is generated. The URL that is created by the attach Skill contains all the information that Abbot needs to know in order to deliver data to your Skill. To attach an Http Trigger to your skill, first navigate to the specific channel in chat where you want the Trigger output to be sent. Attach the Skill to the channel by saying @abbot attach <skillname> where skillname is the name of the skill you'd like to attach. For example, if you had a skill called gong that you wanted to trigger every time your sales-tracking system recorded a sale, you'd type @abbot attach gong . Once you've told Abbot that you want to attach a Trigger to the channel, it will respond with a link sending you to the Trigger management page. Clicking the link will take you to the Trigger management page. The Trigger Management page The Trigger Management page is where you can see all the triggers attached to your Skill (both Http and Scheduled Triggers), as well as the channels those Triggers are attached to. There isn't much to configure for Http Triggers -- you can update the description to help your teammates understand what the Trigger will be used for. Beyond that, you can see who added the Trigger, when they added it, and most importantly, the secret URL for the Trigger. Clicking the URL will copy it to your clipboard. Abbot is configured to only accept POST events for Triggers, although that may change in the future. You can post any data you'd like to that endpoint, and your Skill will run. What sort of things can you do with an Http Trigger? Well, anything! But we've found the best use cases involve reacting to events and data from the outside world. Http Triggers can recieve webhooks from other systems, and your skill code can access the data that's posted to the endpoint. Using Abbot's reply mechanism from your skill will send text into the channel where the trigger is attached. In the case of our gong Skill, we could parse the JSON that's posted to the Trigger to get some data about a deal that closed and post it into the channel, or notify a user that their deal is finally done. It's up to you! You can use the full power of an Abbot skill to do anything you'd like (including passing more information on to a third service). Scheduled Triggers Scheduled Triggers let you set a schedule for Abbot to run Skills on your behalf. Skills run in this way can do everything that ordinary skills can do. In order to set up a Scheduled Trigger, use the schdule command. Let's repurpose the gong skill from above to tell us the time every ten minutes (changing the code for the skill will be an exercise left for you). In order to schedule the skill, first join the channel where the output should be sent. Once there, say @abbot schedule gong . Abbot will reply with a link to the Trigger management page like before (in fact, it's the same page as before -- all your triggers are managed here). The details for the Scheduled Trigger do require more information than when using Http Triggers. Namely, what schedule the Trigger should use to run. The management page will say something like \"The channel #your-amazing-channel receives replies when gong is triggered on the schedule: Never\". If you click on the \"Edit\" button, a modal will pop up; allowing you to choose the schedule in which to run your skill. Please note: all schedules use UTC. Time zones are hard, and we are still working on a nice interface for dealing with them. For now, you'll need to do a little mental math if you want something to happen at a specific time locally. In the Cron Schedule area, you can choose the frequency in which your skills will run. We've prefilled the most common options we think you'll want, along with some configuration; but you can provide your own cron schedule if you would like. We don't allow any skills to execute more than once per 10 minutes right now, although that may change in the future. The Arguments section is where you can put any additional information to be sent to your skill. If people used the gong skill by saying @abbot gong some words and things you could add some words and things to the Arguments section and get the same result. This is optional, but useful if your skill expects some configuration flags. Finally, you can add a description to your Trigger in order to keep track of what the Trigger is meant to accomplish. Since Scheduled Triggers are attached to regular Abbot Skills, you can use them to schedule any kind of skill you can imagine, from checking the latest lottery numbers to generating a daily update report to share with your team. Your imagination is the only limit! We use Triggers heavily as part of developing and running Abbot; more and more of our own infrastructure is built on top of Abbot because of how easy it is for us to develop, deploy, and maintain our functionality. We hope that you'll enjoy using Triggers as well. Please let us know if you have any questions, complaints, or feature suggestions for Triggers by using the @abbot feedback skill in chat or in the Bot Console. Good luck and happy shipping!"
  },
  "index.html": {
    "href": "index.html",
    "title": "Help | Abbot Docs",
    "keywords": "Help If you're having a bot emergency, contact us at help@aseriousbusiness.com . You can also join us in Discord . We work in Pacific Time and are in there consistently most days. Check out our latest video Getting Started The easiest way to get started with Abbot is by following our Getting Started guide. For a more concise, reference-based view; please refer to Abbot's reference documentation . Frequently Asked Questions What languages are supported? You can write skills using C# 9, Python 3.7, or JavaScript in Node 10. Later we will support WASM assemblies in a paid version of Abbot. What is the right way to save data from my script? Abbot provides a convenient way to save data from your skills. Please take a look at Abbot's reference documentation for details on how to use Abbot's brain. How do skills deal with sensitive data? There is a Secret management system built in to Abbot. This allows your script to work with sensitive data without including in your script. Please note that developers can still get access to the data since we provide a scripting environment; so you should never store passwords in Secrets (and you should be careful about who you grant access to Abbot). The easiest way to see how to access Secrets in an Abbot skill is via Abbot's reference documentation . What Libraries are available in my skills? We provide a set of pre-installed libraries for you to use in your skills. Custom dependencies will be available later in a paid version of Abbot. Preloaded C# libraries All libraries available in .NET Core 3.1 NodaTime 3.0.3 NewtonSoft.Json 12.0.3 HtmlAgilityPack 1.11.28 Preloaded JavaScript libraries Lodash 4.17.19 Axios 0.19.2 Preloaded Python libraries Requests 2.24.0 Pandas 1.0.5 Numpy 1.19.4 BeautifulSoup 4.9.3 Soupsieve 2.0.1 I'm experiencing an issue, and would like to report it! First, we're sorry that you're running into issues. Please take a look at our list of known issues to make sure we're not already aware of it. If not, please drop us a line at help@aseriousbusiness.com or send us feedback directly using @abbot feedback from chat or the Bot Console."
  },
  "reference/csharp/index.html": {
    "href": "reference/csharp/index.html",
    "title": "C# Bot Reference Overview | Abbot Docs",
    "keywords": "C# Bot Reference Overview Abbot skills written in C# receive a Bot property of type IBot . Bot is the starting point to access everything Abbot provides. Parsing arguments Abbot provides assistance in parsing arguments with a special implementation of IArguments . For more details, be sure to read the guide Parsing Arguments with C# . Managing Data Abbot includes a simple persistence layer that makes it easy for your skills to store and retrieve data. You can access Abbot's brain with Bot.Brain . The methods that are included in Bot.Brain are: WriteAsync(Key, Value) : Save Value with a key of Key . GetAsync(Key) : Get the value stored with key Key . GetKeysAsync(Key?) : Get all keys that match Key . Key can be empty and will return all keys. note: This is not currently implemented in Python or JavaScript. GetAllAsync(Key?) : Get all records where keys match Key . This supports fuzzy matching, so partial matches will be returned. Key can be empty and will return all keys and values. note: This is not currently implemented in Python or JavaScript. DeleteAsync(Key) : Delete the value stored with key Key . Managing Secrets Secrets are a special kind of data, and can be used to store things like authentication tokens or other configuration items that you prefer to exclude from your skill. Secrets can only be set from https://ab.bot , and are specific to a single skill. Since developers can read data from your secrets, be careful about the data that you store there -- passwords should never be stored in a Secret, for example. Secrets can be read using a similar interface to Abbot's brain: GetAsync(Key) : Get the Secret with the key of Key The Mentions Collection Bot.Mentions contains a list of all mentions that were found in the user's text. The ToString() method on each mention will return an appropriately formatted username mention to the chat system (for example, <@U92394113> in Slack). Skill developers can also use any of the other fields available in the Mention object in their skills. The Mention Object The Mention object has these fields: Id : The id of the person or bot that was mentioned. This id is unique to the chat platform that was being used, and is not an Abbot user id. UserName : The user name of the person or bot that was mentioned. This name is determined by the chat platform, and is not an Abbot user name. Name : The display name of the person or bot that was mentioned. This is set by the user in the chat platform and may change over time. If you are writing skills that rely on the Mention object, the Id is the only reliable field to use in keys and for comparison. Preloaded C# libraries All libraries available in .NET Core 3.1 NodaTime 3.0.3 Octokit.net NewtonSoft.Json 12.0.3 HtmlAgilityPack 1.11.28 To use these libraries, just add the respective using statement at the top of the skill. For example, the deploy package shows an example of using Octokit."
  },
  "reference/csharp/Serious.Abbot.Scripting.ArgumentExtensions.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.ArgumentExtensions.html",
    "title": "Class ArgumentExtensions | Abbot Docs",
    "keywords": "Class ArgumentExtensions Extensions to IArgument to make it easier to work with arguments. Inheritance Object ArgumentExtensions Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public static class ArgumentExtensions : Object Methods ToInt32(IArgument) Parses the argument value as an Int32 and returns the value or null if it is not an integer. Declaration public static Nullable<int> ToInt32(this IArgument argument) Parameters Type Name Description IArgument argument The argument. Returns Type Description Nullable < Int32 > ToLocalTime(IArgument) Parses the argument value and returns it as a LocalTime if it matches the format, otherwise returns null. Declaration public static Nullable<LocalTime> ToLocalTime(this IArgument argument) Parameters Type Name Description IArgument argument The argument. Returns Type Description Nullable < NodaTime.LocalTime > ToTimeZone(LocalTime, DateTimeZone, DateTimeZone) Converts this local time into a zoned date time for the target time zone. It assumes today as the starting point. If the local time is before today, then it returns the time the next day. Declaration public static ZonedDateTime ToTimeZone(this LocalTime localTime, DateTimeZone source, DateTimeZone target) Parameters Type Name Description NodaTime.LocalTime localTime The local time. NodaTime.DateTimeZone source The source time zone the local time is assumed to be in. NodaTime.DateTimeZone target The target time zone. Returns Type Description NodaTime.ZonedDateTime"
  },
  "reference/csharp/Serious.Abbot.Scripting.BotHttpClientExtensions.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.BotHttpClientExtensions.html",
    "title": "Class BotHttpClientExtensions | Abbot Docs",
    "keywords": "Class BotHttpClientExtensions Extension methods on IBotHttpClient to make it easy to request JSON. Inheritance Object BotHttpClientExtensions Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public static class BotHttpClientExtensions : Object Methods DeleteJsonAsync(IBotHttpClient, String) Makes an HTTP DELETE request for the url and returns the JSON as a dynamic object. Declaration public static Task<dynamic> DeleteJsonAsync(this IBotHttpClient httpClient, string url) Parameters Type Name Description IBotHttpClient httpClient The IBotHttpClient instance String url The url to request Returns Type Description Task < Object > A dynamic object with the structure of the returned JSON DeleteJsonAsync(IBotHttpClient, String, Headers) Makes an HTTP DELETE request for the url and returns the JSON as a dynamic object. Declaration public static Task<dynamic> DeleteJsonAsync(this IBotHttpClient httpClient, string url, Headers headers) Parameters Type Name Description IBotHttpClient httpClient The IBotHttpClient instance String url The url to request Headers headers The HTTP headers to send Returns Type Description Task < Object > A dynamic object with the structure of the returned JSON DeleteJsonAsync(IBotHttpClient, Uri) Makes an HTTP DELETE request for the url and returns the JSON as a dynamic object. Declaration public static Task<dynamic> DeleteJsonAsync(this IBotHttpClient httpClient, Uri url) Parameters Type Name Description IBotHttpClient httpClient The IBotHttpClient instance Uri url The url to request Returns Type Description Task < Object > A dynamic object with the structure of the returned JSON DeleteJsonAsync(IBotHttpClient, Uri, Headers) Makes an HTTP DELETE request for the url and returns the JSON as a dynamic object. Declaration public static Task<dynamic> DeleteJsonAsync(this IBotHttpClient httpClient, Uri url, Headers headers) Parameters Type Name Description IBotHttpClient httpClient The IBotHttpClient instance Uri url The url to request Headers headers The HTTP headers to send Returns Type Description Task < Object > A dynamic object with the structure of the returned JSON GetJsonAsync(IBotHttpClient, String) Makes an HTTP GET request for the url and returns the JSON as a dynamic object. Declaration public static Task<dynamic> GetJsonAsync(this IBotHttpClient httpClient, string url) Parameters Type Name Description IBotHttpClient httpClient The IBotHttpClient instance String url The url to request Returns Type Description Task < Object > A dynamic object with the structure of the returned JSON GetJsonAsync(IBotHttpClient, String, Headers) Makes an HTTP GET request for the url and returns the JSON as a dynamic object. Declaration public static Task<dynamic> GetJsonAsync(this IBotHttpClient httpClient, string url, Headers headers) Parameters Type Name Description IBotHttpClient httpClient The IBotHttpClient instance String url The url to request Headers headers The HTTP headers to send Returns Type Description Task < Object > A dynamic object with the structure of the returned JSON GetJsonAsync(IBotHttpClient, Uri) Makes an HTTP GET request for the url and returns the JSON as a dynamic object. Declaration public static Task<dynamic> GetJsonAsync(this IBotHttpClient httpClient, Uri url) Parameters Type Name Description IBotHttpClient httpClient The IBotHttpClient instance Uri url The url to request Returns Type Description Task < Object > A dynamic object with the structure of the returned JSON GetJsonAsync(IBotHttpClient, Uri, Headers) Makes an HTTP GET request for the url and returns the JSON as a dynamic object. Declaration public static Task<dynamic> GetJsonAsync(this IBotHttpClient httpClient, Uri url, Headers headers) Parameters Type Name Description IBotHttpClient httpClient The IBotHttpClient instance Uri url The url to request Headers headers The HTTP headers to send Returns Type Description Task < Object > A dynamic object with the structure of the returned JSON PostJsonAsync(IBotHttpClient, String, Object) Makes an HTTP POST request for the url, sends the content as JSON, and returns the JSON as a dynamic object. Declaration public static Task<dynamic> PostJsonAsync(this IBotHttpClient httpClient, string url, object content) Parameters Type Name Description IBotHttpClient httpClient The IBotHttpClient instance String url The url to request Object content The content to send as JSON Returns Type Description Task < Object > A dynamic object with the structure of the returned JSON PostJsonAsync(IBotHttpClient, String, Object, Headers) Makes an HTTP POST request for the url, sends the content as JSON, and returns the JSON as a dynamic object. Declaration public static Task<dynamic> PostJsonAsync(this IBotHttpClient httpClient, string url, object content, Headers headers) Parameters Type Name Description IBotHttpClient httpClient The IBotHttpClient instance String url The url to request Object content The content to send as JSON Headers headers The HTTP headers to send Returns Type Description Task < Object > A dynamic object with the structure of the returned JSON PostJsonAsync(IBotHttpClient, Uri, Object) Makes an HTTP POST request for the url, sends the content as JSON, and returns the JSON as a dynamic object. Declaration public static Task<dynamic> PostJsonAsync(this IBotHttpClient httpClient, Uri url, object content) Parameters Type Name Description IBotHttpClient httpClient The IBotHttpClient instance Uri url The url to request Object content The content to send as JSON Returns Type Description Task < Object > A dynamic object with the structure of the returned JSON PostJsonAsync(IBotHttpClient, Uri, Object, Headers) Makes an HTTP POST request for the url, sends the content as JSON, and returns the JSON as a dynamic object. Declaration public static Task<dynamic> PostJsonAsync(this IBotHttpClient httpClient, Uri url, object content, Headers headers) Parameters Type Name Description IBotHttpClient httpClient The IBotHttpClient instance Uri url The url to request Object content The content to send as JSON Headers headers The HTTP headers to send Returns Type Description Task < Object > A dynamic object with the structure of the returned JSON PutJsonAsync(IBotHttpClient, String, Object) Makes an HTTP PUT request for the url, sends the content as JSON, and returns the JSON as a dynamic object. Declaration public static Task<dynamic> PutJsonAsync(this IBotHttpClient httpClient, string url, object content) Parameters Type Name Description IBotHttpClient httpClient The IBotHttpClient instance String url The url to request Object content The content to send as JSON Returns Type Description Task < Object > A dynamic object with the structure of the returned JSON PutJsonAsync(IBotHttpClient, String, Object, Headers) Makes an HTTP PUT request for the url, sends the content as JSON, and returns the JSON as a dynamic object. Declaration public static Task<dynamic> PutJsonAsync(this IBotHttpClient httpClient, string url, object content, Headers headers) Parameters Type Name Description IBotHttpClient httpClient The IBotHttpClient instance String url The url to request Object content The content to send as JSON Headers headers The HTTP headers to send Returns Type Description Task < Object > A dynamic object with the structure of the returned JSON PutJsonAsync(IBotHttpClient, Uri, Object) Makes an HTTP PUT request for the url, sends the content as JSON, and returns the JSON as a dynamic object. Declaration public static Task<dynamic> PutJsonAsync(this IBotHttpClient httpClient, Uri url, object content) Parameters Type Name Description IBotHttpClient httpClient The IBotHttpClient instance Uri url The url to request Object content The content to send as JSON Returns Type Description Task < Object > A dynamic object with the structure of the returned JSON PutJsonAsync(IBotHttpClient, Uri, Object, Headers) Makes an HTTP PUT request for the url, sends the content as JSON, and returns the JSON as a dynamic object. Declaration public static Task<dynamic> PutJsonAsync(this IBotHttpClient httpClient, Uri url, object content, Headers headers) Parameters Type Name Description IBotHttpClient httpClient The IBotHttpClient instance Uri url The url to request Object content The content to send as JSON Headers headers The HTTP headers to send Returns Type Description Task < Object > A dynamic object with the structure of the returned JSON"
  },
  "reference/csharp/Serious.Abbot.Scripting.BrainExtensions.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.BrainExtensions.html",
    "title": "Class BrainExtensions | Abbot Docs",
    "keywords": "Class BrainExtensions Useful methods for working with Abbot's brain. Inheritance Object BrainExtensions Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public static class BrainExtensions : Object Methods AddToHashSetAsync<T>(IBrain, String, T) Adds the specified item to a HashSet{T} stored in the brain associated with the specified key . Declaration public static Task<bool> AddToHashSetAsync<T>(this IBrain brain, string key, T item) Parameters Type Name Description IBrain brain The brain. String key The key of the list. T item The item to add to the list. Returns Type Description Task < Boolean > true if the element is added to the HashSet{T} ; false if the element is already present. Type Parameters Name Description T Remarks This retrieves the set stored for the key. If there is none, it creates one. Then adds the item to the set, and then writes the set back to the brain. AddToListAsync<T>(IBrain, String, T) Adds the specified item to a List{T} stored in the brain. Behind the scenes this retrieves the list stored for the key. If there is none, it creates one. Then adds the item to the list, and then writes the list back to the brain. Declaration public static Task<List<T>> AddToListAsync<T>(this IBrain brain, string key, T item) Parameters Type Name Description IBrain brain The brain. String key The key of the list. T item The item to add to the list. Returns Type Description Task < List <T>> Returns the List{T} associated to the key with the added item . Type Parameters Name Description T GetHashSetAsync<T>(IBrain, String) Gets a HashSet{T} from the brain. If it does not exist, returns a new HashSet{T} . Declaration public static Task<HashSet<T>> GetHashSetAsync<T>(this IBrain brain, string key) Parameters Type Name Description IBrain brain The brain String key The key Returns Type Description Task < HashSet <T>> Returns the HashSet{T} associated with the key Type Parameters Name Description T GetListAsync<T>(IBrain, String) Gets a List{T} from the brain. If it does not exist, returns a new List{T} . Declaration public static Task<List<T>> GetListAsync<T>(this IBrain brain, string key) Parameters Type Name Description IBrain brain The brain String key The key Returns Type Description Task < List <T>> Returns the List{T} associated with the key Type Parameters Name Description T RemoveAtFromListAsync<T>(IBrain, String, Int32) Removes an item by index from a List{T} stored in the brain associated with the specified key . Declaration public static Task<bool> RemoveAtFromListAsync<T>(this IBrain brain, string key, int index) Parameters Type Name Description IBrain brain The brain. String key The key of the list. Int32 index The item to add to the list. Returns Type Description Task < Boolean > true if item is successfully removed; otherwise, false . This method also returns false if index is out of range. Type Parameters Name Description T Remarks This retrieves the list stored for the key. If there is none, it returns immediately. Otherwise it removes the specified item from the list. RemoveFromHashSetAsync<T>(IBrain, String, T) Removes the specified item from a HashSet{T} stored in the brain associated with the specified key . Declaration public static Task<bool> RemoveFromHashSetAsync<T>(this IBrain brain, string key, T item) Parameters Type Name Description IBrain brain The brain. String key The key of the list. T item The item to remove from the list. Returns Type Description Task < Boolean > true if item is successfully removed; otherwise, false . This method also returns false if the item is not in the HashSet{T} . Type Parameters Name Description T Remarks This retrieves the set stored for the key. If there is none, it returns false. Then it removes the item from the set and writes the set back to the brain. RemoveFromListAsync<T>(IBrain, String, T) Removes the specified item from a List{T} stored in the brain associated with the specified key . Declaration public static Task<bool> RemoveFromListAsync<T>(this IBrain brain, string key, T item) Parameters Type Name Description IBrain brain The brain. String key The key of the list. T item The item to add to the list. Returns Type Description Task < Boolean > true if item is successfully removed; otherwise, false . This method also returns false if item was not found in the List. Type Parameters Name Description T Remarks This retrieves the list stored for the key. If there is none, it returns immediately. Otherwise it removes the specified item from the list."
  },
  "reference/csharp/Serious.Abbot.Scripting.ChatUserExtensions.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.ChatUserExtensions.html",
    "title": "Class ChatUserExtensions | Abbot Docs",
    "keywords": "Class ChatUserExtensions Useful extensions to the IChatUser . Inheritance Object ChatUserExtensions Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public static class ChatUserExtensions : Object Methods GetLocalTime(IChatUser) Retrieve the current local time for the chat user. Declaration public static Nullable<LocalTime> GetLocalTime(this IChatUser chatUser) Parameters Type Name Description IChatUser chatUser The user. Returns Type Description Nullable < NodaTime.LocalTime > The local time if the timezone is known, otherwise returns null."
  },
  "reference/csharp/Serious.Abbot.Scripting.Headers.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.Headers.html",
    "title": "Class Headers | Abbot Docs",
    "keywords": "Class Headers A collection of HTTP headers Inheritance Object Headers Implements IEnumerable < KeyValuePair < String , String >> IEnumerable Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public class Headers : Object, IEnumerable<KeyValuePair<string, string>>, IEnumerable Constructors Headers() Constructs an instance of Headers Declaration public Headers() Headers(IDictionary<String, String>) Constructs an instance of Headers Declaration public Headers(IDictionary<string, string> headers) Parameters Type Name Description IDictionary < String , String > headers A dictionary of initial header values Properties Item[String] Retrieves the header with the specified key. Declaration public string this[string key] { get; set; } Parameters Type Name Description String key The header name Property Value Type Description String Methods Add(String, String) Adds a header to the collection. Declaration public void Add(string key, string value) Parameters Type Name Description String key Header name String value Header value CopyTo(HttpRequestHeaders) Copies the headers into a HttpRequestHeaders collection. Declaration public void CopyTo(HttpRequestHeaders headers) Parameters Type Name Description HttpRequestHeaders headers GetEnumerator() Gets the enumerator for this collection. Declaration public IEnumerator<KeyValuePair<string, string>> GetEnumerator() Returns Type Description IEnumerator < KeyValuePair < String , String >> The enumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "reference/csharp/Serious.Abbot.Scripting.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.html",
    "title": "Namespace Serious.Abbot.Scripting | Abbot Docs",
    "keywords": "Namespace Serious.Abbot.Scripting Classes ArgumentExtensions Extensions to IArgument to make it easier to work with arguments. BotHttpClientExtensions Extension methods on IBotHttpClient to make it easy to request JSON. BrainExtensions Useful methods for working with Abbot's brain. ChatUserExtensions Useful extensions to the IChatUser . Headers A collection of HTTP headers PlatformType The type of chat platform. ReplyExtensions Set of extension methods to make replying easier. StringValues Represents zero/null, one, or many strings in an efficient way. StringValues.Enumerator Enumerates the string values of a StringValues . Interfaces IArgument Represents one argument tokenized from the Arguments property. IArguments Represents the arguments to the skill parsed into a collection of tokens. IBot It's Abbot! Provides a set of services and information for your bot skill. IBotHttpClient A simple HTTP client to make requests. IBrain Used to store information specific to your bot skill. IChatUser A user on the chat platform. ICoordinate Represents a geographic coordinate. IFormCollection Contains the parsed form values. IHttpCollection Represents Http collections such as query string, form, and headers. IHttpTriggerEvent Represents an incoming http request that triggered a skill. IHttpTriggerResponse Gives some control over the response to an HTTP trigger request. Useful for webhooks. ILocation A geo-coded location. IMentionArgument Represents an argument that is a user mention. IMissingArgument Represents a missing argument. IOriginalArgument Represents one argument tokenized from the Arguments property with the original potentially quoted value stored.. IPlatformUser A user on the chat platform. IQueryCollection The HttpRequest query string collection IRequestHeaders Represents the collection of Request Headers as defined in RFC 2616. IResponseHeaders Represents the collection of Response Headers as defined in RFC 2616. IScriptGlobals The global object for all user skills. ISecrets Used to retrieve secrets stored for the skill. ISkillDataItem Represents a piece of data stored for a skill. IVersionInfo Provides info about Abbot."
  },
  "reference/csharp/Serious.Abbot.Scripting.IArgument.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.IArgument.html",
    "title": "Interface IArgument | Abbot Docs",
    "keywords": "Interface IArgument Represents one argument tokenized from the Arguments property. Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public interface IArgument Properties Value The value of the argument sans quotes. Declaration string Value { get; } Property Value Type Description String Extension Methods ArgumentExtensions.ToLocalTime(IArgument) ArgumentExtensions.ToInt32(IArgument)"
  },
  "reference/csharp/Serious.Abbot.Scripting.IArguments.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.IArguments.html",
    "title": "Interface IArguments | Abbot Docs",
    "keywords": "Interface IArguments Represents the arguments to the skill parsed into a collection of tokens. Inherited Members IArgument.Value Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public interface IArguments : IReadOnlyList<IArgument>, IEnumerable<IArgument>, IEnumerable, IReadOnlyCollection<IArgument>, IArgument Methods Deconstruct(out IArgument, out IArgument) Deconstructs the arguments into two arguments. If there are less than two arguments, this will return IMissingArgument for the missing arguments. If there are more than two arguments, the last argument will be a concatenation of the remaining arguments. Declaration void Deconstruct(out IArgument first, out IArgument second) Parameters Type Name Description IArgument first The first argument. IArgument second The second argument. Deconstruct(out IArgument, out IArgument, out IArgument) Deconstructs the arguments into three arguments. If there are less than three arguments, this will return IMissingArgument for the missing arguments. If there are more than three arguments, the last argument will be a concatenation of the remaining arguments. Declaration void Deconstruct(out IArgument first, out IArgument second, out IArgument third) Parameters Type Name Description IArgument first The first argument. IArgument second The second argument. IArgument third The third argument. Deconstruct(out IArgument, out IArgument, out IArgument, out IArgument) Deconstructs the arguments into four arguments. If there are less than four arguments, this will return IMissingArgument for the missing arguments. If there are more than four arguments, the last argument will be a concatenation of the remaining arguments. Declaration void Deconstruct(out IArgument first, out IArgument second, out IArgument third, out IArgument fourth) Parameters Type Name Description IArgument first The first argument. IArgument second The second argument. IArgument third The third argument. IArgument fourth The fourth argument."
  },
  "reference/csharp/Serious.Abbot.Scripting.IBot.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.IBot.html",
    "title": "Interface IBot | Abbot Docs",
    "keywords": "Interface IBot It's Abbot! Provides a set of services and information for your bot skill. Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public interface IBot Properties Arguments The arguments supplied to the skill. Does not include the skill name. Declaration IArguments Arguments { get; } Property Value Type Description IArguments Brain Stores information specific to your bot skill. Declaration IBrain Brain { get; } Property Value Type Description IBrain From The user that invoked the skill. Declaration IChatUser From { get; } Property Value Type Description IChatUser Http A convenience service for making HTTP requests. Declaration IBotHttpClient Http { get; } Property Value Type Description IBotHttpClient Id The platform specific identifier for the bot. For example, in Slack this is the Slack User Id. Declaration string Id { get; } Property Value Type Description String IsChat If true, the skill is responding to a chat message. Declaration bool IsChat { get; } Property Value Type Description Boolean IsRequest If true, the skill is responding to an HTTP trigger request. The request information can be accessed via the Request property. Declaration bool IsRequest { get; } Property Value Type Description Boolean Mentions The mentioned users (if any). Declaration IReadOnlyList<IChatUser> Mentions { get; } Property Value Type Description IReadOnlyList < IChatUser > Name The name of the Bot. Typically Abbot, but the bot can be renamed in your chat platform settings. Declaration string Name { get; } Property Value Type Description String PlatformId The ID of the team or organization on the platform. For example, the Slack team id. Declaration string PlatformId { get; } Property Value Type Description String PlatformType The platform the skill is running on such as Slack or Teams. Declaration PlatformType PlatformType { get; } Property Value Type Description PlatformType Request If IsRequest is true, then the skill is responding to an HTTP trigger request (instead of a chat message) and this property is populated with the incoming request information. Declaration IHttpTriggerEvent Request { get; } Property Value Type Description IHttpTriggerEvent Response Sets properties of the HTTP response when the skill is called by an HTTP trigger request. Properties may only be set when IsRequest is true. Declaration IHttpTriggerResponse Response { get; } Property Value Type Description IHttpTriggerResponse Room The room (or channel) name this skill is responding to. Declaration string Room { get; } Property Value Type Description String Secrets Retrieves secrets needed by your skill such as API tokens, etc. Secrets are set in the Skill Editor. Declaration ISecrets Secrets { get; } Property Value Type Description ISecrets SkillName The name of the skill. Declaration string SkillName { get; } Property Value Type Description String SkillUrl The URL to the skill editor for the skill. Declaration Uri SkillUrl { get; } Property Value Type Description Uri TimeZone The system timezone of the bot. Declaration DateTimeZone TimeZone { get; } Property Value Type Description NodaTime.DateTimeZone Utilities A useful grab bag of utility methods for C# skill authors. Declaration IUtilities Utilities { get; } Property Value Type Description IUtilities VersionInfo Gets information about the version of Abbot the skill is running on. Declaration IVersionInfo VersionInfo { get; } Property Value Type Description IVersionInfo Methods ReplyAsync(String) Sends a reply to the chat. Declaration Task ReplyAsync(string text) Parameters Type Name Description String text The reply message. Returns Type Description Task ReplyLaterAsync(String, Int64) Sends the reply later. Declaration Task ReplyLaterAsync(string text, long delayInSeconds) Parameters Type Name Description String text The reply message. Int64 delayInSeconds How long to wait before the reply shows up. Returns Type Description Task ReplyLaterAsync(String, TimeSpan) Sends the reply later. Declaration Task ReplyLaterAsync(string text, TimeSpan timeSpan) Parameters Type Name Description String text The reply message. TimeSpan timeSpan How long to wait before the reply shows up. Returns Type Description Task ReplyTableAsync<T>(IEnumerable<T>) Replies with the collection as a nicely formatted text table. Declaration Task ReplyTableAsync<T>(IEnumerable<T> items) Parameters Type Name Description IEnumerable <T> items The items to print out Returns Type Description Task Type Parameters Name Description T Remarks Uses the properties of T for the columns. Each item in items is a row."
  },
  "reference/csharp/Serious.Abbot.Scripting.IBotHttpClient.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.IBotHttpClient.html",
    "title": "Interface IBotHttpClient | Abbot Docs",
    "keywords": "Interface IBotHttpClient A simple HTTP client to make requests. Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public interface IBotHttpClient Methods ScrapeAllAsync(Uri, String) Requests the specified url and returns an HtmlAgilityPack.HtmlNode with all sections of the HTML that match the selector. This uses the HtmlAgilityPack under the hood. Declaration Task<IReadOnlyList<HtmlNode>> ScrapeAllAsync(Uri url, string selector) Parameters Type Name Description Uri url String selector Returns Type Description Task < IReadOnlyList < HtmlAgilityPack.HtmlNode >> An HtmlAgilityPack.HtmlNode with the section of the web page. ScrapeAsync(Uri, String) Requests the specified url and returns an HtmlAgilityPack.HtmlNode with the first section of the HTML that matches the selector. This uses the HtmlAgilityPack under the hood. Declaration Task<HtmlNode> ScrapeAsync(Uri url, string selector) Parameters Type Name Description Uri url String selector Returns Type Description Task < HtmlAgilityPack.HtmlNode > An HtmlAgilityPack.HtmlNode with the section of the web page. SendJsonAsync(Uri, HttpMethod, Object, Headers) Makes an HTTP request sending the optional content and returns JSON as a dynamic object. Declaration Task<dynamic> SendJsonAsync(Uri url, HttpMethod httpMethod, object content, Headers headers) Parameters Type Name Description Uri url The url to request HttpMethod httpMethod The HTTP method of the request Object content The content to send as JSON Headers headers The HTTP headers to send Returns Type Description Task < Object > A dynamic object with the structure of the returned JSON Extension Methods BotHttpClientExtensions.GetJsonAsync(IBotHttpClient, String) BotHttpClientExtensions.GetJsonAsync(IBotHttpClient, Uri) BotHttpClientExtensions.GetJsonAsync(IBotHttpClient, String, Headers) BotHttpClientExtensions.GetJsonAsync(IBotHttpClient, Uri, Headers) BotHttpClientExtensions.PostJsonAsync(IBotHttpClient, String, Object) BotHttpClientExtensions.PostJsonAsync(IBotHttpClient, Uri, Object) BotHttpClientExtensions.PostJsonAsync(IBotHttpClient, String, Object, Headers) BotHttpClientExtensions.PostJsonAsync(IBotHttpClient, Uri, Object, Headers) BotHttpClientExtensions.PutJsonAsync(IBotHttpClient, String, Object) BotHttpClientExtensions.PutJsonAsync(IBotHttpClient, Uri, Object) BotHttpClientExtensions.PutJsonAsync(IBotHttpClient, String, Object, Headers) BotHttpClientExtensions.PutJsonAsync(IBotHttpClient, Uri, Object, Headers) BotHttpClientExtensions.DeleteJsonAsync(IBotHttpClient, String) BotHttpClientExtensions.DeleteJsonAsync(IBotHttpClient, Uri) BotHttpClientExtensions.DeleteJsonAsync(IBotHttpClient, String, Headers) BotHttpClientExtensions.DeleteJsonAsync(IBotHttpClient, Uri, Headers)"
  },
  "reference/csharp/Serious.Abbot.Scripting.IBrain.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.IBrain.html",
    "title": "Interface IBrain | Abbot Docs",
    "keywords": "Interface IBrain Used to store information specific to your bot skill. Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public interface IBrain Methods DeleteAsync(String) Deletes the stored item associated with the key. Declaration Task DeleteAsync(string key) Parameters Type Name Description String key key of the stored item to delete. Returns Type Description Task A task that represents the work queued to execute. GetAllAsync(String) Retrieves all the values Declaration Task<IReadOnlyList<ISkillDataItem>> GetAllAsync(string fuzzyKeyFilter = null) Parameters Type Name Description String fuzzyKeyFilter An optional fuzzy filter used to filter values Returns Type Description Task < IReadOnlyList < ISkillDataItem >> A task with all the stored data for this skill. GetAsAsync<T>(String) Gets an item from the brain and casts it to T . Returns null if it does not exist. Declaration Task<T> GetAsAsync<T>(string key) Parameters Type Name Description String key key of the item to read. Returns Type Description Task <T> A task with the stored value associated with the key. Type Parameters Name Description T GetAsAsync<T>(String, T) Gets an item from the brain and casts it to T . Returns defaultValue if it does not exist. Declaration Task<T> GetAsAsync<T>(string key, T defaultValue) Parameters Type Name Description String key key of the item to read. T defaultValue The value to return if the key is missing from storage. Returns Type Description Task <T> A task with the stored value associated with the key. Type Parameters Name Description T GetAsync(String) Reads a storage item from the brain. Declaration Task<dynamic> GetAsync(string key) Parameters Type Name Description String key key of the item to read. Returns Type Description Task < Object > A task with the stored value associated with the key. GetKeysAsync(String) Retrieves all of the stored keys. Declaration Task<IReadOnlyList<string>> GetKeysAsync(string fuzzyKeyFilter = null) Parameters Type Name Description String fuzzyKeyFilter Returns Type Description Task < IReadOnlyList < String >> A task with a list of all stored keys. WriteAsync(String, Object) Writes the specified value to the brain. It overwrites an existing item. Declaration Task WriteAsync(string key, object value) Parameters Type Name Description String key key of the item to store. Object value The item to store. Returns Type Description Task A task that represents the work queued to execute. Extension Methods BrainExtensions.AddToListAsync<T>(IBrain, String, T) BrainExtensions.AddToHashSetAsync<T>(IBrain, String, T) BrainExtensions.RemoveFromListAsync<T>(IBrain, String, T) BrainExtensions.RemoveAtFromListAsync<T>(IBrain, String, Int32) BrainExtensions.RemoveFromHashSetAsync<T>(IBrain, String, T) BrainExtensions.GetListAsync<T>(IBrain, String) BrainExtensions.GetHashSetAsync<T>(IBrain, String)"
  },
  "reference/csharp/Serious.Abbot.Scripting.IChatUser.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.IChatUser.html",
    "title": "Interface IChatUser | Abbot Docs",
    "keywords": "Interface IChatUser A user on the chat platform. Inherited Members IPlatformUser.Id IPlatformUser.UserName IPlatformUser.Name Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public interface IChatUser : IPlatformUser Properties Location The location of the user, if anything is known about their location. Declaration ILocation Location { get; } Property Value Type Description ILocation TimeZone The timezone for the location. Declaration DateTimeZone TimeZone { get; } Property Value Type Description NodaTime.DateTimeZone Extension Methods ChatUserExtensions.GetLocalTime(IChatUser) ReplyExtensions.Format(IChatUser)"
  },
  "reference/csharp/Serious.Abbot.Scripting.ICoordinate.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.ICoordinate.html",
    "title": "Interface ICoordinate | Abbot Docs",
    "keywords": "Interface ICoordinate Represents a geographic coordinate. Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public interface ICoordinate Properties Latitude The latitude. Those are the lines that are the belt of the earth. Declaration double Latitude { get; set; } Property Value Type Description Double Longitude The longitude. Those are the pin stripes of the earth. Declaration double Longitude { get; set; } Property Value Type Description Double Methods Deconstruct(out Double, out Double) Deconstructs a coordinate into its latitude and longitude. Declaration void Deconstruct(out double latitude, out double longitude) Parameters Type Name Description Double latitude The latitude. Double longitude The longitude."
  },
  "reference/csharp/Serious.Abbot.Scripting.IFormCollection.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.IFormCollection.html",
    "title": "Interface IFormCollection | Abbot Docs",
    "keywords": "Interface IFormCollection Contains the parsed form values. Inherited Members IHttpCollection.ContainsKey(String) IHttpCollection.TryGetValue(String, StringValues) IHttpCollection.Keys IHttpCollection.Values Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public interface IFormCollection : IHttpCollection, IReadOnlyCollection<KeyValuePair<string, StringValues>>, IEnumerable<KeyValuePair<string, StringValues>>, IEnumerable Properties Item[String] Gets the value with the specified key. Declaration StringValues this[string key] { get; } Parameters Type Name Description String key The key of the value to get. Property Value Type Description StringValues The element with the specified key, or Empty if the key is not present. Remarks IHttpCollection has a different indexer contract than IDictionary{TKey,TValue} , as it will return StringValues.Empty for missing entries rather than throwing an Exception. Exceptions Type Condition ArgumentNullException key is null."
  },
  "reference/csharp/Serious.Abbot.Scripting.IHttpCollection.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.IHttpCollection.html",
    "title": "Interface IHttpCollection | Abbot Docs",
    "keywords": "Interface IHttpCollection Represents Http collections such as query string, form, and headers. Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public interface IHttpCollection : IReadOnlyCollection<KeyValuePair<string, StringValues>>, IEnumerable<KeyValuePair<string, StringValues>>, IEnumerable Properties Keys Gets an ICollection<T> containing the keys of the IHttpCollection . Declaration ICollection<string> Keys { get; } Property Value Type Description ICollection < String > An ICollection<T> containing the keys of the object that implements IHttpCollection . Values Gets an ICollection<T> containing the values of the IHttpCollection . Declaration ICollection<StringValues> Values { get; } Property Value Type Description ICollection < StringValues > An ICollection<T> containing the values of the object that implements IHttpCollection . Methods ContainsKey(String) Determines whether the IHttpCollection contains an element with the specified key. Declaration bool ContainsKey(string key) Parameters Type Name Description String key The key to locate in the IHttpCollection . Returns Type Description Boolean true if the IHttpCollection contains an element with the key; otherwise, false. Exceptions Type Condition ArgumentNullException key is null. TryGetValue(String, out StringValues) Gets the value associated with the specified key. Declaration bool TryGetValue(string key, out StringValues value) Parameters Type Name Description String key The key of the value to get. StringValues value The key of the value to get. When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized. Returns Type Description Boolean true if the object that implements IHttpCollection contains an element with the specified key; otherwise, false. Exceptions Type Condition ArgumentNullException key is null."
  },
  "reference/csharp/Serious.Abbot.Scripting.IHttpTriggerEvent.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.IHttpTriggerEvent.html",
    "title": "Interface IHttpTriggerEvent | Abbot Docs",
    "keywords": "Interface IHttpTriggerEvent Represents an incoming http request that triggered a skill. Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public interface IHttpTriggerEvent Properties ContentType The content type of the body, if any. Declaration string ContentType { get; } Property Value Type Description String Form The request body as a form. Declaration IFormCollection Form { get; } Property Value Type Description IFormCollection Headers The incoming request headers. Declaration IRequestHeaders Headers { get; } Property Value Type Description IRequestHeaders HttpMethod The HTTP Method of the request. Declaration HttpMethod HttpMethod { get; } Property Value Type Description HttpMethod IsForm Returns true if this request contains a form body as determined by the content type. Declaration bool IsForm { get; } Property Value Type Description Boolean IsJson Returns true if this request contains a Json body as determined by the content type. Declaration bool IsJson { get; } Property Value Type Description Boolean Query The query string parameters as a collection. Declaration IQueryCollection Query { get; } Property Value Type Description IQueryCollection RawBody The raw body of the HTTP request. Declaration string RawBody { get; } Property Value Type Description String Url The skill's trigger URL that triggered this event. Declaration Uri Url { get; } Property Value Type Description Uri Methods DeserializeBody() Deserializes the incoming request body into a dynamic object. Declaration dynamic DeserializeBody() Returns Type Description Object The incoming request body deserialized as a dynamic object. Exceptions Type Condition InvalidOperationException Thrown if the request is not Json. Check the IsJson property first. DeserializeBodyAs<T>() Deserializes the incoming request body into the specified type. Declaration T DeserializeBodyAs<T>() Returns Type Description T An instance of the type T or null. Type Parameters Name Description T The type to deserialize to. Exceptions Type Condition InvalidOperationException Thrown if the request is not Json. Check the IsJson property first."
  },
  "reference/csharp/Serious.Abbot.Scripting.IHttpTriggerResponse.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.IHttpTriggerResponse.html",
    "title": "Interface IHttpTriggerResponse | Abbot Docs",
    "keywords": "Interface IHttpTriggerResponse Gives some control over the response to an HTTP trigger request. Useful for webhooks. Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public interface IHttpTriggerResponse Properties Content The content to return as the body of the response. This will be serialized as JSON. Cannot be set if RawContent is set. Declaration object Content { get; set; } Property Value Type Description Object ContentType The content type to use in the response. If null, Abbot will choose the best content type using content negotiation. Declaration string ContentType { get; set; } Property Value Type Description String Headers Represents the collection of Request Headers as defined in RFC 2616 that should be sent in the response to the HTTP trigger request. Declaration IResponseHeaders Headers { get; } Property Value Type Description IResponseHeaders RawContent The raw content to return as the body of the response. Cannot be set if Content is set. Declaration string RawContent { get; set; } Property Value Type Description String"
  },
  "reference/csharp/Serious.Abbot.Scripting.ILocation.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.ILocation.html",
    "title": "Interface ILocation | Abbot Docs",
    "keywords": "Interface ILocation A geo-coded location. Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public interface ILocation Properties Coordinate The coordinates of the location. Declaration ICoordinate Coordinate { get; } Property Value Type Description ICoordinate FormattedAddress The formatted address for the location. Declaration string FormattedAddress { get; } Property Value Type Description String"
  },
  "reference/csharp/Serious.Abbot.Scripting.IMentionArgument.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.IMentionArgument.html",
    "title": "Interface IMentionArgument | Abbot Docs",
    "keywords": "Interface IMentionArgument Represents an argument that is a user mention. Inherited Members IArgument.Value Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public interface IMentionArgument : IArgument Properties Mentioned The mentioned user. Declaration IChatUser Mentioned { get; } Property Value Type Description IChatUser Extension Methods ArgumentExtensions.ToLocalTime(IArgument) ArgumentExtensions.ToInt32(IArgument)"
  },
  "reference/csharp/Serious.Abbot.Scripting.IMissingArgument.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.IMissingArgument.html",
    "title": "Interface IMissingArgument | Abbot Docs",
    "keywords": "Interface IMissingArgument Represents a missing argument. Inherited Members IArgument.Value Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public interface IMissingArgument : IArgument Extension Methods ArgumentExtensions.ToLocalTime(IArgument) ArgumentExtensions.ToInt32(IArgument)"
  },
  "reference/csharp/Serious.Abbot.Scripting.IOriginalArgument.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.IOriginalArgument.html",
    "title": "Interface IOriginalArgument | Abbot Docs",
    "keywords": "Interface IOriginalArgument Represents one argument tokenized from the Arguments property with the original potentially quoted value stored.. Inherited Members IArgument.Value Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public interface IOriginalArgument : IArgument Properties OriginalText The original value of the argument, which may include quotes if it was quoted. Declaration string OriginalText { get; } Property Value Type Description String Extension Methods ArgumentExtensions.ToLocalTime(IArgument) ArgumentExtensions.ToInt32(IArgument)"
  },
  "reference/csharp/Serious.Abbot.Scripting.IPlatformUser.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.IPlatformUser.html",
    "title": "Interface IPlatformUser | Abbot Docs",
    "keywords": "Interface IPlatformUser A user on the chat platform. Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public interface IPlatformUser Properties Id The ID of the user on their chat platform. Declaration string Id { get; } Property Value Type Description String Name The display name for the user if known. Otherwise the username. Declaration string Name { get; } Property Value Type Description String UserName The username for the user on the platform. Declaration string UserName { get; } Property Value Type Description String"
  },
  "reference/csharp/Serious.Abbot.Scripting.IQueryCollection.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.IQueryCollection.html",
    "title": "Interface IQueryCollection | Abbot Docs",
    "keywords": "Interface IQueryCollection The HttpRequest query string collection Inherited Members IHttpCollection.ContainsKey(String) IHttpCollection.TryGetValue(String, StringValues) IHttpCollection.Keys IHttpCollection.Values Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public interface IQueryCollection : IHttpCollection, IReadOnlyCollection<KeyValuePair<string, StringValues>>, IEnumerable<KeyValuePair<string, StringValues>>, IEnumerable Properties Item[String] Gets the value with the specified key. Declaration StringValues this[string key] { get; } Parameters Type Name Description String key The key of the value to get. Property Value Type Description StringValues The element with the specified key, or StringValues.Empty if the key is not present. Remarks IHttpCollection has a different indexer contract than IDictionary<TKey,TValue> , as it will return StringValues.Empty for missing entries rather than throwing an Exception. Exceptions Type Condition ArgumentNullException key is null."
  },
  "reference/csharp/Serious.Abbot.Scripting.IRequestHeaders.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.IRequestHeaders.html",
    "title": "Interface IRequestHeaders | Abbot Docs",
    "keywords": "Interface IRequestHeaders Represents the collection of Request Headers as defined in RFC 2616. Inherited Members IHttpCollection.ContainsKey(String) IHttpCollection.TryGetValue(String, StringValues) IHttpCollection.Keys IHttpCollection.Values Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public interface IRequestHeaders : IHttpCollection, IReadOnlyCollection<KeyValuePair<string, StringValues>>, IEnumerable<KeyValuePair<string, StringValues>>, IEnumerable Properties Accept Gets the value of the Accept request HTTP header. This header advertises which content types, expressed as MIME types, the client is able to understand. Declaration StringValues Accept { get; } Property Value Type Description StringValues Item[String] Gets the value with the specified key. Declaration StringValues this[string key] { get; } Parameters Type Name Description String key The key of the value to get. Property Value Type Description StringValues The element with the specified key, or StringValues.Empty if the key is not present. Remarks IHttpCollection has a different indexer contract than IDictionary<TKey,TValue> , as it will return StringValues.Empty for missing entries rather than throwing an Exception. Exceptions Type Condition ArgumentNullException key is null. Origin The Origin request header indicates where a request originates from. It doesn't include any path information, just the server name Declaration StringValues Origin { get; } Property Value Type Description StringValues Referrer Gets or sets the value of the Referer header. The address of the previous web page from which a link to the currently requested page was followed. This is not required to be set by a client. Declaration StringValues Referrer { get; } Property Value Type Description StringValues UserAgent Gets the User-Agent header. This is a characteristic string that allows the network protocol peers to identify the application type, operating system, software vendor or software version of the requesting software user agent. Declaration StringValues UserAgent { get; } Property Value Type Description StringValues WebHookRequestCallback The WebHook-Request-Callback header is OPTIONAL and augments the WebHook-Request-Origin header. It allows the delivery target to grant send permission asynchronously, via a simple HTTPS callback. Declaration StringValues WebHookRequestCallback { get; } Property Value Type Description StringValues WebHookRequestOrigin Sent to request permission to deliver a webhook from the specified origin. This is part of the HTTP 1.1 Web Hooks for Event Delivery - Version 1.0.1 specification: https://github.com/cloudevents/spec/blob/v1.0.1/http-webhook.md Declaration StringValues WebHookRequestOrigin { get; } Property Value Type Description StringValues WebHookRequestRate Sent to request permission to deliver a webhook at the specified rate. The rate is an integer indicating the number of requests per minute. This is part of the HTTP 1.1 Web Hooks for Event Delivery - Version 1.0.1 specification: https://github.com/cloudevents/spec/blob/v1.0.1/http-webhook.md Declaration Nullable<int> WebHookRequestRate { get; } Property Value Type Description Nullable < Int32 >"
  },
  "reference/csharp/Serious.Abbot.Scripting.IResponseHeaders.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.IResponseHeaders.html",
    "title": "Interface IResponseHeaders | Abbot Docs",
    "keywords": "Interface IResponseHeaders Represents the collection of Response Headers as defined in RFC 2616. Inherited Members IHttpCollection.ContainsKey(String) IHttpCollection.TryGetValue(String, StringValues) IHttpCollection.Keys IHttpCollection.Values Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public interface IResponseHeaders : IHttpCollection, IReadOnlyCollection<KeyValuePair<string, StringValues>>, IEnumerable<KeyValuePair<string, StringValues>>, IEnumerable Properties Item[String] Gets or sets the value with the specified key. Declaration StringValues this[string key] { get; set; } Parameters Type Name Description String key The key of the value to get. Property Value Type Description StringValues The element with the specified key, or StringValues.Empty if the key is not present. Remarks IHttpCollection has a different indexer contract than IDictionary<TKey,TValue> , as it will return StringValues.Empty for missing entries rather than throwing an Exception. Exceptions Type Condition ArgumentNullException key is null. WebHookAllowedOrigin Indicates this trigger will allow WebHook requests from the specified origin in response to a validation request. This is part of the HTTP 1.1 Web Hooks for Event Delivery - Version 1.0.1 specification: https://github.com/cloudevents/spec/blob/v1.0.1/http-webhook.md#42-validation-response Declaration string WebHookAllowedOrigin { get; set; } Property Value Type Description String WebHookAllowedRate Grants permission to send notifications at the specified rate. Abbot limits this value to 120. Declaration int WebHookAllowedRate { get; set; } Property Value Type Description Int32"
  },
  "reference/csharp/Serious.Abbot.Scripting.IScriptGlobals.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.IScriptGlobals.html",
    "title": "Interface IScriptGlobals | Abbot Docs",
    "keywords": "Interface IScriptGlobals The global object for all user skills. Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public interface IScriptGlobals Properties Bot It's Abbot! Provides a set of services and information for your bot skill. Declaration IBot Bot { get; } Property Value Type Description IBot"
  },
  "reference/csharp/Serious.Abbot.Scripting.ISecrets.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.ISecrets.html",
    "title": "Interface ISecrets | Abbot Docs",
    "keywords": "Interface ISecrets Used to retrieve secrets stored for the skill. Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public interface ISecrets Methods GetAsync(String) Retrieves a stored secret for the current skill using the name . Declaration Task<string> GetAsync(string name) Parameters Type Name Description String name The key. Returns Type Description Task < String > A task with the value of the secret."
  },
  "reference/csharp/Serious.Abbot.Scripting.ISkillDataItem.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.ISkillDataItem.html",
    "title": "Interface ISkillDataItem | Abbot Docs",
    "keywords": "Interface ISkillDataItem Represents a piece of data stored for a skill. Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public interface ISkillDataItem Properties Key The key Declaration string Key { get; } Property Value Type Description String Value A dynamic value. Could be a string or an object. Declaration dynamic Value { get; } Property Value Type Description Object Methods GetValueAs<T>(T) Retrieves the value as type T. Declaration T GetValueAs<T>(T defaultValue = null) Parameters Type Name Description T defaultValue The value to return if value does not exist or cannot be cast. Returns Type Description T Type Parameters Name Description T The type to cast the value as."
  },
  "reference/csharp/Serious.Abbot.Scripting.IVersionInfo.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.IVersionInfo.html",
    "title": "Interface IVersionInfo | Abbot Docs",
    "keywords": "Interface IVersionInfo Provides info about Abbot. Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public interface IVersionInfo Properties ApiVersion The version of the API that a skill is compiled against. Declaration Version ApiVersion { get; } Property Value Type Description Version ProductVersion The current version of the Abbot Product. Declaration string ProductVersion { get; } Property Value Type Description String"
  },
  "reference/csharp/Serious.Abbot.Scripting.PlatformType.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.PlatformType.html",
    "title": "Class PlatformType | Abbot Docs",
    "keywords": "Class PlatformType The type of chat platform. Inheritance Object PlatformType Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public sealed class PlatformType : Enum Remarks IT IS VERY IMPORTANT TO MAINTAIN THE ORDER OF THESE VALUES! ASK ME HOW I KNOW - @haacked Fields DirectLine DirectLine Declaration public const PlatformType DirectLine Field Value Type Description PlatformType Discord Discord Declaration public const PlatformType Discord Field Value Type Description PlatformType MsTeams Teams Declaration public const PlatformType MsTeams Field Value Type Description PlatformType Slack Slack Declaration public const PlatformType Slack Field Value Type Description PlatformType UnitTest Unit test Declaration public const PlatformType UnitTest Field Value Type Description PlatformType value__ Declaration public int value__ Field Value Type Description Int32"
  },
  "reference/csharp/Serious.Abbot.Scripting.ReplyExtensions.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.ReplyExtensions.html",
    "title": "Class ReplyExtensions | Abbot Docs",
    "keywords": "Class ReplyExtensions Set of extension methods to make replying easier. Inheritance Object ReplyExtensions Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public static class ReplyExtensions : Object Methods Format(IChatUser) Formats the user for the target chat platform. This ensures platforms like Slack render the user in the proper format. Declaration public static string Format(this IChatUser user) Parameters Type Name Description IChatUser user The user to format. Returns Type Description String ToMarkdownList(IEnumerable<String>) Converts the list of items into a bulleted markdown list. Declaration public static string ToMarkdownList(this IEnumerable<string> items) Parameters Type Name Description IEnumerable < String > items The collection of strings to turn into a markdown list. Returns Type Description String A string formatted as a markdown list. ToOrderedList(IEnumerable<String>) Converts the list of items into an ordered markdown list. Declaration public static string ToOrderedList(this IEnumerable<string> items) Parameters Type Name Description IEnumerable < String > items The collection of strings to turn into a markdown list. Returns Type Description String A string formatted as a markdown list."
  },
  "reference/csharp/Serious.Abbot.Scripting.StringValues.Enumerator.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.StringValues.Enumerator.html",
    "title": "Class StringValues.Enumerator | Abbot Docs",
    "keywords": "Class StringValues.Enumerator Enumerates the string values of a StringValues . Inheritance Object StringValues.Enumerator Implements IEnumerator < String > IEnumerator IDisposable Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public sealed class Enumerator : ValueType, IEnumerator<string>, IEnumerator, IDisposable Constructors Enumerator(ref StringValues) Constructs the enumerator. Declaration public Enumerator(ref StringValues values) Parameters Type Name Description StringValues values Properties Current The current item. Declaration public string Current { get; } Property Value Type Description String Methods Dispose() Disposes the enumerator. Declaration public void Dispose() MoveNext() Moves to the nextitem. Declaration public bool MoveNext() Returns Type Description Boolean Implements System.Collections.Generic.IEnumerator<T> System.Collections.IEnumerator System.IDisposable"
  },
  "reference/csharp/Serious.Abbot.Scripting.StringValues.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.StringValues.html",
    "title": "Class StringValues | Abbot Docs",
    "keywords": "Class StringValues Represents zero/null, one, or many strings in an efficient way. Inheritance Object StringValues Implements IList < String > ICollection < String > IEnumerable < String > IEnumerable IReadOnlyList < String > IReadOnlyCollection < String > IEquatable < StringValues > IEquatable < String > IEquatable < String []> Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public sealed class StringValues : ValueType, IList<string>, ICollection<string>, IEnumerable<string>, IEnumerable, IReadOnlyList<string>, IReadOnlyCollection<string>, IEquatable<StringValues>, IEquatable<string>, IEquatable<string[]> Constructors StringValues(String) Initializes a new instance of the StringValues structure using the specified string. Declaration public StringValues(string value) Parameters Type Name Description String value A string value or null . StringValues(String[]) Initializes a new instance of the StringValues structure using the specified array of strings. Declaration public StringValues(string[] values) Parameters Type Name Description String [] values A string array. Fields Empty A readonly instance of the StringValues struct whose value is an empty string array. Declaration public static readonly StringValues Empty Field Value Type Description StringValues Remarks In application code, this field is most commonly used to safely represent a StringValues that has null string values. Properties Count Gets the number of String elements contained in this StringValues . Declaration public int Count { get; } Property Value Type Description Int32 Item[Int32] Gets the String at index. Declaration public string this[int index] { get; } Parameters Type Name Description Int32 index The zero-based index of the element to get. Property Value Type Description String The string at the specified index. Methods Concat(StringValues, StringValues) Concatenates two specified instances of StringValues . Declaration public static StringValues Concat(StringValues values1, StringValues values2) Parameters Type Name Description StringValues values1 The first StringValues to concatenate. StringValues values2 The second StringValues to concatenate. Returns Type Description StringValues The concatenation of values1 and values2 . Concat(StringValues, String) Concatenates specified instance of StringValues with specified String . Declaration public static StringValues Concat(in StringValues values, string value) Parameters Type Name Description StringValues values The StringValues to concatenate. String value The String to concatenate. Returns Type Description StringValues The concatenation of values and value . Concat(String, StringValues) Concatenates specified instance of String with specified StringValues . Declaration public static StringValues Concat(string value, in StringValues values) Parameters Type Name Description String value The String to concatenate. StringValues values The StringValues to concatenate. Returns Type Description StringValues The concatenation of values and values . Equals(StringValues) Determines whether this instance and another specified StringValues object have the same values. Declaration public bool Equals(StringValues other) Parameters Type Name Description StringValues other The string to compare to this instance. Returns Type Description Boolean true if the value of other is the same as the value of this instance; otherwise, false . Equals(StringValues, StringValues) Determines whether two specified StringValues objects have the same values in the same order. Declaration public static bool Equals(StringValues left, StringValues right) Parameters Type Name Description StringValues left The first StringValues to compare. StringValues right The second StringValues to compare. Returns Type Description Boolean true if the value of left is the same as the value of right ; otherwise, false . Equals(StringValues, String) Determines whether the specified StringValues and String objects have the same values. Declaration public static bool Equals(StringValues left, string right) Parameters Type Name Description StringValues left The StringValues to compare. String right The String to compare. Returns Type Description Boolean true if the value of left is the same as the value of right ; otherwise, false . If right is null , the method returns false . Equals(StringValues, String[]) Determines whether the specified StringValues and string array objects have the same values. Declaration public static bool Equals(StringValues left, string[] right) Parameters Type Name Description StringValues left The StringValues to compare. String [] right The string array to compare. Returns Type Description Boolean true if the value of left is the same as the value of right ; otherwise, false . Equals(Object) Determines whether this instance and a specified object have the same value. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj An object to compare with this object. Returns Type Description Boolean true if the current object is equal to obj ; otherwise, false . Equals(String) Determines whether this instance and a specified String , have the same value. Declaration public bool Equals(string other) Parameters Type Name Description String other The String to compare to this instance. Returns Type Description Boolean true if the value of other is the same as this instance; otherwise, false . If other is null , returns false . Equals(String, StringValues) Determines whether the specified String and StringValues objects have the same values. Declaration public static bool Equals(string left, StringValues right) Parameters Type Name Description String left The String to compare. StringValues right The StringValues to compare. Returns Type Description Boolean true if the value of left is the same as the value of right ; otherwise, false . If left is null , the method returns false . Equals(String[]) Determines whether this instance and a specified string array have the same values. Declaration public bool Equals(string[] other) Parameters Type Name Description String [] other The string array to compare to this instance. Returns Type Description Boolean true if the value of other is the same as this instance; otherwise, false . Equals(String[], StringValues) Determines whether the specified string array and StringValues objects have the same values. Declaration public static bool Equals(string[] left, StringValues right) Parameters Type Name Description String [] left The string array to compare. StringValues right The StringValues to compare. Returns Type Description Boolean true if the value of left is the same as the value of right ; otherwise, false . GetEnumerator() Retrieves an object that can iterate through the individual strings in this StringValues . Declaration public StringValues.Enumerator GetEnumerator() Returns Type Description StringValues.Enumerator An enumerator that can be used to iterate through the StringValues . GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 IsNullOrEmpty(StringValues) Indicates whether the specified StringValues contains no string values. Declaration public static bool IsNullOrEmpty(StringValues value) Parameters Type Name Description StringValues value The StringValues to test. Returns Type Description Boolean true if value contains a single null string or empty array; otherwise, false. ToArray() Creates a string array from the current StringValues object. Declaration public string[] ToArray() Returns Type Description String [] A string array represented by this instance. Remarks If the StringValues contains a single string internally, it is copied to a new array. If the StringValues contains an array internally it returns that array instance. ToString() Converts the value of the current StringValues object to its equivalent string representation, with multiple values joined as a comma separated string. Declaration public override string ToString() Returns Type Description String A string representation of the value of the current StringValues object. Operators Equality(StringValues, StringValues) Determines whether two specified StringValues have the same values. Declaration public static bool operator ==(StringValues left, StringValues right) Parameters Type Name Description StringValues left The first StringValues to compare. StringValues right The second StringValues to compare. Returns Type Description Boolean true if the value of left is the same as the value of right ; otherwise, false . Equality(StringValues, Object) Determines whether the specified StringValues and Object , which must be a StringValues , String , or array of String , have the same value. Declaration public static bool operator ==(StringValues left, object right) Parameters Type Name Description StringValues left The StringValues to compare. Object right The Object to compare. Returns Type Description Boolean true if the left object is equal to the right ; otherwise, false . Equality(StringValues, String) Declaration public static bool operator ==(StringValues left, string right) Parameters Type Name Description StringValues left String right Returns Type Description Boolean Equality(StringValues, String[]) Declaration public static bool operator ==(StringValues left, string[] right) Parameters Type Name Description StringValues left String [] right Returns Type Description Boolean Equality(Object, StringValues) Determines whether the specified Object , which must be a StringValues , String , or array of String , and specified StringValues , have the same value. Declaration public static bool operator ==(object left, StringValues right) Parameters Type Name Description Object left The StringValues to compare. StringValues right The Object to compare. Returns Type Description Boolean true if the left object is equal to the right ; otherwise, false . Equality(String, StringValues) Declaration public static bool operator ==(string left, StringValues right) Parameters Type Name Description String left StringValues right Returns Type Description Boolean Equality(String[], StringValues) Declaration public static bool operator ==(string[] left, StringValues right) Parameters Type Name Description String [] left StringValues right Returns Type Description Boolean Implicit(StringValues to String) Defines an implicit conversion of a given StringValues to a string, with multiple values joined as a comma separated string. Declaration public static implicit operator string (StringValues values) Parameters Type Name Description StringValues values A StringValues to implicitly convert. Returns Type Description String Remarks Returns null where StringValues has been initialized from an empty string array or is Empty . Implicit(StringValues to String[]) Defines an implicit conversion of a given StringValues to a string array. Declaration public static implicit operator string[](StringValues value) Parameters Type Name Description StringValues value A StringValues to implicitly convert. Returns Type Description String [] Implicit(String to StringValues) Defines an implicit conversion of a given string to a StringValues . Declaration public static implicit operator StringValues(string value) Parameters Type Name Description String value A string to implicitly convert. Returns Type Description StringValues Implicit(String[] to StringValues) Defines an implicit conversion of a given string array to a StringValues . Declaration public static implicit operator StringValues(string[] values) Parameters Type Name Description String [] values A string array to implicitly convert. Returns Type Description StringValues Inequality(StringValues, StringValues) Determines whether two specified StringValues have different values. Declaration public static bool operator !=(StringValues left, StringValues right) Parameters Type Name Description StringValues left The first StringValues to compare. StringValues right The second StringValues to compare. Returns Type Description Boolean true if the value of left is different to the value of right ; otherwise, false . Inequality(StringValues, Object) Determines whether the specified StringValues and Object , which must be a StringValues , String , or array of String , have different values. Declaration public static bool operator !=(StringValues left, object right) Parameters Type Name Description StringValues left The StringValues to compare. Object right The Object to compare. Returns Type Description Boolean true if the left object is equal to the right ; otherwise, false . Inequality(StringValues, String) Determines whether the specified StringValues and String objects have different values. Declaration public static bool operator !=(StringValues left, string right) Parameters Type Name Description StringValues left The StringValues to compare. String right The String to compare. Returns Type Description Boolean true if the value of left is different to the value of right ; otherwise, false . Inequality(StringValues, String[]) Determines whether the specified StringValues and string array have different values. Declaration public static bool operator !=(StringValues left, string[] right) Parameters Type Name Description StringValues left The StringValues to compare. String [] right The string array to compare. Returns Type Description Boolean true if the value of left is different to the value of right ; otherwise, false . Inequality(Object, StringValues) Determines whether the specified Object and StringValues object have the same values. Declaration public static bool operator !=(object left, StringValues right) Parameters Type Name Description Object left The Object to compare. StringValues right The StringValues to compare. Returns Type Description Boolean true if the left object is equal to the right ; otherwise, false . Inequality(String, StringValues) Determines whether the specified String and StringValues objects have different values. Declaration public static bool operator !=(string left, StringValues right) Parameters Type Name Description String left The String to compare. StringValues right The StringValues to compare. Returns Type Description Boolean true if the value of left is different to the value of right ; otherwise, false . Inequality(String[], StringValues) Determines whether the specified string array and StringValues have different values. Declaration public static bool operator !=(string[] left, StringValues right) Parameters Type Name Description String [] left The string array to compare. StringValues right The StringValues to compare. Returns Type Description Boolean true if the value of left is different to the value of right ; otherwise, false . Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable System.Collections.Generic.IReadOnlyList<T> System.Collections.Generic.IReadOnlyCollection<T> System.IEquatable<T> System.IEquatable<T> System.IEquatable<T>"
  },
  "reference/csharp/Serious.Abbot.Scripting.Utilities.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.Utilities.html",
    "title": "Namespace Serious.Abbot.Scripting.Utilities | Abbot Docs",
    "keywords": "Namespace Serious.Abbot.Scripting.Utilities Interfaces IUtilities A useful grab bag of utility methods for C# skill authors."
  },
  "reference/csharp/Serious.Abbot.Scripting.Utilities.IUtilities.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.Utilities.IUtilities.html",
    "title": "Interface IUtilities | Abbot Docs",
    "keywords": "Interface IUtilities A useful grab bag of utility methods for C# skill authors. Namespace : Serious.Abbot.Scripting.Utilities Assembly : Abbot.Scripting.Interfaces.dll Syntax public interface IUtilities Methods CreateRandom() Returns a class that derives from Random , but is cryptographically strong. Declaration Random CreateRandom() Returns Type Description Random GetGeocodeAsync(String, Boolean) Returns the coordinates and name of an address. The address can be specified in the same way you'd use with mapping software such as specifying a zip, city, full address, name of a business, or even cross streets. Declaration Task<ILocation> GetGeocodeAsync(string address, bool includeTimezone = false) Parameters Type Name Description String address An address to geocode. Boolean includeTimezone Optional. Whether or not to include the time zone for the location in the response. Returns Type Description Task < ILocation > A task with an ILocation that matches the address. If no location matches the input, then returns null."
  },
  "reference/index.html": {
    "href": "reference/index.html",
    "title": "Bot Reference Docs | Abbot Docs",
    "keywords": "Bot Reference Docs Every skill receives a Bot object with a set of properties and methods. The set of properties and methods may differ slightly based on the language of the skill. The following are the languages Abbot supports and the reference docs for the Bot object. C# Bot Reference Python Bot Reference JavaScript Bot Reference coming soon!"
  },
  "reference/python/bot.bot.Bot.html": {
    "href": "reference/python/bot.bot.Bot.html",
    "title": "Class Bot | Abbot Docs",
    "keywords": "Class Bot Most interactions with the outside world occur from the Bot object. Abbot injects this object into your script as bot . Inheritance builtins.object Bot Methods reply(response) Send a reply. Declaration reply(response) Parameters Type Name Description str response The response to send back to chat. reply_later(response, delay_in_seconds) Reply after a delay. Declaration reply_later(response, delay_in_seconds) Parameters Type Name Description str response The response to send back to chat. int delay_in_seconds The number of seconds to delay before sending the response."
  },
  "reference/python/bot.bot.html": {
    "href": "reference/python/bot.bot.html",
    "title": "| Abbot Docs",
    "keywords": ""
  },
  "reference/python/bot.secrets.html": {
    "href": "reference/python/bot.secrets.html",
    "title": "| Abbot Docs",
    "keywords": ""
  },
  "reference/python/bot.secrets.Secrets.html": {
    "href": "reference/python/bot.secrets.Secrets.html",
    "title": "Class Secrets | Abbot Docs",
    "keywords": "Class Secrets Abbot's secrets manager. This is automatically instantiated for you as bot.secrets . Inheritance builtins.object Secrets Methods read(key) Read a secret from the vault. Declaration read(key) Parameters Type Name Description str key The key of the secret to retrieve. Returns Type Description secret ( str ) The secret from the vault."
  },
  "reference/python/bot.storage.Brain.html": {
    "href": "reference/python/bot.storage.Brain.html",
    "title": "Class Brain | Abbot Docs",
    "keywords": "Class Brain Abbot's brain. This has already been instantiated for you in bot.brain . Inheritance builtins.object Brain Methods delete(key) Delete an item from Abbot's brain. Declaration delete(key) Parameters Type Name Description str key The lookup key for the object to delete. get(key) Get an item from Abbot's brain. Declaration get(key) Parameters Type Name Description str key The item's key. Returns Type Description The string or object stored in Value. read(key) See get . Declaration read(key) Parameters Type Name Description key write(key, value) Write to Abbot's brain. This will overwrite any existing items with the same key . Declaration write(key, value) Parameters Type Name Description str key The lookup key for the object. object value The string or object to store in Abbot's brain."
  },
  "reference/python/bot.storage.html": {
    "href": "reference/python/bot.storage.html",
    "title": "| Abbot Docs",
    "keywords": ""
  },
  "reference/python/bot.utils.Geocode.html": {
    "href": "reference/python/bot.utils.Geocode.html",
    "title": "Class Geocode | Abbot Docs",
    "keywords": "Class Geocode A Geocoded address. Inheritance builtins.object Geocode"
  },
  "reference/python/bot.utils.html": {
    "href": "reference/python/bot.utils.html",
    "title": "| Abbot Docs",
    "keywords": ""
  },
  "reference/python/bot.utils.Utilities.html": {
    "href": "reference/python/bot.utils.Utilities.html",
    "title": "Class Utilities | Abbot Docs",
    "keywords": "Class Utilities Utilities to make development more convenient with Abbot. This has already been instantiated for you in bot.utils . Inheritance builtins.object Utilities Methods geocode(address, include_timezone=False) Geocode an address. Declaration geocode(address, include_timezone=False) Parameters Type Name Description str address the address to geocode. bool , optional include_timezone If True, include time zone information in the result. Defaults to False."
  },
  "reference/python/index.html": {
    "href": "reference/python/index.html",
    "title": "Package Abbot-Python | Abbot Docs",
    "keywords": "Package Abbot-Python"
  }
}